
TP_PdM_AndreaGarcia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800795c  0800795c  0001795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800803c  0800803c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800803c  0800803c  0001803c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008044  08008044  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008044  08008044  00018044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800804c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00004464  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200044ec  200044ec  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000136c9  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028f3  00000000  00000000  00033781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  00036078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b20  00000000  00000000  00036c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ba3  00000000  00000000  000377b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011078  00000000  00000000  0005c353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d559b  00000000  00000000  0006d3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00142966  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003578  00000000  00000000  001429bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007944 	.word	0x08007944

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08007944 	.word	0x08007944

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008c0:	f000 b96e 	b.w	8000ba0 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468c      	mov	ip, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 8083 	bne.w	80009f2 <__udivmoddi4+0x116>
 80008ec:	428a      	cmp	r2, r1
 80008ee:	4617      	mov	r7, r2
 80008f0:	d947      	bls.n	8000982 <__udivmoddi4+0xa6>
 80008f2:	fab2 f282 	clz	r2, r2
 80008f6:	b142      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f8:	f1c2 0020 	rsb	r0, r2, #32
 80008fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000900:	4091      	lsls	r1, r2
 8000902:	4097      	lsls	r7, r2
 8000904:	ea40 0c01 	orr.w	ip, r0, r1
 8000908:	4094      	lsls	r4, r2
 800090a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800090e:	0c23      	lsrs	r3, r4, #16
 8000910:	fbbc f6f8 	udiv	r6, ip, r8
 8000914:	fa1f fe87 	uxth.w	lr, r7
 8000918:	fb08 c116 	mls	r1, r8, r6, ip
 800091c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000920:	fb06 f10e 	mul.w	r1, r6, lr
 8000924:	4299      	cmp	r1, r3
 8000926:	d909      	bls.n	800093c <__udivmoddi4+0x60>
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800092e:	f080 8119 	bcs.w	8000b64 <__udivmoddi4+0x288>
 8000932:	4299      	cmp	r1, r3
 8000934:	f240 8116 	bls.w	8000b64 <__udivmoddi4+0x288>
 8000938:	3e02      	subs	r6, #2
 800093a:	443b      	add	r3, r7
 800093c:	1a5b      	subs	r3, r3, r1
 800093e:	b2a4      	uxth	r4, r4
 8000940:	fbb3 f0f8 	udiv	r0, r3, r8
 8000944:	fb08 3310 	mls	r3, r8, r0, r3
 8000948:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800094c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000950:	45a6      	cmp	lr, r4
 8000952:	d909      	bls.n	8000968 <__udivmoddi4+0x8c>
 8000954:	193c      	adds	r4, r7, r4
 8000956:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800095a:	f080 8105 	bcs.w	8000b68 <__udivmoddi4+0x28c>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f240 8102 	bls.w	8000b68 <__udivmoddi4+0x28c>
 8000964:	3802      	subs	r0, #2
 8000966:	443c      	add	r4, r7
 8000968:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096c:	eba4 040e 	sub.w	r4, r4, lr
 8000970:	2600      	movs	r6, #0
 8000972:	b11d      	cbz	r5, 800097c <__udivmoddi4+0xa0>
 8000974:	40d4      	lsrs	r4, r2
 8000976:	2300      	movs	r3, #0
 8000978:	e9c5 4300 	strd	r4, r3, [r5]
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	b902      	cbnz	r2, 8000986 <__udivmoddi4+0xaa>
 8000984:	deff      	udf	#255	; 0xff
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	2a00      	cmp	r2, #0
 800098c:	d150      	bne.n	8000a30 <__udivmoddi4+0x154>
 800098e:	1bcb      	subs	r3, r1, r7
 8000990:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000994:	fa1f f887 	uxth.w	r8, r7
 8000998:	2601      	movs	r6, #1
 800099a:	fbb3 fcfe 	udiv	ip, r3, lr
 800099e:	0c21      	lsrs	r1, r4, #16
 80009a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d907      	bls.n	80009c0 <__udivmoddi4+0xe4>
 80009b0:	1879      	adds	r1, r7, r1
 80009b2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0xe2>
 80009b8:	428b      	cmp	r3, r1
 80009ba:	f200 80e9 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009be:	4684      	mov	ip, r0
 80009c0:	1ac9      	subs	r1, r1, r3
 80009c2:	b2a3      	uxth	r3, r4
 80009c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009cc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009d0:	fb08 f800 	mul.w	r8, r8, r0
 80009d4:	45a0      	cmp	r8, r4
 80009d6:	d907      	bls.n	80009e8 <__udivmoddi4+0x10c>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x10a>
 80009e0:	45a0      	cmp	r8, r4
 80009e2:	f200 80d9 	bhi.w	8000b98 <__udivmoddi4+0x2bc>
 80009e6:	4618      	mov	r0, r3
 80009e8:	eba4 0408 	sub.w	r4, r4, r8
 80009ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009f0:	e7bf      	b.n	8000972 <__udivmoddi4+0x96>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0x12e>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	f000 80b1 	beq.w	8000b5e <__udivmoddi4+0x282>
 80009fc:	2600      	movs	r6, #0
 80009fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000a02:	4630      	mov	r0, r6
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	fab3 f683 	clz	r6, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d14a      	bne.n	8000aa8 <__udivmoddi4+0x1cc>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0x140>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 80b8 	bhi.w	8000b8c <__udivmoddi4+0x2b0>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	468c      	mov	ip, r1
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0a8      	beq.n	800097c <__udivmoddi4+0xa0>
 8000a2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a2e:	e7a5      	b.n	800097c <__udivmoddi4+0xa0>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f603 	lsr.w	r6, r0, r3
 8000a38:	4097      	lsls	r7, r2
 8000a3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a42:	40d9      	lsrs	r1, r3
 8000a44:	4330      	orrs	r0, r6
 8000a46:	0c03      	lsrs	r3, r0, #16
 8000a48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a4c:	fa1f f887 	uxth.w	r8, r7
 8000a50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a58:	fb06 f108 	mul.w	r1, r6, r8
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x19c>
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a6a:	f080 808d 	bcs.w	8000b88 <__udivmoddi4+0x2ac>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 808a 	bls.w	8000b88 <__udivmoddi4+0x2ac>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	443b      	add	r3, r7
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b281      	uxth	r1, r0
 8000a7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a88:	fb00 f308 	mul.w	r3, r0, r8
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x1c4>
 8000a90:	1879      	adds	r1, r7, r1
 8000a92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a96:	d273      	bcs.n	8000b80 <__udivmoddi4+0x2a4>
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d971      	bls.n	8000b80 <__udivmoddi4+0x2a4>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4439      	add	r1, r7
 8000aa0:	1acb      	subs	r3, r1, r3
 8000aa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000aa6:	e778      	b.n	800099a <__udivmoddi4+0xbe>
 8000aa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aac:	fa03 f406 	lsl.w	r4, r3, r6
 8000ab0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ab4:	431c      	orrs	r4, r3
 8000ab6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aba:	fa01 f306 	lsl.w	r3, r1, r6
 8000abe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ac2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ac6:	431f      	orrs	r7, r3
 8000ac8:	0c3b      	lsrs	r3, r7, #16
 8000aca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ace:	fa1f f884 	uxth.w	r8, r4
 8000ad2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ad6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ada:	fb09 fa08 	mul.w	sl, r9, r8
 8000ade:	458a      	cmp	sl, r1
 8000ae0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ae4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x220>
 8000aea:	1861      	adds	r1, r4, r1
 8000aec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000af0:	d248      	bcs.n	8000b84 <__udivmoddi4+0x2a8>
 8000af2:	458a      	cmp	sl, r1
 8000af4:	d946      	bls.n	8000b84 <__udivmoddi4+0x2a8>
 8000af6:	f1a9 0902 	sub.w	r9, r9, #2
 8000afa:	4421      	add	r1, r4
 8000afc:	eba1 010a 	sub.w	r1, r1, sl
 8000b00:	b2bf      	uxth	r7, r7
 8000b02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b0e:	fb00 f808 	mul.w	r8, r0, r8
 8000b12:	45b8      	cmp	r8, r7
 8000b14:	d907      	bls.n	8000b26 <__udivmoddi4+0x24a>
 8000b16:	19e7      	adds	r7, r4, r7
 8000b18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b1c:	d22e      	bcs.n	8000b7c <__udivmoddi4+0x2a0>
 8000b1e:	45b8      	cmp	r8, r7
 8000b20:	d92c      	bls.n	8000b7c <__udivmoddi4+0x2a0>
 8000b22:	3802      	subs	r0, #2
 8000b24:	4427      	add	r7, r4
 8000b26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b2a:	eba7 0708 	sub.w	r7, r7, r8
 8000b2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b32:	454f      	cmp	r7, r9
 8000b34:	46c6      	mov	lr, r8
 8000b36:	4649      	mov	r1, r9
 8000b38:	d31a      	bcc.n	8000b70 <__udivmoddi4+0x294>
 8000b3a:	d017      	beq.n	8000b6c <__udivmoddi4+0x290>
 8000b3c:	b15d      	cbz	r5, 8000b56 <__udivmoddi4+0x27a>
 8000b3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b42:	eb67 0701 	sbc.w	r7, r7, r1
 8000b46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b4a:	40f2      	lsrs	r2, r6
 8000b4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b50:	40f7      	lsrs	r7, r6
 8000b52:	e9c5 2700 	strd	r2, r7, [r5]
 8000b56:	2600      	movs	r6, #0
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e70b      	b.n	800097c <__udivmoddi4+0xa0>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e9      	b.n	800093c <__udivmoddi4+0x60>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6fd      	b.n	8000968 <__udivmoddi4+0x8c>
 8000b6c:	4543      	cmp	r3, r8
 8000b6e:	d2e5      	bcs.n	8000b3c <__udivmoddi4+0x260>
 8000b70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b74:	eb69 0104 	sbc.w	r1, r9, r4
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7df      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e7d2      	b.n	8000b26 <__udivmoddi4+0x24a>
 8000b80:	4660      	mov	r0, ip
 8000b82:	e78d      	b.n	8000aa0 <__udivmoddi4+0x1c4>
 8000b84:	4681      	mov	r9, r0
 8000b86:	e7b9      	b.n	8000afc <__udivmoddi4+0x220>
 8000b88:	4666      	mov	r6, ip
 8000b8a:	e775      	b.n	8000a78 <__udivmoddi4+0x19c>
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	e74a      	b.n	8000a26 <__udivmoddi4+0x14a>
 8000b90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b94:	4439      	add	r1, r7
 8000b96:	e713      	b.n	80009c0 <__udivmoddi4+0xe4>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	e724      	b.n	80009e8 <__udivmoddi4+0x10c>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_idiv0>:
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2110      	movs	r1, #16
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <SELECT+0x18>)
 8000bae:	f001 fc15 	bl	80023dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f001 f950 	bl	8001e58 <HAL_Delay>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <DESELECT+0x18>)
 8000bca:	f001 fc07 	bl	80023dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f001 f942 	bl	8001e58 <HAL_Delay>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40020000 	.word	0x40020000

08000bdc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000be6:	bf00      	nop
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <SPI_TxByte+0x30>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d1f8      	bne.n	8000be8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000bf6:	1df9      	adds	r1, r7, #7
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <SPI_TxByte+0x30>)
 8000bfe:	f002 f8d8 	bl	8002db2 <HAL_SPI_Transmit>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200013dc 	.word	0x200013dc

08000c10 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c1c:	bf00      	nop
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <SPI_TxBuffer+0x30>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d1f8      	bne.n	8000c1e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c2c:	887a      	ldrh	r2, [r7, #2]
 8000c2e:	2364      	movs	r3, #100	; 0x64
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <SPI_TxBuffer+0x30>)
 8000c34:	f002 f8bd 	bl	8002db2 <HAL_SPI_Transmit>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200013dc 	.word	0x200013dc

08000c44 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c4a:	23ff      	movs	r3, #255	; 0xff
 8000c4c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c4e:	bf00      	nop
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <SPI_RxByte+0x34>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d1f8      	bne.n	8000c50 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c5e:	1dba      	adds	r2, r7, #6
 8000c60:	1df9      	adds	r1, r7, #7
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <SPI_RxByte+0x34>)
 8000c6a:	f002 f9de 	bl	800302a <HAL_SPI_TransmitReceive>

	return data;
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200013dc 	.word	0x200013dc

08000c7c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c84:	f7ff ffde 	bl	8000c44 <SPI_RxByte>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	701a      	strb	r2, [r3, #0]
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <SD_ReadyWait+0x30>)
 8000ca0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ca4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000ca6:	f7ff ffcd 	bl	8000c44 <SPI_RxByte>
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2bff      	cmp	r3, #255	; 0xff
 8000cb2:	d003      	beq.n	8000cbc <SD_ReadyWait+0x24>
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SD_ReadyWait+0x30>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f4      	bne.n	8000ca6 <SD_ReadyWait+0xe>

	return res;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200002e8 	.word	0x200002e8

08000ccc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000cd2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cd6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000cd8:	f7ff ff72 	bl	8000bc0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	e005      	b.n	8000cee <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000ce2:	20ff      	movs	r0, #255	; 0xff
 8000ce4:	f7ff ff7a 	bl	8000bdc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2b09      	cmp	r3, #9
 8000cf2:	ddf6      	ble.n	8000ce2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000cf4:	f7ff ff56 	bl	8000ba4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000d0c:	2395      	movs	r3, #149	; 0x95
 8000d0e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000d10:	463b      	mov	r3, r7
 8000d12:	2106      	movs	r1, #6
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff7b 	bl	8000c10 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d1a:	e002      	b.n	8000d22 <SD_PowerOn+0x56>
	{
		cnt--;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d22:	f7ff ff8f 	bl	8000c44 <SPI_RxByte>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d002      	beq.n	8000d32 <SD_PowerOn+0x66>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f4      	bne.n	8000d1c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d32:	f7ff ff45 	bl	8000bc0 <DESELECT>
	SPI_TxByte(0XFF);
 8000d36:	20ff      	movs	r0, #255	; 0xff
 8000d38:	f7ff ff50 	bl	8000bdc <SPI_TxByte>

	PowerFlag = 1;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <SD_PowerOn+0x80>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200000a5 	.word	0x200000a5

08000d50 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <SD_PowerOff+0x14>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	200000a5 	.word	0x200000a5

08000d68 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <SD_CheckPower+0x14>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200000a5 	.word	0x200000a5

08000d80 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <SD_RxDataBlock+0x58>)
 8000d8c:	22c8      	movs	r2, #200	; 0xc8
 8000d8e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d90:	f7ff ff58 	bl	8000c44 <SPI_RxByte>
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	2bff      	cmp	r3, #255	; 0xff
 8000d9c:	d103      	bne.n	8000da6 <SD_RxDataBlock+0x26>
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <SD_RxDataBlock+0x58>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f4      	bne.n	8000d90 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	2bfe      	cmp	r3, #254	; 0xfe
 8000daa:	d001      	beq.n	8000db0 <SD_RxDataBlock+0x30>
 8000dac:	2300      	movs	r3, #0
 8000dae:	e00f      	b.n	8000dd0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff60 	bl	8000c7c <SPI_RxBytePtr>
	} while(len--);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	603a      	str	r2, [r7, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f4      	bne.n	8000db0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000dc6:	f7ff ff3d 	bl	8000c44 <SPI_RxByte>
	SPI_RxByte();
 8000dca:	f7ff ff3b 	bl	8000c44 <SPI_RxByte>

	return TRUE;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200002ea 	.word	0x200002ea

08000ddc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000dec:	f7ff ff54 	bl	8000c98 <SD_ReadyWait>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2bff      	cmp	r3, #255	; 0xff
 8000df4:	d001      	beq.n	8000dfa <SD_TxDataBlock+0x1e>
 8000df6:	2300      	movs	r3, #0
 8000df8:	e02f      	b.n	8000e5a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff feed 	bl	8000bdc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	2bfd      	cmp	r3, #253	; 0xfd
 8000e06:	d020      	beq.n	8000e4a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff feff 	bl	8000c10 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e12:	f7ff ff17 	bl	8000c44 <SPI_RxByte>
		SPI_RxByte();
 8000e16:	f7ff ff15 	bl	8000c44 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e1a:	e00b      	b.n	8000e34 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e1c:	f7ff ff12 	bl	8000c44 <SPI_RxByte>
 8000e20:	4603      	mov	r3, r0
 8000e22:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	f003 031f 	and.w	r3, r3, #31
 8000e2a:	2b05      	cmp	r3, #5
 8000e2c:	d006      	beq.n	8000e3c <SD_TxDataBlock+0x60>
			i++;
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
 8000e30:	3301      	adds	r3, #1
 8000e32:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	2b40      	cmp	r3, #64	; 0x40
 8000e38:	d9f0      	bls.n	8000e1c <SD_TxDataBlock+0x40>
 8000e3a:	e000      	b.n	8000e3e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e3c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e3e:	bf00      	nop
 8000e40:	f7ff ff00 	bl	8000c44 <SPI_RxByte>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0fa      	beq.n	8000e40 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	f003 031f 	and.w	r3, r3, #31
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	d101      	bne.n	8000e58 <SD_TxDataBlock+0x7c>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	6039      	str	r1, [r7, #0]
 8000e6c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e6e:	f7ff ff13 	bl	8000c98 <SD_ReadyWait>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2bff      	cmp	r3, #255	; 0xff
 8000e76:	d001      	beq.n	8000e7c <SD_SendCmd+0x1a>
 8000e78:	23ff      	movs	r3, #255	; 0xff
 8000e7a:	e042      	b.n	8000f02 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff feac 	bl	8000bdc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	0e1b      	lsrs	r3, r3, #24
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fea6 	bl	8000bdc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	0c1b      	lsrs	r3, r3, #16
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fea0 	bl	8000bdc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fe9a 	bl	8000bdc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe95 	bl	8000bdc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b40      	cmp	r3, #64	; 0x40
 8000eb6:	d102      	bne.n	8000ebe <SD_SendCmd+0x5c>
 8000eb8:	2395      	movs	r3, #149	; 0x95
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e007      	b.n	8000ece <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b48      	cmp	r3, #72	; 0x48
 8000ec2:	d102      	bne.n	8000eca <SD_SendCmd+0x68>
 8000ec4:	2387      	movs	r3, #135	; 0x87
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e001      	b.n	8000ece <SD_SendCmd+0x6c>
	else crc = 1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fe83 	bl	8000bdc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b4c      	cmp	r3, #76	; 0x4c
 8000eda:	d101      	bne.n	8000ee0 <SD_SendCmd+0x7e>
 8000edc:	f7ff feb2 	bl	8000c44 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000ee4:	f7ff feae 	bl	8000c44 <SPI_RxByte>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000eec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	da05      	bge.n	8000f00 <SD_SendCmd+0x9e>
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	73bb      	strb	r3, [r7, #14]
 8000efa:	7bbb      	ldrb	r3, [r7, #14]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f1      	bne.n	8000ee4 <SD_SendCmd+0x82>

	return res;
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SD_disk_initialize+0x14>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0d1      	b.n	80010c4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f20:	4b6a      	ldr	r3, [pc, #424]	; (80010cc <SD_disk_initialize+0x1c0>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <SD_disk_initialize+0x2a>
 8000f2e:	4b67      	ldr	r3, [pc, #412]	; (80010cc <SD_disk_initialize+0x1c0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	e0c6      	b.n	80010c4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000f36:	f7ff fec9 	bl	8000ccc <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f3a:	f7ff fe33 	bl	8000ba4 <SELECT>

	/* check disk type */
	type = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f42:	2100      	movs	r1, #0
 8000f44:	2040      	movs	r0, #64	; 0x40
 8000f46:	f7ff ff8c 	bl	8000e62 <SD_SendCmd>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 80a1 	bne.w	8001094 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f52:	4b5f      	ldr	r3, [pc, #380]	; (80010d0 <SD_disk_initialize+0x1c4>)
 8000f54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f58:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f5a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f5e:	2048      	movs	r0, #72	; 0x48
 8000f60:	f7ff ff7f 	bl	8000e62 <SD_SendCmd>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d155      	bne.n	8001016 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e00c      	b.n	8000f8a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f70:	7bfc      	ldrb	r4, [r7, #15]
 8000f72:	f7ff fe67 	bl	8000c44 <SPI_RxByte>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4423      	add	r3, r4
 8000f80:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	3301      	adds	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d9ef      	bls.n	8000f70 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f90:	7abb      	ldrb	r3, [r7, #10]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d17e      	bne.n	8001094 <SD_disk_initialize+0x188>
 8000f96:	7afb      	ldrb	r3, [r7, #11]
 8000f98:	2baa      	cmp	r3, #170	; 0xaa
 8000f9a:	d17b      	bne.n	8001094 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2077      	movs	r0, #119	; 0x77
 8000fa0:	f7ff ff5f 	bl	8000e62 <SD_SendCmd>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d807      	bhi.n	8000fba <SD_disk_initialize+0xae>
 8000faa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fae:	2069      	movs	r0, #105	; 0x69
 8000fb0:	f7ff ff57 	bl	8000e62 <SD_SendCmd>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000fba:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <SD_disk_initialize+0x1c4>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1ec      	bne.n	8000f9c <SD_disk_initialize+0x90>
 8000fc2:	e000      	b.n	8000fc6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fc4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fc6:	4b42      	ldr	r3, [pc, #264]	; (80010d0 <SD_disk_initialize+0x1c4>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d062      	beq.n	8001094 <SD_disk_initialize+0x188>
 8000fce:	2100      	movs	r1, #0
 8000fd0:	207a      	movs	r0, #122	; 0x7a
 8000fd2:	f7ff ff46 	bl	8000e62 <SD_SendCmd>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d15b      	bne.n	8001094 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e00c      	b.n	8000ffc <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000fe2:	7bfc      	ldrb	r4, [r7, #15]
 8000fe4:	f7ff fe2e 	bl	8000c44 <SPI_RxByte>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4423      	add	r3, r4
 8000ff2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d9ef      	bls.n	8000fe2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001002:	7a3b      	ldrb	r3, [r7, #8]
 8001004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SD_disk_initialize+0x104>
 800100c:	230c      	movs	r3, #12
 800100e:	e000      	b.n	8001012 <SD_disk_initialize+0x106>
 8001010:	2304      	movs	r3, #4
 8001012:	73bb      	strb	r3, [r7, #14]
 8001014:	e03e      	b.n	8001094 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001016:	2100      	movs	r1, #0
 8001018:	2077      	movs	r0, #119	; 0x77
 800101a:	f7ff ff22 	bl	8000e62 <SD_SendCmd>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d808      	bhi.n	8001036 <SD_disk_initialize+0x12a>
 8001024:	2100      	movs	r1, #0
 8001026:	2069      	movs	r0, #105	; 0x69
 8001028:	f7ff ff1b 	bl	8000e62 <SD_SendCmd>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d801      	bhi.n	8001036 <SD_disk_initialize+0x12a>
 8001032:	2302      	movs	r3, #2
 8001034:	e000      	b.n	8001038 <SD_disk_initialize+0x12c>
 8001036:	2301      	movs	r3, #1
 8001038:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d10e      	bne.n	800105e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001040:	2100      	movs	r1, #0
 8001042:	2077      	movs	r0, #119	; 0x77
 8001044:	f7ff ff0d 	bl	8000e62 <SD_SendCmd>
 8001048:	4603      	mov	r3, r0
 800104a:	2b01      	cmp	r3, #1
 800104c:	d80e      	bhi.n	800106c <SD_disk_initialize+0x160>
 800104e:	2100      	movs	r1, #0
 8001050:	2069      	movs	r0, #105	; 0x69
 8001052:	f7ff ff06 	bl	8000e62 <SD_SendCmd>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d107      	bne.n	800106c <SD_disk_initialize+0x160>
 800105c:	e00c      	b.n	8001078 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800105e:	2100      	movs	r1, #0
 8001060:	2041      	movs	r0, #65	; 0x41
 8001062:	f7ff fefe 	bl	8000e62 <SD_SendCmd>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <SD_disk_initialize+0x1c4>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1e2      	bne.n	800103a <SD_disk_initialize+0x12e>
 8001074:	e000      	b.n	8001078 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001076:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <SD_disk_initialize+0x1c4>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <SD_disk_initialize+0x184>
 8001080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001084:	2050      	movs	r0, #80	; 0x50
 8001086:	f7ff feec 	bl	8000e62 <SD_SendCmd>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SD_disk_initialize+0x188>
 8001090:	2300      	movs	r3, #0
 8001092:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001094:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <SD_disk_initialize+0x1c8>)
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800109a:	f7ff fd91 	bl	8000bc0 <DESELECT>
	SPI_RxByte();
 800109e:	f7ff fdd1 	bl	8000c44 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <SD_disk_initialize+0x1c0>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SD_disk_initialize+0x1c0>)
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e001      	b.n	80010be <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010ba:	f7ff fe49 	bl	8000d50 <SD_PowerOff>
	}

	return Stat;
 80010be:	4b03      	ldr	r3, [pc, #12]	; (80010cc <SD_disk_initialize+0x1c0>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b2db      	uxtb	r3, r3
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	200002ea 	.word	0x200002ea
 80010d4:	200000a4 	.word	0x200000a4

080010d8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SD_disk_status+0x14>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e002      	b.n	80010f2 <SD_disk_status+0x1a>
	return Stat;
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SD_disk_status+0x28>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000000 	.word	0x20000000

08001104 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <SD_disk_read+0x1c>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <SD_disk_read+0x20>
 8001120:	2304      	movs	r3, #4
 8001122:	e051      	b.n	80011c8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <SD_disk_read+0xcc>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SD_disk_read+0x32>
 8001132:	2303      	movs	r3, #3
 8001134:	e048      	b.n	80011c8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001136:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <SD_disk_read+0xd0>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <SD_disk_read+0x44>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	025b      	lsls	r3, r3, #9
 8001146:	607b      	str	r3, [r7, #4]

	SELECT();
 8001148:	f7ff fd2c 	bl	8000ba4 <SELECT>

	if (count == 1)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d111      	bne.n	8001176 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	2051      	movs	r0, #81	; 0x51
 8001156:	f7ff fe84 	bl	8000e62 <SD_SendCmd>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d129      	bne.n	80011b4 <SD_disk_read+0xb0>
 8001160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001164:	68b8      	ldr	r0, [r7, #8]
 8001166:	f7ff fe0b 	bl	8000d80 <SD_RxDataBlock>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d021      	beq.n	80011b4 <SD_disk_read+0xb0>
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	e01e      	b.n	80011b4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	2052      	movs	r0, #82	; 0x52
 800117a:	f7ff fe72 	bl	8000e62 <SD_SendCmd>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d117      	bne.n	80011b4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001184:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f7ff fdf9 	bl	8000d80 <SD_RxDataBlock>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00a      	beq.n	80011aa <SD_disk_read+0xa6>
				buff += 512;
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800119a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1ed      	bne.n	8001184 <SD_disk_read+0x80>
 80011a8:	e000      	b.n	80011ac <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011aa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011ac:	2100      	movs	r1, #0
 80011ae:	204c      	movs	r0, #76	; 0x4c
 80011b0:	f7ff fe57 	bl	8000e62 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011b4:	f7ff fd04 	bl	8000bc0 <DESELECT>
	SPI_RxByte();
 80011b8:	f7ff fd44 	bl	8000c44 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	bf14      	ite	ne
 80011c2:	2301      	movne	r3, #1
 80011c4:	2300      	moveq	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	200000a4 	.word	0x200000a4

080011d8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <SD_disk_write+0x1c>
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <SD_disk_write+0x20>
 80011f4:	2304      	movs	r3, #4
 80011f6:	e06b      	b.n	80012d0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011f8:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <SD_disk_write+0x100>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SD_disk_write+0x32>
 8001206:	2303      	movs	r3, #3
 8001208:	e062      	b.n	80012d0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <SD_disk_write+0x100>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SD_disk_write+0x44>
 8001218:	2302      	movs	r3, #2
 800121a:	e059      	b.n	80012d0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <SD_disk_write+0x104>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <SD_disk_write+0x56>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	025b      	lsls	r3, r3, #9
 800122c:	607b      	str	r3, [r7, #4]

	SELECT();
 800122e:	f7ff fcb9 	bl	8000ba4 <SELECT>

	if (count == 1)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d110      	bne.n	800125a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	2058      	movs	r0, #88	; 0x58
 800123c:	f7ff fe11 	bl	8000e62 <SD_SendCmd>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d13a      	bne.n	80012bc <SD_disk_write+0xe4>
 8001246:	21fe      	movs	r1, #254	; 0xfe
 8001248:	68b8      	ldr	r0, [r7, #8]
 800124a:	f7ff fdc7 	bl	8000ddc <SD_TxDataBlock>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d033      	beq.n	80012bc <SD_disk_write+0xe4>
			count = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	e030      	b.n	80012bc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <SD_disk_write+0x104>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001266:	2100      	movs	r1, #0
 8001268:	2077      	movs	r0, #119	; 0x77
 800126a:	f7ff fdfa 	bl	8000e62 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800126e:	6839      	ldr	r1, [r7, #0]
 8001270:	2057      	movs	r0, #87	; 0x57
 8001272:	f7ff fdf6 	bl	8000e62 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	2059      	movs	r0, #89	; 0x59
 800127a:	f7ff fdf2 	bl	8000e62 <SD_SendCmd>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11b      	bne.n	80012bc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001284:	21fc      	movs	r1, #252	; 0xfc
 8001286:	68b8      	ldr	r0, [r7, #8]
 8001288:	f7ff fda8 	bl	8000ddc <SD_TxDataBlock>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00a      	beq.n	80012a8 <SD_disk_write+0xd0>
				buff += 512;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001298:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1ee      	bne.n	8001284 <SD_disk_write+0xac>
 80012a6:	e000      	b.n	80012aa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012a8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80012aa:	21fd      	movs	r1, #253	; 0xfd
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fd95 	bl	8000ddc <SD_TxDataBlock>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <SD_disk_write+0xe4>
			{
				count = 1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012bc:	f7ff fc80 	bl	8000bc0 <DESELECT>
	SPI_RxByte();
 80012c0:	f7ff fcc0 	bl	8000c44 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bf14      	ite	ne
 80012ca:	2301      	movne	r3, #1
 80012cc:	2300      	moveq	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	200000a4 	.word	0x200000a4

080012e0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08b      	sub	sp, #44	; 0x2c
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	603a      	str	r2, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	460b      	mov	r3, r1
 80012ee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SD_disk_ioctl+0x1e>
 80012fa:	2304      	movs	r3, #4
 80012fc:	e115      	b.n	800152a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	2b05      	cmp	r3, #5
 8001308:	d124      	bne.n	8001354 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d012      	beq.n	8001338 <SD_disk_ioctl+0x58>
 8001312:	2b02      	cmp	r3, #2
 8001314:	dc1a      	bgt.n	800134c <SD_disk_ioctl+0x6c>
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <SD_disk_ioctl+0x40>
 800131a:	2b01      	cmp	r3, #1
 800131c:	d006      	beq.n	800132c <SD_disk_ioctl+0x4c>
 800131e:	e015      	b.n	800134c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001320:	f7ff fd16 	bl	8000d50 <SD_PowerOff>
			res = RES_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800132a:	e0fc      	b.n	8001526 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800132c:	f7ff fcce 	bl	8000ccc <SD_PowerOn>
			res = RES_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001336:	e0f6      	b.n	8001526 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	1c5c      	adds	r4, r3, #1
 800133c:	f7ff fd14 	bl	8000d68 <SD_CheckPower>
 8001340:	4603      	mov	r3, r0
 8001342:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001344:	2300      	movs	r3, #0
 8001346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800134a:	e0ec      	b.n	8001526 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800134c:	2304      	movs	r3, #4
 800134e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001352:	e0e8      	b.n	8001526 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001354:	4b77      	ldr	r3, [pc, #476]	; (8001534 <SD_disk_ioctl+0x254>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SD_disk_ioctl+0x86>
 8001362:	2303      	movs	r3, #3
 8001364:	e0e1      	b.n	800152a <SD_disk_ioctl+0x24a>

		SELECT();
 8001366:	f7ff fc1d 	bl	8000ba4 <SELECT>

		switch (ctrl)
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	2b0d      	cmp	r3, #13
 800136e:	f200 80cb 	bhi.w	8001508 <SD_disk_ioctl+0x228>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <SD_disk_ioctl+0x98>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	08001473 	.word	0x08001473
 800137c:	080013b1 	.word	0x080013b1
 8001380:	08001463 	.word	0x08001463
 8001384:	08001509 	.word	0x08001509
 8001388:	08001509 	.word	0x08001509
 800138c:	08001509 	.word	0x08001509
 8001390:	08001509 	.word	0x08001509
 8001394:	08001509 	.word	0x08001509
 8001398:	08001509 	.word	0x08001509
 800139c:	08001509 	.word	0x08001509
 80013a0:	08001509 	.word	0x08001509
 80013a4:	08001485 	.word	0x08001485
 80013a8:	080014a9 	.word	0x080014a9
 80013ac:	080014cd 	.word	0x080014cd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013b0:	2100      	movs	r1, #0
 80013b2:	2049      	movs	r0, #73	; 0x49
 80013b4:	f7ff fd55 	bl	8000e62 <SD_SendCmd>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 80a8 	bne.w	8001510 <SD_disk_ioctl+0x230>
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2110      	movs	r1, #16
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fcda 	bl	8000d80 <SD_RxDataBlock>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 809e 	beq.w	8001510 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80013d4:	7b3b      	ldrb	r3, [r7, #12]
 80013d6:	099b      	lsrs	r3, r3, #6
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d10e      	bne.n	80013fc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013de:	7d7b      	ldrb	r3, [r7, #21]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	7d3b      	ldrb	r3, [r7, #20]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	3301      	adds	r3, #1
 80013f0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80013f2:	8bfb      	ldrh	r3, [r7, #30]
 80013f4:	029a      	lsls	r2, r3, #10
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e02e      	b.n	800145a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80013fc:	7c7b      	ldrb	r3, [r7, #17]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	b2da      	uxtb	r2, r3
 8001404:	7dbb      	ldrb	r3, [r7, #22]
 8001406:	09db      	lsrs	r3, r3, #7
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4413      	add	r3, r2
 800140c:	b2da      	uxtb	r2, r3
 800140e:	7d7b      	ldrb	r3, [r7, #21]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 0306 	and.w	r3, r3, #6
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4413      	add	r3, r2
 800141c:	b2db      	uxtb	r3, r3
 800141e:	3302      	adds	r3, #2
 8001420:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001424:	7d3b      	ldrb	r3, [r7, #20]
 8001426:	099b      	lsrs	r3, r3, #6
 8001428:	b2db      	uxtb	r3, r3
 800142a:	b29a      	uxth	r2, r3
 800142c:	7cfb      	ldrb	r3, [r7, #19]
 800142e:	b29b      	uxth	r3, r3
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	b29b      	uxth	r3, r3
 8001434:	4413      	add	r3, r2
 8001436:	b29a      	uxth	r2, r3
 8001438:	7cbb      	ldrb	r3, [r7, #18]
 800143a:	029b      	lsls	r3, r3, #10
 800143c:	b29b      	uxth	r3, r3
 800143e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001442:	b29b      	uxth	r3, r3
 8001444:	4413      	add	r3, r2
 8001446:	b29b      	uxth	r3, r3
 8001448:	3301      	adds	r3, #1
 800144a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800144c:	8bfa      	ldrh	r2, [r7, #30]
 800144e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001452:	3b09      	subs	r3, #9
 8001454:	409a      	lsls	r2, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001460:	e056      	b.n	8001510 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001468:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001470:	e055      	b.n	800151e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001472:	f7ff fc11 	bl	8000c98 <SD_ReadyWait>
 8001476:	4603      	mov	r3, r0
 8001478:	2bff      	cmp	r3, #255	; 0xff
 800147a:	d14b      	bne.n	8001514 <SD_disk_ioctl+0x234>
 800147c:	2300      	movs	r3, #0
 800147e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001482:	e047      	b.n	8001514 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001484:	2100      	movs	r1, #0
 8001486:	2049      	movs	r0, #73	; 0x49
 8001488:	f7ff fceb 	bl	8000e62 <SD_SendCmd>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d142      	bne.n	8001518 <SD_disk_ioctl+0x238>
 8001492:	2110      	movs	r1, #16
 8001494:	6a38      	ldr	r0, [r7, #32]
 8001496:	f7ff fc73 	bl	8000d80 <SD_RxDataBlock>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d03b      	beq.n	8001518 <SD_disk_ioctl+0x238>
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014a6:	e037      	b.n	8001518 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014a8:	2100      	movs	r1, #0
 80014aa:	204a      	movs	r0, #74	; 0x4a
 80014ac:	f7ff fcd9 	bl	8000e62 <SD_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d132      	bne.n	800151c <SD_disk_ioctl+0x23c>
 80014b6:	2110      	movs	r1, #16
 80014b8:	6a38      	ldr	r0, [r7, #32]
 80014ba:	f7ff fc61 	bl	8000d80 <SD_RxDataBlock>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d02b      	beq.n	800151c <SD_disk_ioctl+0x23c>
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014ca:	e027      	b.n	800151c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014cc:	2100      	movs	r1, #0
 80014ce:	207a      	movs	r0, #122	; 0x7a
 80014d0:	f7ff fcc7 	bl	8000e62 <SD_SendCmd>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d116      	bne.n	8001508 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014e0:	e00b      	b.n	80014fa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80014e2:	6a3c      	ldr	r4, [r7, #32]
 80014e4:	1c63      	adds	r3, r4, #1
 80014e6:	623b      	str	r3, [r7, #32]
 80014e8:	f7ff fbac 	bl	8000c44 <SPI_RxByte>
 80014ec:	4603      	mov	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80014f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014f4:	3301      	adds	r3, #1
 80014f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d9ef      	bls.n	80014e2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001508:	2304      	movs	r3, #4
 800150a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800150e:	e006      	b.n	800151e <SD_disk_ioctl+0x23e>
			break;
 8001510:	bf00      	nop
 8001512:	e004      	b.n	800151e <SD_disk_ioctl+0x23e>
			break;
 8001514:	bf00      	nop
 8001516:	e002      	b.n	800151e <SD_disk_ioctl+0x23e>
			break;
 8001518:	bf00      	nop
 800151a:	e000      	b.n	800151e <SD_disk_ioctl+0x23e>
			break;
 800151c:	bf00      	nop
		}

		DESELECT();
 800151e:	f7ff fb4f 	bl	8000bc0 <DESELECT>
		SPI_RxByte();
 8001522:	f7ff fb8f 	bl	8000c44 <SPI_RxByte>
	}

	return res;
 8001526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800152a:	4618      	mov	r0, r3
 800152c:	372c      	adds	r7, #44	; 0x2c
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	20000000 	.word	0x20000000

08001538 <transmit_uart.9902>:

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */
	void transmit_uart(char *string) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	f8c7 c000 	str.w	ip, [r7]
		uint8_t len = strlen(string);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7fe fe53 	bl	80001f0 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 200);
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	b29a      	uxth	r2, r3
 8001552:	23c8      	movs	r3, #200	; 0xc8
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <transmit_uart.9902+0x2c>)
 8001558:	f002 f821 	bl	800359e <HAL_UART_Transmit>
	}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200002f0 	.word	0x200002f0

08001568 <main>:
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b09e      	sub	sp, #120	; 0x78
 800156c:	af00      	add	r7, sp, #0
int main(void)
 800156e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001572:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_Init();
 8001574:	f000 fbfe 	bl	8001d74 <HAL_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001578:	f000 f986 	bl	8001888 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800157c:	f000 fa44 	bl	8001a08 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001580:	f000 f9e2 	bl	8001948 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 8001584:	f000 fa16 	bl	80019b4 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 8001588:	f002 fad2 	bl	8003b30 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(500);
 800158c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001590:	f000 fc62 	bl	8001e58 <HAL_Delay>

	fres = f_mount(&fs, "", 0);
 8001594:	2200      	movs	r2, #0
 8001596:	49a0      	ldr	r1, [pc, #640]	; (8001818 <main+0x2b0>)
 8001598:	48a0      	ldr	r0, [pc, #640]	; (800181c <main+0x2b4>)
 800159a:	f004 fd17 	bl	8005fcc <f_mount>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b9f      	ldr	r3, [pc, #636]	; (8001820 <main+0x2b8>)
 80015a4:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 80015a6:	4b9e      	ldr	r3, [pc, #632]	; (8001820 <main+0x2b8>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <main+0x54>
		transmit_uart("Micro SD card is mounted successfully!\n");
 80015ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015b2:	469c      	mov	ip, r3
 80015b4:	489b      	ldr	r0, [pc, #620]	; (8001824 <main+0x2bc>)
 80015b6:	f7ff ffbf 	bl	8001538 <transmit_uart.9902>
 80015ba:	e009      	b.n	80015d0 <main+0x68>
	} else if (fres != FR_OK) {
 80015bc:	4b98      	ldr	r3, [pc, #608]	; (8001820 <main+0x2b8>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <main+0x68>
		transmit_uart("Micro SD card's mount error!\n");
 80015c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015c8:	469c      	mov	ip, r3
 80015ca:	4897      	ldr	r0, [pc, #604]	; (8001828 <main+0x2c0>)
 80015cc:	f7ff ffb4 	bl	8001538 <transmit_uart.9902>
	}

	// FA_OPEN_APPEND opens file if it exists and if not then creates it,
	// the pointer is set at the end of the file for appending
	fres = f_open(&fil, "log-file.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 80015d0:	2233      	movs	r2, #51	; 0x33
 80015d2:	4996      	ldr	r1, [pc, #600]	; (800182c <main+0x2c4>)
 80015d4:	4896      	ldr	r0, [pc, #600]	; (8001830 <main+0x2c8>)
 80015d6:	f004 fd3f 	bl	8006058 <f_open>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	4b90      	ldr	r3, [pc, #576]	; (8001820 <main+0x2b8>)
 80015e0:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 80015e2:	4b8f      	ldr	r3, [pc, #572]	; (8001820 <main+0x2b8>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d106      	bne.n	80015f8 <main+0x90>
		transmit_uart("File opened for reading and checking the free space.\n");
 80015ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015ee:	469c      	mov	ip, r3
 80015f0:	4890      	ldr	r0, [pc, #576]	; (8001834 <main+0x2cc>)
 80015f2:	f7ff ffa1 	bl	8001538 <transmit_uart.9902>
 80015f6:	e009      	b.n	800160c <main+0xa4>
	} else if (fres != FR_OK) {
 80015f8:	4b89      	ldr	r3, [pc, #548]	; (8001820 <main+0x2b8>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <main+0xa4>
		transmit_uart("File was not opened for reading and checking the free space!\n");
 8001600:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001604:	469c      	mov	ip, r3
 8001606:	488c      	ldr	r0, [pc, #560]	; (8001838 <main+0x2d0>)
 8001608:	f7ff ff96 	bl	8001538 <transmit_uart.9902>
	}

	fres = f_getfree("", &fre_clust, &pfs);
 800160c:	4a8b      	ldr	r2, [pc, #556]	; (800183c <main+0x2d4>)
 800160e:	498c      	ldr	r1, [pc, #560]	; (8001840 <main+0x2d8>)
 8001610:	4881      	ldr	r0, [pc, #516]	; (8001818 <main+0x2b0>)
 8001612:	f005 fa88 	bl	8006b26 <f_getfree>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b81      	ldr	r3, [pc, #516]	; (8001820 <main+0x2b8>)
 800161c:	701a      	strb	r2, [r3, #0]
	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800161e:	4b87      	ldr	r3, [pc, #540]	; (800183c <main+0x2d4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	3b02      	subs	r3, #2
 8001626:	4a85      	ldr	r2, [pc, #532]	; (800183c <main+0x2d4>)
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	8952      	ldrh	r2, [r2, #10]
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff f8a1 	bl	8000778 <__aeabi_ui2d>
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	4b82      	ldr	r3, [pc, #520]	; (8001844 <main+0x2dc>)
 800163c:	f7fe fe30 	bl	80002a0 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff f910 	bl	800086c <__aeabi_d2uiz>
 800164c:	4603      	mov	r3, r0
 800164e:	4a7e      	ldr	r2, [pc, #504]	; (8001848 <main+0x2e0>)
 8001650:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001652:	4b7a      	ldr	r3, [pc, #488]	; (800183c <main+0x2d4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	895b      	ldrh	r3, [r3, #10]
 8001658:	461a      	mov	r2, r3
 800165a:	4b79      	ldr	r3, [pc, #484]	; (8001840 <main+0x2d8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fb03 f302 	mul.w	r3, r3, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f888 	bl	8000778 <__aeabi_ui2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b75      	ldr	r3, [pc, #468]	; (8001844 <main+0x2dc>)
 800166e:	f7fe fe17 	bl	80002a0 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff f8f7 	bl	800086c <__aeabi_d2uiz>
 800167e:	4603      	mov	r3, r0
 8001680:	4a72      	ldr	r2, [pc, #456]	; (800184c <main+0x2e4>)
 8001682:	6013      	str	r3, [r2, #0]
	char mSz[12];
	sprintf(mSz, "%lu", freeSpace);
 8001684:	4b71      	ldr	r3, [pc, #452]	; (800184c <main+0x2e4>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800168c:	4970      	ldr	r1, [pc, #448]	; (8001850 <main+0x2e8>)
 800168e:	4618      	mov	r0, r3
 8001690:	f005 fd2a 	bl	80070e8 <siprintf>
	if (fres == FR_OK) {
 8001694:	4b62      	ldr	r3, [pc, #392]	; (8001820 <main+0x2b8>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d114      	bne.n	80016c6 <main+0x15e>
		transmit_uart("The free space is: ");
 800169c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016a0:	469c      	mov	ip, r3
 80016a2:	486c      	ldr	r0, [pc, #432]	; (8001854 <main+0x2ec>)
 80016a4:	f7ff ff48 	bl	8001538 <transmit_uart.9902>
		transmit_uart(mSz);
 80016a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016ac:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80016b0:	4694      	mov	ip, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff40 	bl	8001538 <transmit_uart.9902>
		transmit_uart("\n");
 80016b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016bc:	469c      	mov	ip, r3
 80016be:	4866      	ldr	r0, [pc, #408]	; (8001858 <main+0x2f0>)
 80016c0:	f7ff ff3a 	bl	8001538 <transmit_uart.9902>
 80016c4:	e009      	b.n	80016da <main+0x172>
	} else if (fres != FR_OK) {
 80016c6:	4b56      	ldr	r3, [pc, #344]	; (8001820 <main+0x2b8>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <main+0x172>
		transmit_uart("The free space could not be determined!\n");
 80016ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016d2:	469c      	mov	ip, r3
 80016d4:	4861      	ldr	r0, [pc, #388]	; (800185c <main+0x2f4>)
 80016d6:	f7ff ff2f 	bl	8001538 <transmit_uart.9902>
	}

	for (uint8_t i = 0; i < 10; i++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80016e0:	e008      	b.n	80016f4 <main+0x18c>
		f_puts("This text is written in the file.\n", &fil);
 80016e2:	4953      	ldr	r1, [pc, #332]	; (8001830 <main+0x2c8>)
 80016e4:	485e      	ldr	r0, [pc, #376]	; (8001860 <main+0x2f8>)
 80016e6:	f005 fb87 	bl	8006df8 <f_puts>
	for (uint8_t i = 0; i < 10; i++) {
 80016ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016ee:	3301      	adds	r3, #1
 80016f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80016f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016f8:	2b09      	cmp	r3, #9
 80016fa:	d9f2      	bls.n	80016e2 <main+0x17a>
	}

	fres = f_close(&fil);
 80016fc:	484c      	ldr	r0, [pc, #304]	; (8001830 <main+0x2c8>)
 80016fe:	f005 f9e8 	bl	8006ad2 <f_close>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <main+0x2b8>)
 8001708:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 800170a:	4b45      	ldr	r3, [pc, #276]	; (8001820 <main+0x2b8>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <main+0x1b8>
		transmit_uart("The file is closed.\n");
 8001712:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001716:	469c      	mov	ip, r3
 8001718:	4852      	ldr	r0, [pc, #328]	; (8001864 <main+0x2fc>)
 800171a:	f7ff ff0d 	bl	8001538 <transmit_uart.9902>
 800171e:	e009      	b.n	8001734 <main+0x1cc>
	} else if (fres != FR_OK) {
 8001720:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <main+0x2b8>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <main+0x1cc>
		transmit_uart("The file was not closed.\n");
 8001728:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800172c:	469c      	mov	ip, r3
 800172e:	484e      	ldr	r0, [pc, #312]	; (8001868 <main+0x300>)
 8001730:	f7ff ff02 	bl	8001538 <transmit_uart.9902>
	}

	/* Open file to read */
	fres = f_open(&fil, "log-file.txt", FA_READ);
 8001734:	2201      	movs	r2, #1
 8001736:	493d      	ldr	r1, [pc, #244]	; (800182c <main+0x2c4>)
 8001738:	483d      	ldr	r0, [pc, #244]	; (8001830 <main+0x2c8>)
 800173a:	f004 fc8d 	bl	8006058 <f_open>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <main+0x2b8>)
 8001744:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001746:	4b36      	ldr	r3, [pc, #216]	; (8001820 <main+0x2b8>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d106      	bne.n	800175c <main+0x1f4>
		transmit_uart("File opened for reading.\n");
 800174e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001752:	469c      	mov	ip, r3
 8001754:	4845      	ldr	r0, [pc, #276]	; (800186c <main+0x304>)
 8001756:	f7ff feef 	bl	8001538 <transmit_uart.9902>
 800175a:	e017      	b.n	800178c <main+0x224>
	} else if (fres != FR_OK) {
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <main+0x2b8>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <main+0x224>
		transmit_uart("File was not opened for reading!\n");
 8001764:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001768:	469c      	mov	ip, r3
 800176a:	4841      	ldr	r0, [pc, #260]	; (8001870 <main+0x308>)
 800176c:	f7ff fee4 	bl	8001538 <transmit_uart.9902>
	}

	while (f_gets(buffer, sizeof(buffer), &fil)) {
 8001770:	e00c      	b.n	800178c <main+0x224>
		char mRd[100];
		sprintf(mRd, "%s", buffer);
 8001772:	463b      	mov	r3, r7
 8001774:	4a3f      	ldr	r2, [pc, #252]	; (8001874 <main+0x30c>)
 8001776:	4940      	ldr	r1, [pc, #256]	; (8001878 <main+0x310>)
 8001778:	4618      	mov	r0, r3
 800177a:	f005 fcb5 	bl	80070e8 <siprintf>
		transmit_uart(mRd);
 800177e:	463b      	mov	r3, r7
 8001780:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001784:	4694      	mov	ip, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fed6 	bl	8001538 <transmit_uart.9902>
	while (f_gets(buffer, sizeof(buffer), &fil)) {
 800178c:	4a28      	ldr	r2, [pc, #160]	; (8001830 <main+0x2c8>)
 800178e:	2164      	movs	r1, #100	; 0x64
 8001790:	4838      	ldr	r0, [pc, #224]	; (8001874 <main+0x30c>)
 8001792:	f005 fa7d 	bl	8006c90 <f_gets>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1ea      	bne.n	8001772 <main+0x20a>

	}

	/* Close file */
	fres = f_close(&fil);
 800179c:	4824      	ldr	r0, [pc, #144]	; (8001830 <main+0x2c8>)
 800179e:	f005 f998 	bl	8006ad2 <f_close>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <main+0x2b8>)
 80017a8:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <main+0x2b8>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d106      	bne.n	80017c0 <main+0x258>
		transmit_uart("The file is closed.\n");
 80017b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017b6:	469c      	mov	ip, r3
 80017b8:	482a      	ldr	r0, [pc, #168]	; (8001864 <main+0x2fc>)
 80017ba:	f7ff febd 	bl	8001538 <transmit_uart.9902>
 80017be:	e009      	b.n	80017d4 <main+0x26c>
	} else if (fres != FR_OK) {
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <main+0x2b8>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <main+0x26c>
		transmit_uart("The file was not closed.\n");
 80017c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017cc:	469c      	mov	ip, r3
 80017ce:	4826      	ldr	r0, [pc, #152]	; (8001868 <main+0x300>)
 80017d0:	f7ff feb2 	bl	8001538 <transmit_uart.9902>
	}

	f_mount(NULL, "", 1);
 80017d4:	2201      	movs	r2, #1
 80017d6:	4910      	ldr	r1, [pc, #64]	; (8001818 <main+0x2b0>)
 80017d8:	2000      	movs	r0, #0
 80017da:	f004 fbf7 	bl	8005fcc <f_mount>
	if (fres == FR_OK) {
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <main+0x2b8>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <main+0x28c>
		transmit_uart("The Micro SD card is unmounted!\n");
 80017e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017ea:	469c      	mov	ip, r3
 80017ec:	4823      	ldr	r0, [pc, #140]	; (800187c <main+0x314>)
 80017ee:	f7ff fea3 	bl	8001538 <transmit_uart.9902>
 80017f2:	e009      	b.n	8001808 <main+0x2a0>
	} else if (fres != FR_OK) {
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <main+0x2b8>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <main+0x2a0>
		transmit_uart("The Micro SD was not unmounted!");
 80017fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001800:	469c      	mov	ip, r3
 8001802:	481f      	ldr	r0, [pc, #124]	; (8001880 <main+0x318>)
 8001804:	f7ff fe98 	bl	8001538 <transmit_uart.9902>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		transmit_uart("Prueba serial \n");
 8001808:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800180c:	469c      	mov	ip, r3
 800180e:	481d      	ldr	r0, [pc, #116]	; (8001884 <main+0x31c>)
 8001810:	f7ff fe92 	bl	8001538 <transmit_uart.9902>
 8001814:	e7f8      	b.n	8001808 <main+0x2a0>
 8001816:	bf00      	nop
 8001818:	0800795c 	.word	0x0800795c
 800181c:	20000334 	.word	0x20000334
 8001820:	20001434 	.word	0x20001434
 8001824:	08007960 	.word	0x08007960
 8001828:	08007988 	.word	0x08007988
 800182c:	080079a8 	.word	0x080079a8
 8001830:	20001438 	.word	0x20001438
 8001834:	080079b8 	.word	0x080079b8
 8001838:	080079f0 	.word	0x080079f0
 800183c:	200013d8 	.word	0x200013d8
 8001840:	200002ec 	.word	0x200002ec
 8001844:	3fe00000 	.word	0x3fe00000
 8001848:	2000136c 	.word	0x2000136c
 800184c:	200013d4 	.word	0x200013d4
 8001850:	08007a30 	.word	0x08007a30
 8001854:	08007a34 	.word	0x08007a34
 8001858:	08007a48 	.word	0x08007a48
 800185c:	08007a4c 	.word	0x08007a4c
 8001860:	08007a78 	.word	0x08007a78
 8001864:	08007a9c 	.word	0x08007a9c
 8001868:	08007ab4 	.word	0x08007ab4
 800186c:	08007ad0 	.word	0x08007ad0
 8001870:	08007aec 	.word	0x08007aec
 8001874:	20001370 	.word	0x20001370
 8001878:	08007b10 	.word	0x08007b10
 800187c:	08007b14 	.word	0x08007b14
 8001880:	08007b38 	.word	0x08007b38
 8001884:	08007b58 	.word	0x08007b58

08001888 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b094      	sub	sp, #80	; 0x50
 800188c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	2230      	movs	r2, #48	; 0x30
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f005 fc1e 	bl	80070d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <SystemClock_Config+0xb8>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	4a22      	ldr	r2, [pc, #136]	; (8001940 <SystemClock_Config+0xb8>)
 80018b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ba:	6413      	str	r3, [r2, #64]	; 0x40
 80018bc:	4b20      	ldr	r3, [pc, #128]	; (8001940 <SystemClock_Config+0xb8>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <SystemClock_Config+0xbc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018d4:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <SystemClock_Config+0xbc>)
 80018d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <SystemClock_Config+0xbc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e8:	2302      	movs	r3, #2
 80018ea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ec:	2301      	movs	r3, #1
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f0:	2310      	movs	r3, #16
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f8:	f107 0320 	add.w	r3, r7, #32
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fd87 	bl	8002410 <HAL_RCC_OscConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <SystemClock_Config+0x84>
	{
		Error_Handler();
 8001908:	f000 f8c0 	bl	8001a8c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190c:	230f      	movs	r3, #15
 800190e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f000 ffea 	bl	8002900 <HAL_RCC_ClockConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8001932:	f000 f8ab 	bl	8001a8c <Error_Handler>
	}
}
 8001936:	bf00      	nop
 8001938:	3750      	adds	r7, #80	; 0x50
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	40007000 	.word	0x40007000

08001948 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_SPI1_Init+0x64>)
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <MX_SPI1_Init+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <MX_SPI1_Init+0x64>)
 8001954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001958:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <MX_SPI1_Init+0x64>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <MX_SPI1_Init+0x64>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_SPI1_Init+0x64>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_SPI1_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_SPI1_Init+0x64>)
 8001974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001978:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_SPI1_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <MX_SPI1_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_SPI1_Init+0x64>)
 8001988:	2200      	movs	r2, #0
 800198a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <MX_SPI1_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_SPI1_Init+0x64>)
 8001994:	220a      	movs	r2, #10
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_SPI1_Init+0x64>)
 800199a:	f001 f981 	bl	8002ca0 <HAL_SPI_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80019a4:	f000 f872 	bl	8001a8c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200013dc 	.word	0x200013dc
 80019b0:	40013000 	.word	0x40013000

080019b4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_USART3_UART_Init+0x4c>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <MX_USART3_UART_Init+0x50>)
 80019bc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_USART3_UART_Init+0x4c>)
 80019c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_USART3_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_USART3_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_USART3_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_USART3_UART_Init+0x4c>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_USART3_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_USART3_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_USART3_UART_Init+0x4c>)
 80019ec:	f001 fd8a 	bl	8003504 <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80019f6:	f000 f849 	bl	8001a8c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200002f0 	.word	0x200002f0
 8001a04:	40004800 	.word	0x40004800

08001a08 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_GPIO_Init+0x7c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <MX_GPIO_Init+0x7c>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_GPIO_Init+0x7c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_GPIO_Init+0x7c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <MX_GPIO_Init+0x7c>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_GPIO_Init+0x7c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2110      	movs	r1, #16
 8001a5a:	480b      	ldr	r0, [pc, #44]	; (8001a88 <MX_GPIO_Init+0x80>)
 8001a5c:	f000 fcbe 	bl	80023dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a60:	2310      	movs	r3, #16
 8001a62:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	4804      	ldr	r0, [pc, #16]	; (8001a88 <MX_GPIO_Init+0x80>)
 8001a78:	f000 fb04 	bl	8002084 <HAL_GPIO_Init>

}
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020000 	.word	0x40020000

08001a8c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a94:	e7fe      	b.n	8001a94 <Error_Handler+0x8>
	...

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <HAL_SPI_MspInit+0x84>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12b      	bne.n	8001b62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_SPI_MspInit+0x88>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_SPI_MspInit+0x88>)
 8001b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_SPI_MspInit+0x88>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_SPI_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_SPI_MspInit+0x88>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_SPI_MspInit+0x88>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b42:	23e0      	movs	r3, #224	; 0xe0
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b52:	2305      	movs	r3, #5
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_SPI_MspInit+0x8c>)
 8001b5e:	f000 fa91 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	; 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40013000 	.word	0x40013000
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000

08001b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_UART_MspInit+0x84>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d12c      	bne.n	8001bf4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <HAL_UART_MspInit+0x88>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <HAL_UART_MspInit+0x88>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_UART_MspInit+0x88>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_UART_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <HAL_UART_MspInit+0x88>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_UART_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001be4:	2307      	movs	r3, #7
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <HAL_UART_MspInit+0x8c>)
 8001bf0:	f000 fa48 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40004800 	.word	0x40004800
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020400 	.word	0x40020400

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler+0x4>

08001c0e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <SysTick_Handler+0x38>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <SysTick_Handler+0x18>
		Timer1--;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <SysTick_Handler+0x38>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <SysTick_Handler+0x38>)
 8001c66:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <SysTick_Handler+0x3c>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <SysTick_Handler+0x2c>
		Timer2--;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <SysTick_Handler+0x3c>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SysTick_Handler+0x3c>)
 8001c7a:	801a      	strh	r2, [r3, #0]

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001c7c:	f000 f8cc 	bl	8001e18 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	HAL_SYSTICK_IRQHandler();
 8001c80:	f000 f9f3 	bl	800206a <HAL_SYSTICK_IRQHandler>
	/* USER CODE END SysTick_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200002ea 	.word	0x200002ea
 8001c8c:	200002e8 	.word	0x200002e8

08001c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c98:	4a14      	ldr	r2, [pc, #80]	; (8001cec <_sbrk+0x5c>)
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <_sbrk+0x60>)
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <_sbrk+0x64>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <_sbrk+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d207      	bcs.n	8001cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc0:	f005 f9e0 	bl	8007084 <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cce:	e009      	b.n	8001ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <_sbrk+0x64>)
 8001ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20030000 	.word	0x20030000
 8001cf0:	00000400 	.word	0x00000400
 8001cf4:	200000a8 	.word	0x200000a8
 8001cf8:	200044f0 	.word	0x200044f0

08001cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <SystemInit+0x20>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <SystemInit+0x20>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d58 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d24:	480d      	ldr	r0, [pc, #52]	; (8001d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d26:	490e      	ldr	r1, [pc, #56]	; (8001d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d28:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d3c:	4c0b      	ldr	r4, [pc, #44]	; (8001d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d4a:	f7ff ffd7 	bl	8001cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f005 f99f 	bl	8007090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d52:	f7ff fc09 	bl	8001568 <main>
  bx  lr    
 8001d56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d58:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001d64:	0800804c 	.word	0x0800804c
  ldr r2, =_sbss
 8001d68:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d6c:	200044ec 	.word	0x200044ec

08001d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC_IRQHandler>
	...

08001d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <HAL_Init+0x40>)
 8001d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <HAL_Init+0x40>)
 8001d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_Init+0x40>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 f931 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	200f      	movs	r0, #15
 8001da4:	f000 f808 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da8:	f7ff fe76 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f93b 	bl	8002052 <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df4:	f000 f911 	bl	800201a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	; (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000004 	.word	0x20000004
 8001e10:	2000000c 	.word	0x2000000c
 8001e14:	20000008 	.word	0x20000008

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000000c 	.word	0x2000000c
 8001e3c:	20002468 	.word	0x20002468

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20002468 	.word	0x20002468

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	60d3      	str	r3, [r2, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db0a      	blt.n	8001f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	490c      	ldr	r1, [pc, #48]	; (8001f50 <__NVIC_SetPriority+0x4c>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f2c:	e00a      	b.n	8001f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4908      	ldr	r1, [pc, #32]	; (8001f54 <__NVIC_SetPriority+0x50>)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	0112      	lsls	r2, r2, #4
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	761a      	strb	r2, [r3, #24]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f1c3 0307 	rsb	r3, r3, #7
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	bf28      	it	cs
 8001f76:	2304      	movcs	r3, #4
 8001f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d902      	bls.n	8001f88 <NVIC_EncodePriority+0x30>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3b03      	subs	r3, #3
 8001f86:	e000      	b.n	8001f8a <NVIC_EncodePriority+0x32>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	4313      	orrs	r3, r2
         );
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd0:	d301      	bcc.n	8001fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00f      	b.n	8001ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <SysTick_Config+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fde:	210f      	movs	r1, #15
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fe4:	f7ff ff8e 	bl	8001f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <SysTick_Config+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <SysTick_Config+0x40>)
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010

08002004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff47 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202c:	f7ff ff5c 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 8002030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff ff8e 	bl	8001f58 <NVIC_EncodePriority>
 800203c:	4602      	mov	r2, r0
 800203e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff5d 	bl	8001f04 <__NVIC_SetPriority>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffb0 	bl	8001fc0 <SysTick_Config>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800206e:	f000 f802 	bl	8002076 <HAL_SYSTICK_Callback>
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e177      	b.n	8002390 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 8166 	bne.w	800238a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d005      	beq.n	80020d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d130      	bne.n	8002138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 0201 	and.w	r2, r3, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b03      	cmp	r3, #3
 8002142:	d017      	beq.n	8002174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d123      	bne.n	80021c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	220f      	movs	r2, #15
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	69b9      	ldr	r1, [r7, #24]
 80021c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0203 	and.w	r2, r3, #3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80c0 	beq.w	800238a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b66      	ldr	r3, [pc, #408]	; (80023a8 <HAL_GPIO_Init+0x324>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	4a65      	ldr	r2, [pc, #404]	; (80023a8 <HAL_GPIO_Init+0x324>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002218:	6453      	str	r3, [r2, #68]	; 0x44
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <HAL_GPIO_Init+0x324>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002226:	4a61      	ldr	r2, [pc, #388]	; (80023ac <HAL_GPIO_Init+0x328>)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_GPIO_Init+0x32c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d037      	beq.n	80022c2 <HAL_GPIO_Init+0x23e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a57      	ldr	r2, [pc, #348]	; (80023b4 <HAL_GPIO_Init+0x330>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d031      	beq.n	80022be <HAL_GPIO_Init+0x23a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a56      	ldr	r2, [pc, #344]	; (80023b8 <HAL_GPIO_Init+0x334>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02b      	beq.n	80022ba <HAL_GPIO_Init+0x236>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a55      	ldr	r2, [pc, #340]	; (80023bc <HAL_GPIO_Init+0x338>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d025      	beq.n	80022b6 <HAL_GPIO_Init+0x232>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a54      	ldr	r2, [pc, #336]	; (80023c0 <HAL_GPIO_Init+0x33c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01f      	beq.n	80022b2 <HAL_GPIO_Init+0x22e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a53      	ldr	r2, [pc, #332]	; (80023c4 <HAL_GPIO_Init+0x340>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d019      	beq.n	80022ae <HAL_GPIO_Init+0x22a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_GPIO_Init+0x344>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0x226>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a51      	ldr	r2, [pc, #324]	; (80023cc <HAL_GPIO_Init+0x348>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00d      	beq.n	80022a6 <HAL_GPIO_Init+0x222>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a50      	ldr	r2, [pc, #320]	; (80023d0 <HAL_GPIO_Init+0x34c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <HAL_GPIO_Init+0x21e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4f      	ldr	r2, [pc, #316]	; (80023d4 <HAL_GPIO_Init+0x350>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_GPIO_Init+0x21a>
 800229a:	2309      	movs	r3, #9
 800229c:	e012      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 800229e:	230a      	movs	r3, #10
 80022a0:	e010      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022a2:	2308      	movs	r3, #8
 80022a4:	e00e      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e00c      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022aa:	2306      	movs	r3, #6
 80022ac:	e00a      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022ae:	2305      	movs	r3, #5
 80022b0:	e008      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e004      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022c2:	2300      	movs	r3, #0
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	f002 0203 	and.w	r2, r2, #3
 80022ca:	0092      	lsls	r2, r2, #2
 80022cc:	4093      	lsls	r3, r2
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d4:	4935      	ldr	r1, [pc, #212]	; (80023ac <HAL_GPIO_Init+0x328>)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3302      	adds	r3, #2
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_GPIO_Init+0x354>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002306:	4a34      	ldr	r2, [pc, #208]	; (80023d8 <HAL_GPIO_Init+0x354>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800230c:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <HAL_GPIO_Init+0x354>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002330:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <HAL_GPIO_Init+0x354>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_GPIO_Init+0x354>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235a:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <HAL_GPIO_Init+0x354>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_GPIO_Init+0x354>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <HAL_GPIO_Init+0x354>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3301      	adds	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b0f      	cmp	r3, #15
 8002394:	f67f ae84 	bls.w	80020a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40013800 	.word	0x40013800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40021400 	.word	0x40021400
 80023c8:	40021800 	.word	0x40021800
 80023cc:	40021c00 	.word	0x40021c00
 80023d0:	40022000 	.word	0x40022000
 80023d4:	40022400 	.word	0x40022400
 80023d8:	40013c00 	.word	0x40013c00

080023dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
 80023e8:	4613      	mov	r3, r2
 80023ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f8:	e003      	b.n	8002402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	041a      	lsls	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e264      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d075      	beq.n	800251a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242e:	4ba3      	ldr	r3, [pc, #652]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d00c      	beq.n	8002454 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243a:	4ba0      	ldr	r3, [pc, #640]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002442:	2b08      	cmp	r3, #8
 8002444:	d112      	bne.n	800246c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b9d      	ldr	r3, [pc, #628]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002452:	d10b      	bne.n	800246c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	4b99      	ldr	r3, [pc, #612]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d05b      	beq.n	8002518 <HAL_RCC_OscConfig+0x108>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d157      	bne.n	8002518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e23f      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d106      	bne.n	8002484 <HAL_RCC_OscConfig+0x74>
 8002476:	4b91      	ldr	r3, [pc, #580]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a90      	ldr	r2, [pc, #576]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01d      	b.n	80024c0 <HAL_RCC_OscConfig+0xb0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x98>
 800248e:	4b8b      	ldr	r3, [pc, #556]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a8a      	ldr	r2, [pc, #552]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b88      	ldr	r3, [pc, #544]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a87      	ldr	r2, [pc, #540]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0xb0>
 80024a8:	4b84      	ldr	r3, [pc, #528]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a83      	ldr	r2, [pc, #524]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b81      	ldr	r3, [pc, #516]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a80      	ldr	r2, [pc, #512]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff fcba 	bl	8001e40 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff fcb6 	bl	8001e40 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e204      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b76      	ldr	r3, [pc, #472]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0xc0>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7ff fca6 	bl	8001e40 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff fca2 	bl	8001e40 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1f0      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	4b6c      	ldr	r3, [pc, #432]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0xe8>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d063      	beq.n	80025ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002526:	4b65      	ldr	r3, [pc, #404]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002532:	4b62      	ldr	r3, [pc, #392]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253a:	2b08      	cmp	r3, #8
 800253c:	d11c      	bne.n	8002578 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	4b5c      	ldr	r3, [pc, #368]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x152>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1c4      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	4b56      	ldr	r3, [pc, #344]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4952      	ldr	r1, [pc, #328]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	e03a      	b.n	80025ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002580:	4b4f      	ldr	r3, [pc, #316]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7ff fc5b 	bl	8001e40 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258e:	f7ff fc57 	bl	8001e40 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1a5      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	4b46      	ldr	r3, [pc, #280]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b43      	ldr	r3, [pc, #268]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4940      	ldr	r1, [pc, #256]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7ff fc3a 	bl	8001e40 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d0:	f7ff fc36 	bl	8001e40 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e184      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d030      	beq.n	800265c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_RCC_OscConfig+0x2b4>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7ff fc1a 	bl	8001e40 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002610:	f7ff fc16 	bl	8001e40 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e164      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x200>
 800262e:	e015      	b.n	800265c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002630:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_RCC_OscConfig+0x2b4>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7ff fc03 	bl	8001e40 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800263e:	f7ff fbff 	bl	8001e40 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e14d      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80a0 	beq.w	80027aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10f      	bne.n	800269a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002696:	2301      	movs	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_OscConfig+0x2b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d121      	bne.n	80026ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_RCC_OscConfig+0x2b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <HAL_RCC_OscConfig+0x2b8>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b2:	f7ff fbc5 	bl	8001e40 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	e011      	b.n	80026de <HAL_RCC_OscConfig+0x2ce>
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	42470000 	.word	0x42470000
 80026c4:	42470e80 	.word	0x42470e80
 80026c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026cc:	f7ff fbb8 	bl	8001e40 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e106      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b85      	ldr	r3, [pc, #532]	; (80028f4 <HAL_RCC_OscConfig+0x4e4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d106      	bne.n	8002700 <HAL_RCC_OscConfig+0x2f0>
 80026f2:	4b81      	ldr	r3, [pc, #516]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a80      	ldr	r2, [pc, #512]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	e01c      	b.n	800273a <HAL_RCC_OscConfig+0x32a>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d10c      	bne.n	8002722 <HAL_RCC_OscConfig+0x312>
 8002708:	4b7b      	ldr	r3, [pc, #492]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	4a7a      	ldr	r2, [pc, #488]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	6713      	str	r3, [r2, #112]	; 0x70
 8002714:	4b78      	ldr	r3, [pc, #480]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a77      	ldr	r2, [pc, #476]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
 8002720:	e00b      	b.n	800273a <HAL_RCC_OscConfig+0x32a>
 8002722:	4b75      	ldr	r3, [pc, #468]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4a74      	ldr	r2, [pc, #464]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6713      	str	r3, [r2, #112]	; 0x70
 800272e:	4b72      	ldr	r3, [pc, #456]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	4a71      	ldr	r2, [pc, #452]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 8002734:	f023 0304 	bic.w	r3, r3, #4
 8002738:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d015      	beq.n	800276e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7ff fb7d 	bl	8001e40 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7ff fb79 	bl	8001e40 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	; 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e0c5      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	4b65      	ldr	r3, [pc, #404]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ee      	beq.n	800274a <HAL_RCC_OscConfig+0x33a>
 800276c:	e014      	b.n	8002798 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276e:	f7ff fb67 	bl	8001e40 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7ff fb63 	bl	8001e40 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0af      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	4b5a      	ldr	r3, [pc, #360]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ee      	bne.n	8002776 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d105      	bne.n	80027aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279e:	4b56      	ldr	r3, [pc, #344]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a55      	ldr	r2, [pc, #340]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 80027a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 809b 	beq.w	80028ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b4:	4b50      	ldr	r3, [pc, #320]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d05c      	beq.n	800287a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d141      	bne.n	800284c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c8:	4b4c      	ldr	r3, [pc, #304]	; (80028fc <HAL_RCC_OscConfig+0x4ec>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7ff fb37 	bl	8001e40 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d6:	f7ff fb33 	bl	8001e40 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e081      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e8:	4b43      	ldr	r3, [pc, #268]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	019b      	lsls	r3, r3, #6
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	3b01      	subs	r3, #1
 800280e:	041b      	lsls	r3, r3, #16
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	061b      	lsls	r3, r3, #24
 8002818:	4937      	ldr	r1, [pc, #220]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281e:	4b37      	ldr	r3, [pc, #220]	; (80028fc <HAL_RCC_OscConfig+0x4ec>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7ff fb0c 	bl	8001e40 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282c:	f7ff fb08 	bl	8001e40 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e056      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x41c>
 800284a:	e04e      	b.n	80028ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284c:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <HAL_RCC_OscConfig+0x4ec>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7ff faf5 	bl	8001e40 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285a:	f7ff faf1 	bl	8001e40 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e03f      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x44a>
 8002878:	e037      	b.n	80028ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e032      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002886:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <HAL_RCC_OscConfig+0x4e8>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d028      	beq.n	80028e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d121      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d11a      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028b6:	4013      	ands	r3, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028be:	4293      	cmp	r3, r2
 80028c0:	d111      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	3b01      	subs	r3, #1
 80028d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40007000 	.word	0x40007000
 80028f8:	40023800 	.word	0x40023800
 80028fc:	42470060 	.word	0x42470060

08002900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0cc      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b68      	ldr	r3, [pc, #416]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d90c      	bls.n	800293c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b8      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002954:	4b59      	ldr	r3, [pc, #356]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a58      	ldr	r2, [pc, #352]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800295e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800296c:	4b53      	ldr	r3, [pc, #332]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a52      	ldr	r2, [pc, #328]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b50      	ldr	r3, [pc, #320]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	494d      	ldr	r1, [pc, #308]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d044      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d119      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e07f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d003      	beq.n	80029be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e067      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4934      	ldr	r1, [pc, #208]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f0:	f7ff fa26 	bl	8001e40 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7ff fa22 	bl	8001e40 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e04f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d20c      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e032      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4916      	ldr	r1, [pc, #88]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	490e      	ldr	r1, [pc, #56]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a86:	f000 f821 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	490a      	ldr	r1, [pc, #40]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	5ccb      	ldrb	r3, [r1, r3]
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f986 	bl	8001db8 <HAL_InitTick>

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	08007bb0 	.word	0x08007bb0
 8002ac4:	20000004 	.word	0x20000004
 8002ac8:	20000008 	.word	0x20000008

08002acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	b5b0      	push	{r4, r5, r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	6079      	str	r1, [r7, #4]
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	60f9      	str	r1, [r7, #12]
 8002ada:	2100      	movs	r1, #0
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ade:	2100      	movs	r1, #0
 8002ae0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae2:	4952      	ldr	r1, [pc, #328]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002ae4:	6889      	ldr	r1, [r1, #8]
 8002ae6:	f001 010c 	and.w	r1, r1, #12
 8002aea:	2908      	cmp	r1, #8
 8002aec:	d00d      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x3e>
 8002aee:	2908      	cmp	r1, #8
 8002af0:	f200 8094 	bhi.w	8002c1c <HAL_RCC_GetSysClockFreq+0x150>
 8002af4:	2900      	cmp	r1, #0
 8002af6:	d002      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x32>
 8002af8:	2904      	cmp	r1, #4
 8002afa:	d003      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x38>
 8002afc:	e08e      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002afe:	4b4c      	ldr	r3, [pc, #304]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b00:	60bb      	str	r3, [r7, #8]
       break;
 8002b02:	e08e      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b04:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b06:	60bb      	str	r3, [r7, #8]
      break;
 8002b08:	e08b      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0a:	4948      	ldr	r1, [pc, #288]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b0c:	6849      	ldr	r1, [r1, #4]
 8002b0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002b12:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b14:	4945      	ldr	r1, [pc, #276]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b16:	6849      	ldr	r1, [r1, #4]
 8002b18:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002b1c:	2900      	cmp	r1, #0
 8002b1e:	d024      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b20:	4942      	ldr	r1, [pc, #264]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b22:	6849      	ldr	r1, [r1, #4]
 8002b24:	0989      	lsrs	r1, r1, #6
 8002b26:	4608      	mov	r0, r1
 8002b28:	f04f 0100 	mov.w	r1, #0
 8002b2c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002b30:	f04f 0500 	mov.w	r5, #0
 8002b34:	ea00 0204 	and.w	r2, r0, r4
 8002b38:	ea01 0305 	and.w	r3, r1, r5
 8002b3c:	493d      	ldr	r1, [pc, #244]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b3e:	fb01 f003 	mul.w	r0, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	fb01 f102 	mul.w	r1, r1, r2
 8002b48:	1844      	adds	r4, r0, r1
 8002b4a:	493a      	ldr	r1, [pc, #232]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b4c:	fba2 0101 	umull	r0, r1, r2, r1
 8002b50:	1863      	adds	r3, r4, r1
 8002b52:	4619      	mov	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	f7fd fea6 	bl	80008ac <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4613      	mov	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	e04a      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6a:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	099b      	lsrs	r3, r3, #6
 8002b70:	461a      	mov	r2, r3
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	ea02 0400 	and.w	r4, r2, r0
 8002b82:	ea03 0501 	and.w	r5, r3, r1
 8002b86:	4620      	mov	r0, r4
 8002b88:	4629      	mov	r1, r5
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	014b      	lsls	r3, r1, #5
 8002b94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b98:	0142      	lsls	r2, r0, #5
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	1b00      	subs	r0, r0, r4
 8002ba0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	018b      	lsls	r3, r1, #6
 8002bae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bb2:	0182      	lsls	r2, r0, #6
 8002bb4:	1a12      	subs	r2, r2, r0
 8002bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bba:	f04f 0000 	mov.w	r0, #0
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	00d9      	lsls	r1, r3, #3
 8002bc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bc8:	00d0      	lsls	r0, r2, #3
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	1912      	adds	r2, r2, r4
 8002bd0:	eb45 0303 	adc.w	r3, r5, r3
 8002bd4:	f04f 0000 	mov.w	r0, #0
 8002bd8:	f04f 0100 	mov.w	r1, #0
 8002bdc:	0299      	lsls	r1, r3, #10
 8002bde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002be2:	0290      	lsls	r0, r2, #10
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	f7fd fe5a 	bl	80008ac <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	60bb      	str	r3, [r7, #8]
      break;
 8002c1a:	e002      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c1e:	60bb      	str	r3, [r7, #8]
      break;
 8002c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c22:	68bb      	ldr	r3, [r7, #8]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	00f42400 	.word	0x00f42400
 8002c34:	017d7840 	.word	0x017d7840

08002c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000004 	.word	0x20000004

08002c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c54:	f7ff fff0 	bl	8002c38 <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	0a9b      	lsrs	r3, r3, #10
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4903      	ldr	r1, [pc, #12]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	08007bc0 	.word	0x08007bc0

08002c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c7c:	f7ff ffdc 	bl	8002c38 <HAL_RCC_GetHCLKFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	0b5b      	lsrs	r3, r3, #13
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4903      	ldr	r1, [pc, #12]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	08007bc0 	.word	0x08007bc0

08002ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07b      	b.n	8002daa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d108      	bne.n	8002ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc2:	d009      	beq.n	8002cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
 8002cca:	e005      	b.n	8002cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fef8 	bl	8001ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5c:	ea42 0103 	orr.w	r1, r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	f003 0104 	and.w	r1, r3, #4
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f003 0210 	and.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b088      	sub	sp, #32
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_SPI_Transmit+0x22>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e126      	b.n	8003022 <HAL_SPI_Transmit+0x270>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ddc:	f7ff f830 	bl	8001e40 <HAL_GetTick>
 8002de0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d002      	beq.n	8002df8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
 8002df4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002df6:	e10b      	b.n	8003010 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_SPI_Transmit+0x52>
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e08:	e102      	b.n	8003010 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e50:	d10f      	bne.n	8002e72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d007      	beq.n	8002e90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e98:	d14b      	bne.n	8002f32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_SPI_Transmit+0xf6>
 8002ea2:	8afb      	ldrh	r3, [r7, #22]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d13e      	bne.n	8002f26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	881a      	ldrh	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	1c9a      	adds	r2, r3, #2
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ecc:	e02b      	b.n	8002f26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d112      	bne.n	8002f02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	881a      	ldrh	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	1c9a      	adds	r2, r3, #2
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f00:	e011      	b.n	8002f26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f02:	f7fe ff9d 	bl	8001e40 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d803      	bhi.n	8002f1a <HAL_SPI_Transmit+0x168>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f18:	d102      	bne.n	8002f20 <HAL_SPI_Transmit+0x16e>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f24:	e074      	b.n	8003010 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1ce      	bne.n	8002ece <HAL_SPI_Transmit+0x11c>
 8002f30:	e04c      	b.n	8002fcc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_SPI_Transmit+0x18e>
 8002f3a:	8afb      	ldrh	r3, [r7, #22]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d140      	bne.n	8002fc2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	7812      	ldrb	r2, [r2, #0]
 8002f4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f66:	e02c      	b.n	8002fc2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d113      	bne.n	8002f9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f9c:	e011      	b.n	8002fc2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f9e:	f7fe ff4f 	bl	8001e40 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d803      	bhi.n	8002fb6 <HAL_SPI_Transmit+0x204>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb4:	d102      	bne.n	8002fbc <HAL_SPI_Transmit+0x20a>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fc0:	e026      	b.n	8003010 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1cd      	bne.n	8002f68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fa55 	bl	8003480 <SPI_EndRxTxTransaction>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	e000      	b.n	8003010 <HAL_SPI_Transmit+0x25e>
  }

error:
 800300e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003020:	7ffb      	ldrb	r3, [r7, #31]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b08c      	sub	sp, #48	; 0x30
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003038:	2301      	movs	r3, #1
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x26>
 800304c:	2302      	movs	r3, #2
 800304e:	e18a      	b.n	8003366 <HAL_SPI_TransmitReceive+0x33c>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003058:	f7fe fef2 	bl	8001e40 <HAL_GetTick>
 800305c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003076:	2b01      	cmp	r3, #1
 8003078:	d00f      	beq.n	800309a <HAL_SPI_TransmitReceive+0x70>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003080:	d107      	bne.n	8003092 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d103      	bne.n	8003092 <HAL_SPI_TransmitReceive+0x68>
 800308a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800308e:	2b04      	cmp	r3, #4
 8003090:	d003      	beq.n	800309a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003092:	2302      	movs	r3, #2
 8003094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003098:	e15b      	b.n	8003352 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_SPI_TransmitReceive+0x82>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_SPI_TransmitReceive+0x82>
 80030a6:	887b      	ldrh	r3, [r7, #2]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030b2:	e14e      	b.n	8003352 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d003      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2205      	movs	r2, #5
 80030c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	887a      	ldrh	r2, [r7, #2]
 80030de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	887a      	ldrh	r2, [r7, #2]
 80030ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d007      	beq.n	800311c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800311a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003124:	d178      	bne.n	8003218 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x10a>
 800312e:	8b7b      	ldrh	r3, [r7, #26]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d166      	bne.n	8003202 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	881a      	ldrh	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	1c9a      	adds	r2, r3, #2
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003158:	e053      	b.n	8003202 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b02      	cmp	r3, #2
 8003166:	d11b      	bne.n	80031a0 <HAL_SPI_TransmitReceive+0x176>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d016      	beq.n	80031a0 <HAL_SPI_TransmitReceive+0x176>
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d113      	bne.n	80031a0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	881a      	ldrh	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	1c9a      	adds	r2, r3, #2
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d119      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0x1b8>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d014      	beq.n	80031e2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	b292      	uxth	r2, r2
 80031c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	1c9a      	adds	r2, r3, #2
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031de:	2301      	movs	r3, #1
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031e2:	f7fe fe2d 	bl	8001e40 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d807      	bhi.n	8003202 <HAL_SPI_TransmitReceive+0x1d8>
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f8:	d003      	beq.n	8003202 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003200:	e0a7      	b.n	8003352 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1a6      	bne.n	800315a <HAL_SPI_TransmitReceive+0x130>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1a1      	bne.n	800315a <HAL_SPI_TransmitReceive+0x130>
 8003216:	e07c      	b.n	8003312 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_SPI_TransmitReceive+0x1fc>
 8003220:	8b7b      	ldrh	r3, [r7, #26]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d16b      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	7812      	ldrb	r2, [r2, #0]
 8003232:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800324c:	e057      	b.n	80032fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b02      	cmp	r3, #2
 800325a:	d11c      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x26c>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d017      	beq.n	8003296 <HAL_SPI_TransmitReceive+0x26c>
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d114      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	330c      	adds	r3, #12
 8003276:	7812      	ldrb	r2, [r2, #0]
 8003278:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d119      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x2ae>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d014      	beq.n	80032d8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032d4:	2301      	movs	r3, #1
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032d8:	f7fe fdb2 	bl	8001e40 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d803      	bhi.n	80032f0 <HAL_SPI_TransmitReceive+0x2c6>
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ee:	d102      	bne.n	80032f6 <HAL_SPI_TransmitReceive+0x2cc>
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032fc:	e029      	b.n	8003352 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1a2      	bne.n	800324e <HAL_SPI_TransmitReceive+0x224>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d19d      	bne.n	800324e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f8b2 	bl	8003480 <SPI_EndRxTxTransaction>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d006      	beq.n	8003330 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800332e:	e010      	b.n	8003352 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	e000      	b.n	8003352 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003350:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003362:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003366:	4618      	mov	r0, r3
 8003368:	3730      	adds	r7, #48	; 0x30
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003380:	f7fe fd5e 	bl	8001e40 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	4413      	add	r3, r2
 800338e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003390:	f7fe fd56 	bl	8001e40 <HAL_GetTick>
 8003394:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003396:	4b39      	ldr	r3, [pc, #228]	; (800347c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	015b      	lsls	r3, r3, #5
 800339c:	0d1b      	lsrs	r3, r3, #20
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	fb02 f303 	mul.w	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033a6:	e054      	b.n	8003452 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ae:	d050      	beq.n	8003452 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033b0:	f7fe fd46 	bl	8001e40 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d902      	bls.n	80033c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d13d      	bne.n	8003442 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033de:	d111      	bne.n	8003404 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e8:	d004      	beq.n	80033f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f2:	d107      	bne.n	8003404 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340c:	d10f      	bne.n	800342e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800342c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e017      	b.n	8003472 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3b01      	subs	r3, #1
 8003450:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4013      	ands	r3, r2
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	bf0c      	ite	eq
 8003462:	2301      	moveq	r3, #1
 8003464:	2300      	movne	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	429a      	cmp	r2, r3
 800346e:	d19b      	bne.n	80033a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000004 	.word	0x20000004

08003480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <SPI_EndRxTxTransaction+0x7c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <SPI_EndRxTxTransaction+0x80>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	0d5b      	lsrs	r3, r3, #21
 8003498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034aa:	d112      	bne.n	80034d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2200      	movs	r2, #0
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7ff ff5a 	bl	8003370 <SPI_WaitFlagStateUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	f043 0220 	orr.w	r2, r3, #32
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e00f      	b.n	80034f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3b01      	subs	r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d0f2      	beq.n	80034d2 <SPI_EndRxTxTransaction+0x52>
 80034ec:	e000      	b.n	80034f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80034ee:	bf00      	nop
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000004 	.word	0x20000004
 8003500:	165e9f81 	.word	0x165e9f81

08003504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e03f      	b.n	8003596 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe fb24 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	; 0x24
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f929 	bl	80037a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800355c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800356c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800357c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b08a      	sub	sp, #40	; 0x28
 80035a2:	af02      	add	r7, sp, #8
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d17c      	bne.n	80036b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_UART_Transmit+0x2c>
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e075      	b.n	80036ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_UART_Transmit+0x3e>
 80035d8:	2302      	movs	r3, #2
 80035da:	e06e      	b.n	80036ba <HAL_UART_Transmit+0x11c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2221      	movs	r2, #33	; 0x21
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f2:	f7fe fc25 	bl	8001e40 <HAL_GetTick>
 80035f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360c:	d108      	bne.n	8003620 <HAL_UART_Transmit+0x82>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d104      	bne.n	8003620 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	e003      	b.n	8003628 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003630:	e02a      	b.n	8003688 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2200      	movs	r2, #0
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f840 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e036      	b.n	80036ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10b      	bne.n	800366a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	3302      	adds	r3, #2
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	e007      	b.n	800367a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	3301      	adds	r3, #1
 8003678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1cf      	bne.n	8003632 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	2140      	movs	r1, #64	; 0x40
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f810 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e006      	b.n	80036ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e000      	b.n	80036ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
  }
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b090      	sub	sp, #64	; 0x40
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	e050      	b.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036da:	d04c      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e2:	f7fe fbad 	bl	8001e40 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d241      	bcs.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003712:	637a      	str	r2, [r7, #52]	; 0x34
 8003714:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3314      	adds	r3, #20
 800372c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	613b      	str	r3, [r7, #16]
   return(result);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	63bb      	str	r3, [r7, #56]	; 0x38
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3314      	adds	r3, #20
 8003744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003746:	623a      	str	r2, [r7, #32]
 8003748:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	69f9      	ldr	r1, [r7, #28]
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	61bb      	str	r3, [r7, #24]
   return(result);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e00f      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4013      	ands	r3, r2
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	429a      	cmp	r2, r3
 8003792:	d09f      	beq.n	80036d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3740      	adds	r7, #64	; 0x40
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a4:	b09f      	sub	sp, #124	; 0x7c
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b6:	68d9      	ldr	r1, [r3, #12]
 80037b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	ea40 0301 	orr.w	r3, r0, r1
 80037c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80037da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037e4:	f021 010c 	bic.w	r1, r1, #12
 80037e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ee:	430b      	orrs	r3, r1
 80037f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fe:	6999      	ldr	r1, [r3, #24]
 8003800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	ea40 0301 	orr.w	r3, r0, r1
 8003808:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4bc5      	ldr	r3, [pc, #788]	; (8003b24 <UART_SetConfig+0x384>)
 8003810:	429a      	cmp	r2, r3
 8003812:	d004      	beq.n	800381e <UART_SetConfig+0x7e>
 8003814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4bc3      	ldr	r3, [pc, #780]	; (8003b28 <UART_SetConfig+0x388>)
 800381a:	429a      	cmp	r2, r3
 800381c:	d103      	bne.n	8003826 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800381e:	f7ff fa2b 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 8003822:	6778      	str	r0, [r7, #116]	; 0x74
 8003824:	e002      	b.n	800382c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003826:	f7ff fa13 	bl	8002c50 <HAL_RCC_GetPCLK1Freq>
 800382a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800382c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003834:	f040 80b6 	bne.w	80039a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800383a:	461c      	mov	r4, r3
 800383c:	f04f 0500 	mov.w	r5, #0
 8003840:	4622      	mov	r2, r4
 8003842:	462b      	mov	r3, r5
 8003844:	1891      	adds	r1, r2, r2
 8003846:	6439      	str	r1, [r7, #64]	; 0x40
 8003848:	415b      	adcs	r3, r3
 800384a:	647b      	str	r3, [r7, #68]	; 0x44
 800384c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003850:	1912      	adds	r2, r2, r4
 8003852:	eb45 0303 	adc.w	r3, r5, r3
 8003856:	f04f 0000 	mov.w	r0, #0
 800385a:	f04f 0100 	mov.w	r1, #0
 800385e:	00d9      	lsls	r1, r3, #3
 8003860:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003864:	00d0      	lsls	r0, r2, #3
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	1911      	adds	r1, r2, r4
 800386c:	6639      	str	r1, [r7, #96]	; 0x60
 800386e:	416b      	adcs	r3, r5
 8003870:	667b      	str	r3, [r7, #100]	; 0x64
 8003872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	461a      	mov	r2, r3
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	1891      	adds	r1, r2, r2
 800387e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003880:	415b      	adcs	r3, r3
 8003882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003888:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800388c:	f7fd f80e 	bl	80008ac <__aeabi_uldivmod>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4ba5      	ldr	r3, [pc, #660]	; (8003b2c <UART_SetConfig+0x38c>)
 8003896:	fba3 2302 	umull	r2, r3, r3, r2
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	011e      	lsls	r6, r3, #4
 800389e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a0:	461c      	mov	r4, r3
 80038a2:	f04f 0500 	mov.w	r5, #0
 80038a6:	4622      	mov	r2, r4
 80038a8:	462b      	mov	r3, r5
 80038aa:	1891      	adds	r1, r2, r2
 80038ac:	6339      	str	r1, [r7, #48]	; 0x30
 80038ae:	415b      	adcs	r3, r3
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
 80038b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038b6:	1912      	adds	r2, r2, r4
 80038b8:	eb45 0303 	adc.w	r3, r5, r3
 80038bc:	f04f 0000 	mov.w	r0, #0
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	00d9      	lsls	r1, r3, #3
 80038c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038ca:	00d0      	lsls	r0, r2, #3
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	1911      	adds	r1, r2, r4
 80038d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80038d4:	416b      	adcs	r3, r5
 80038d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	461a      	mov	r2, r3
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	1891      	adds	r1, r2, r2
 80038e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80038e6:	415b      	adcs	r3, r3
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80038f2:	f7fc ffdb 	bl	80008ac <__aeabi_uldivmod>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4b8c      	ldr	r3, [pc, #560]	; (8003b2c <UART_SetConfig+0x38c>)
 80038fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	2164      	movs	r1, #100	; 0x64
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	3332      	adds	r3, #50	; 0x32
 800390e:	4a87      	ldr	r2, [pc, #540]	; (8003b2c <UART_SetConfig+0x38c>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800391c:	441e      	add	r6, r3
 800391e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003920:	4618      	mov	r0, r3
 8003922:	f04f 0100 	mov.w	r1, #0
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	1894      	adds	r4, r2, r2
 800392c:	623c      	str	r4, [r7, #32]
 800392e:	415b      	adcs	r3, r3
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
 8003932:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003936:	1812      	adds	r2, r2, r0
 8003938:	eb41 0303 	adc.w	r3, r1, r3
 800393c:	f04f 0400 	mov.w	r4, #0
 8003940:	f04f 0500 	mov.w	r5, #0
 8003944:	00dd      	lsls	r5, r3, #3
 8003946:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800394a:	00d4      	lsls	r4, r2, #3
 800394c:	4622      	mov	r2, r4
 800394e:	462b      	mov	r3, r5
 8003950:	1814      	adds	r4, r2, r0
 8003952:	653c      	str	r4, [r7, #80]	; 0x50
 8003954:	414b      	adcs	r3, r1
 8003956:	657b      	str	r3, [r7, #84]	; 0x54
 8003958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	461a      	mov	r2, r3
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	1891      	adds	r1, r2, r2
 8003964:	61b9      	str	r1, [r7, #24]
 8003966:	415b      	adcs	r3, r3
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800396e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003972:	f7fc ff9b 	bl	80008ac <__aeabi_uldivmod>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4b6c      	ldr	r3, [pc, #432]	; (8003b2c <UART_SetConfig+0x38c>)
 800397c:	fba3 1302 	umull	r1, r3, r3, r2
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	2164      	movs	r1, #100	; 0x64
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	3332      	adds	r3, #50	; 0x32
 800398e:	4a67      	ldr	r2, [pc, #412]	; (8003b2c <UART_SetConfig+0x38c>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	f003 0207 	and.w	r2, r3, #7
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4432      	add	r2, r6
 80039a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039a2:	e0b9      	b.n	8003b18 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039a6:	461c      	mov	r4, r3
 80039a8:	f04f 0500 	mov.w	r5, #0
 80039ac:	4622      	mov	r2, r4
 80039ae:	462b      	mov	r3, r5
 80039b0:	1891      	adds	r1, r2, r2
 80039b2:	6139      	str	r1, [r7, #16]
 80039b4:	415b      	adcs	r3, r3
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039bc:	1912      	adds	r2, r2, r4
 80039be:	eb45 0303 	adc.w	r3, r5, r3
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f04f 0100 	mov.w	r1, #0
 80039ca:	00d9      	lsls	r1, r3, #3
 80039cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039d0:	00d0      	lsls	r0, r2, #3
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	eb12 0804 	adds.w	r8, r2, r4
 80039da:	eb43 0905 	adc.w	r9, r3, r5
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	008b      	lsls	r3, r1, #2
 80039f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039f6:	0082      	lsls	r2, r0, #2
 80039f8:	4640      	mov	r0, r8
 80039fa:	4649      	mov	r1, r9
 80039fc:	f7fc ff56 	bl	80008ac <__aeabi_uldivmod>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4b49      	ldr	r3, [pc, #292]	; (8003b2c <UART_SetConfig+0x38c>)
 8003a06:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	011e      	lsls	r6, r3, #4
 8003a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a10:	4618      	mov	r0, r3
 8003a12:	f04f 0100 	mov.w	r1, #0
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	1894      	adds	r4, r2, r2
 8003a1c:	60bc      	str	r4, [r7, #8]
 8003a1e:	415b      	adcs	r3, r3
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a26:	1812      	adds	r2, r2, r0
 8003a28:	eb41 0303 	adc.w	r3, r1, r3
 8003a2c:	f04f 0400 	mov.w	r4, #0
 8003a30:	f04f 0500 	mov.w	r5, #0
 8003a34:	00dd      	lsls	r5, r3, #3
 8003a36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a3a:	00d4      	lsls	r4, r2, #3
 8003a3c:	4622      	mov	r2, r4
 8003a3e:	462b      	mov	r3, r5
 8003a40:	1814      	adds	r4, r2, r0
 8003a42:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a44:	414b      	adcs	r3, r1
 8003a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	008b      	lsls	r3, r1, #2
 8003a5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a60:	0082      	lsls	r2, r0, #2
 8003a62:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a66:	f7fc ff21 	bl	80008ac <__aeabi_uldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <UART_SetConfig+0x38c>)
 8003a70:	fba3 1302 	umull	r1, r3, r3, r2
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	2164      	movs	r1, #100	; 0x64
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	3332      	adds	r3, #50	; 0x32
 8003a82:	4a2a      	ldr	r2, [pc, #168]	; (8003b2c <UART_SetConfig+0x38c>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a8e:	441e      	add	r6, r3
 8003a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a92:	4618      	mov	r0, r3
 8003a94:	f04f 0100 	mov.w	r1, #0
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	1894      	adds	r4, r2, r2
 8003a9e:	603c      	str	r4, [r7, #0]
 8003aa0:	415b      	adcs	r3, r3
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aa8:	1812      	adds	r2, r2, r0
 8003aaa:	eb41 0303 	adc.w	r3, r1, r3
 8003aae:	f04f 0400 	mov.w	r4, #0
 8003ab2:	f04f 0500 	mov.w	r5, #0
 8003ab6:	00dd      	lsls	r5, r3, #3
 8003ab8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003abc:	00d4      	lsls	r4, r2, #3
 8003abe:	4622      	mov	r2, r4
 8003ac0:	462b      	mov	r3, r5
 8003ac2:	eb12 0a00 	adds.w	sl, r2, r0
 8003ac6:	eb43 0b01 	adc.w	fp, r3, r1
 8003aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	008b      	lsls	r3, r1, #2
 8003ade:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ae2:	0082      	lsls	r2, r0, #2
 8003ae4:	4650      	mov	r0, sl
 8003ae6:	4659      	mov	r1, fp
 8003ae8:	f7fc fee0 	bl	80008ac <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <UART_SetConfig+0x38c>)
 8003af2:	fba3 1302 	umull	r1, r3, r3, r2
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	2164      	movs	r1, #100	; 0x64
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	3332      	adds	r3, #50	; 0x32
 8003b04:	4a09      	ldr	r2, [pc, #36]	; (8003b2c <UART_SetConfig+0x38c>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	f003 020f 	and.w	r2, r3, #15
 8003b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4432      	add	r2, r6
 8003b16:	609a      	str	r2, [r3, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	377c      	adds	r7, #124	; 0x7c
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b22:	bf00      	nop
 8003b24:	40011000 	.word	0x40011000
 8003b28:	40011400 	.word	0x40011400
 8003b2c:	51eb851f 	.word	0x51eb851f

08003b30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003b34:	4904      	ldr	r1, [pc, #16]	; (8003b48 <MX_FATFS_Init+0x18>)
 8003b36:	4805      	ldr	r0, [pc, #20]	; (8003b4c <MX_FATFS_Init+0x1c>)
 8003b38:	f003 f9ce 	bl	8006ed8 <FATFS_LinkDriver>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <MX_FATFS_Init+0x20>)
 8003b42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	2000246c 	.word	0x2000246c
 8003b4c:	20000010 	.word	0x20000010
 8003b50:	20002470 	.word	0x20002470

08003b54 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003b58:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	SD_disk_initialize (pdrv);
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fd f9cb 	bl	8000f0c <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8003b76:	bf00      	nop
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	SD_disk_status (pdrv);
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd faa3 	bl	80010d8 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8003b92:	bf00      	nop
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	4603      	mov	r3, r0
 8003baa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	SD_disk_read (pdrv, buff,sector,count);
 8003bac:	7bf8      	ldrb	r0, [r7, #15]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	f7fd faa6 	bl	8001104 <SD_disk_read>
  /* USER CODE END READ */
}
 8003bb8:	bf00      	nop
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	4603      	mov	r3, r0
 8003bd0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	SD_disk_write (pdrv,buff,sector,count);
 8003bd2:	7bf8      	ldrb	r0, [r7, #15]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	f7fd fafd 	bl	80011d8 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8003bde:	bf00      	nop
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	603a      	str	r2, [r7, #0]
 8003bf2:	71fb      	strb	r3, [r7, #7]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	SD_disk_ioctl (pdrv,cmd, buff);
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	79b9      	ldrb	r1, [r7, #6]
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd fb6e 	bl	80012e0 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8003c04:	bf00      	nop
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <disk_status+0x30>)
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	79fa      	ldrb	r2, [r7, #7]
 8003c28:	4905      	ldr	r1, [pc, #20]	; (8003c40 <disk_status+0x30>)
 8003c2a:	440a      	add	r2, r1
 8003c2c:	7a12      	ldrb	r2, [r2, #8]
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4798      	blx	r3
 8003c32:	4603      	mov	r3, r0
 8003c34:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	200002d4 	.word	0x200002d4

08003c44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	4a0d      	ldr	r2, [pc, #52]	; (8003c8c <disk_initialize+0x48>)
 8003c56:	5cd3      	ldrb	r3, [r2, r3]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d111      	bne.n	8003c80 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <disk_initialize+0x48>)
 8003c60:	2101      	movs	r1, #1
 8003c62:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <disk_initialize+0x48>)
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	79fa      	ldrb	r2, [r7, #7]
 8003c72:	4906      	ldr	r1, [pc, #24]	; (8003c8c <disk_initialize+0x48>)
 8003c74:	440a      	add	r2, r1
 8003c76:	7a12      	ldrb	r2, [r2, #8]
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4798      	blx	r3
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200002d4 	.word	0x200002d4

08003c90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <disk_read+0x3c>)
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	689c      	ldr	r4, [r3, #8]
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <disk_read+0x3c>)
 8003cb0:	4413      	add	r3, r2
 8003cb2:	7a18      	ldrb	r0, [r3, #8]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	47a0      	blx	r4
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	75fb      	strb	r3, [r7, #23]
  return res;
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd90      	pop	{r4, r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200002d4 	.word	0x200002d4

08003cd0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <disk_write+0x3c>)
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	68dc      	ldr	r4, [r3, #12]
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	4a07      	ldr	r2, [pc, #28]	; (8003d0c <disk_write+0x3c>)
 8003cf0:	4413      	add	r3, r2
 8003cf2:	7a18      	ldrb	r0, [r3, #8]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	47a0      	blx	r4
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	75fb      	strb	r3, [r7, #23]
  return res;
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd90      	pop	{r4, r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200002d4 	.word	0x200002d4

08003d10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	603a      	str	r2, [r7, #0]
 8003d1a:	71fb      	strb	r3, [r7, #7]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <disk_ioctl+0x38>)
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	79fa      	ldrb	r2, [r7, #7]
 8003d2e:	4906      	ldr	r1, [pc, #24]	; (8003d48 <disk_ioctl+0x38>)
 8003d30:	440a      	add	r2, r1
 8003d32:	7a10      	ldrb	r0, [r2, #8]
 8003d34:	79b9      	ldrb	r1, [r7, #6]
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	4798      	blx	r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  return res;
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	200002d4 	.word	0x200002d4

08003d4c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3301      	adds	r3, #1
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003d5c:	89fb      	ldrh	r3, [r7, #14]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	b21a      	sxth	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	b21b      	sxth	r3, r3
 8003d6c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003d6e:	89fb      	ldrh	r3, [r7, #14]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3303      	adds	r3, #3
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	3202      	adds	r2, #2
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	3201      	adds	r2, #1
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	7812      	ldrb	r2, [r2, #0]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
	return rv;
 8003db4:	68fb      	ldr	r3, [r7, #12]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	887a      	ldrh	r2, [r7, #2]
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	887b      	ldrh	r3, [r7, #2]
 8003ddc:	0a1b      	lsrs	r3, r3, #8
 8003dde:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	0a1b      	lsrs	r3, r3, #8
 8003e36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00d      	beq.n	8003e86 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	1c53      	adds	r3, r2, #1
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	1c59      	adds	r1, r3, #1
 8003e74:	6179      	str	r1, [r7, #20]
 8003e76:	7812      	ldrb	r2, [r2, #0]
 8003e78:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f1      	bne.n	8003e6a <mem_cpy+0x1a>
	}
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003e92:	b480      	push	{r7}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	617a      	str	r2, [r7, #20]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	607b      	str	r3, [r7, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f3      	bne.n	8003ea2 <mem_set+0x10>
}
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	61fa      	str	r2, [r7, #28]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	61ba      	str	r2, [r7, #24]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	1acb      	subs	r3, r1, r3
 8003ef4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <mem_cmp+0x40>
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0eb      	beq.n	8003ee0 <mem_cmp+0x18>

	return r;
 8003f08:	697b      	ldr	r3, [r7, #20]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3724      	adds	r7, #36	; 0x24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003f20:	e002      	b.n	8003f28 <chk_chr+0x12>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3301      	adds	r3, #1
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <chk_chr+0x26>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d1f2      	bne.n	8003f22 <chk_chr+0xc>
	return *str;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003f56:	2300      	movs	r3, #0
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e029      	b.n	8003fb4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003f60:	4a27      	ldr	r2, [pc, #156]	; (8004000 <chk_lock+0xb4>)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	4413      	add	r3, r2
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d01d      	beq.n	8003faa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003f6e:	4a24      	ldr	r2, [pc, #144]	; (8004000 <chk_lock+0xb4>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	4413      	add	r3, r2
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d116      	bne.n	8003fae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003f80:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <chk_lock+0xb4>)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	4413      	add	r3, r2
 8003f88:	3304      	adds	r3, #4
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d10c      	bne.n	8003fae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003f94:	4a1a      	ldr	r2, [pc, #104]	; (8004000 <chk_lock+0xb4>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d102      	bne.n	8003fae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003fa8:	e007      	b.n	8003fba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d9d2      	bls.n	8003f60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d109      	bne.n	8003fd4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <chk_lock+0x80>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d101      	bne.n	8003fd0 <chk_lock+0x84>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e010      	b.n	8003ff2 <chk_lock+0xa6>
 8003fd0:	2312      	movs	r3, #18
 8003fd2:	e00e      	b.n	8003ff2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d108      	bne.n	8003fec <chk_lock+0xa0>
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <chk_lock+0xb4>)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	4413      	add	r3, r2
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fea:	d101      	bne.n	8003ff0 <chk_lock+0xa4>
 8003fec:	2310      	movs	r3, #16
 8003fee:	e000      	b.n	8003ff2 <chk_lock+0xa6>
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	200000b4 	.word	0x200000b4

08004004 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	e002      	b.n	8004016 <enq_lock+0x12>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3301      	adds	r3, #1
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d806      	bhi.n	800402a <enq_lock+0x26>
 800401c:	4a09      	ldr	r2, [pc, #36]	; (8004044 <enq_lock+0x40>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	4413      	add	r3, r2
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f2      	bne.n	8004010 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b02      	cmp	r3, #2
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	200000b4 	.word	0x200000b4

08004048 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e01f      	b.n	8004098 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004058:	4a41      	ldr	r2, [pc, #260]	; (8004160 <inc_lock+0x118>)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	4413      	add	r3, r2
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d113      	bne.n	8004092 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800406a:	4a3d      	ldr	r2, [pc, #244]	; (8004160 <inc_lock+0x118>)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	4413      	add	r3, r2
 8004072:	3304      	adds	r3, #4
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800407a:	429a      	cmp	r2, r3
 800407c:	d109      	bne.n	8004092 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800407e:	4a38      	ldr	r2, [pc, #224]	; (8004160 <inc_lock+0x118>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	4413      	add	r3, r2
 8004086:	3308      	adds	r3, #8
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800408e:	429a      	cmp	r2, r3
 8004090:	d006      	beq.n	80040a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3301      	adds	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d9dc      	bls.n	8004058 <inc_lock+0x10>
 800409e:	e000      	b.n	80040a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80040a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d132      	bne.n	800410e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e002      	b.n	80040b4 <inc_lock+0x6c>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3301      	adds	r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d806      	bhi.n	80040c8 <inc_lock+0x80>
 80040ba:	4a29      	ldr	r2, [pc, #164]	; (8004160 <inc_lock+0x118>)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	4413      	add	r3, r2
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f2      	bne.n	80040ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d101      	bne.n	80040d2 <inc_lock+0x8a>
 80040ce:	2300      	movs	r3, #0
 80040d0:	e040      	b.n	8004154 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4922      	ldr	r1, [pc, #136]	; (8004160 <inc_lock+0x118>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	440b      	add	r3, r1
 80040de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	491e      	ldr	r1, [pc, #120]	; (8004160 <inc_lock+0x118>)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	440b      	add	r3, r1
 80040ec:	3304      	adds	r3, #4
 80040ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	491a      	ldr	r1, [pc, #104]	; (8004160 <inc_lock+0x118>)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	440b      	add	r3, r1
 80040fc:	3308      	adds	r3, #8
 80040fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004100:	4a17      	ldr	r2, [pc, #92]	; (8004160 <inc_lock+0x118>)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	4413      	add	r3, r2
 8004108:	330c      	adds	r3, #12
 800410a:	2200      	movs	r2, #0
 800410c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d009      	beq.n	8004128 <inc_lock+0xe0>
 8004114:	4a12      	ldr	r2, [pc, #72]	; (8004160 <inc_lock+0x118>)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	4413      	add	r3, r2
 800411c:	330c      	adds	r3, #12
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <inc_lock+0xe0>
 8004124:	2300      	movs	r3, #0
 8004126:	e015      	b.n	8004154 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d108      	bne.n	8004140 <inc_lock+0xf8>
 800412e:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <inc_lock+0x118>)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	4413      	add	r3, r2
 8004136:	330c      	adds	r3, #12
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	e001      	b.n	8004144 <inc_lock+0xfc>
 8004140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004144:	4906      	ldr	r1, [pc, #24]	; (8004160 <inc_lock+0x118>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	440b      	add	r3, r1
 800414c:	330c      	adds	r3, #12
 800414e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3301      	adds	r3, #1
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	200000b4 	.word	0x200000b4

08004164 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3b01      	subs	r3, #1
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d825      	bhi.n	80041c4 <dec_lock+0x60>
		n = Files[i].ctr;
 8004178:	4a17      	ldr	r2, [pc, #92]	; (80041d8 <dec_lock+0x74>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	4413      	add	r3, r2
 8004180:	330c      	adds	r3, #12
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004186:	89fb      	ldrh	r3, [r7, #14]
 8004188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800418c:	d101      	bne.n	8004192 <dec_lock+0x2e>
 800418e:	2300      	movs	r3, #0
 8004190:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004192:	89fb      	ldrh	r3, [r7, #14]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <dec_lock+0x3a>
 8004198:	89fb      	ldrh	r3, [r7, #14]
 800419a:	3b01      	subs	r3, #1
 800419c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800419e:	4a0e      	ldr	r2, [pc, #56]	; (80041d8 <dec_lock+0x74>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	4413      	add	r3, r2
 80041a6:	330c      	adds	r3, #12
 80041a8:	89fa      	ldrh	r2, [r7, #14]
 80041aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80041ac:	89fb      	ldrh	r3, [r7, #14]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d105      	bne.n	80041be <dec_lock+0x5a>
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <dec_lock+0x74>)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	4413      	add	r3, r2
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	737b      	strb	r3, [r7, #13]
 80041c2:	e001      	b.n	80041c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80041c4:	2302      	movs	r3, #2
 80041c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80041c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	200000b4 	.word	0x200000b4

080041dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e010      	b.n	800420c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80041ea:	4a0d      	ldr	r2, [pc, #52]	; (8004220 <clear_lock+0x44>)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	4413      	add	r3, r2
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d105      	bne.n	8004206 <clear_lock+0x2a>
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <clear_lock+0x44>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	4413      	add	r3, r2
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3301      	adds	r3, #1
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d9eb      	bls.n	80041ea <clear_lock+0xe>
	}
}
 8004212:	bf00      	nop
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	200000b4 	.word	0x200000b4

08004224 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	78db      	ldrb	r3, [r3, #3]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d034      	beq.n	80042a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	7858      	ldrb	r0, [r3, #1]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004248:	2301      	movs	r3, #1
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	f7ff fd40 	bl	8003cd0 <disk_write>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	e022      	b.n	80042a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	1ad2      	subs	r2, r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	429a      	cmp	r2, r3
 8004270:	d217      	bcs.n	80042a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	789b      	ldrb	r3, [r3, #2]
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	e010      	b.n	800429c <sync_window+0x78>
					wsect += fs->fsize;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4413      	add	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	7858      	ldrb	r0, [r3, #1]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800428e:	2301      	movs	r3, #1
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	f7ff fd1d 	bl	8003cd0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	3b01      	subs	r3, #1
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d8eb      	bhi.n	800427a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d01b      	beq.n	80042fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff ffad 	bl	8004224 <sync_window>
 80042ca:	4603      	mov	r3, r0
 80042cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d113      	bne.n	80042fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	7858      	ldrb	r0, [r3, #1]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80042de:	2301      	movs	r3, #1
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	f7ff fcd5 	bl	8003c90 <disk_read>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d004      	beq.n	80042f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80042ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff87 	bl	8004224 <sync_window>
 8004316:	4603      	mov	r3, r0
 8004318:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d159      	bne.n	80043d4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d149      	bne.n	80043bc <sync_fs+0xb4>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	791b      	ldrb	r3, [r3, #4]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d145      	bne.n	80043bc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	899b      	ldrh	r3, [r3, #12]
 800433a:	461a      	mov	r2, r3
 800433c:	2100      	movs	r1, #0
 800433e:	f7ff fda8 	bl	8003e92 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3338      	adds	r3, #56	; 0x38
 8004346:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800434a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fd37 	bl	8003dc2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3338      	adds	r3, #56	; 0x38
 8004358:	4921      	ldr	r1, [pc, #132]	; (80043e0 <sync_fs+0xd8>)
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fd4c 	bl	8003df8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3338      	adds	r3, #56	; 0x38
 8004364:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004368:	491e      	ldr	r1, [pc, #120]	; (80043e4 <sync_fs+0xdc>)
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fd44 	bl	8003df8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3338      	adds	r3, #56	; 0x38
 8004374:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f7ff fd3a 	bl	8003df8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3338      	adds	r3, #56	; 0x38
 8004388:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f7ff fd30 	bl	8003df8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	7858      	ldrb	r0, [r3, #1]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b0:	2301      	movs	r3, #1
 80043b2:	f7ff fc8d 	bl	8003cd0 <disk_write>
			fs->fsi_flag = 0;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	785b      	ldrb	r3, [r3, #1]
 80043c0:	2200      	movs	r2, #0
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fca3 	bl	8003d10 <disk_ioctl>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <sync_fs+0xcc>
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	41615252 	.word	0x41615252
 80043e4:	61417272 	.word	0x61417272

080043e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	3b02      	subs	r3, #2
 80043f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	3b02      	subs	r3, #2
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d301      	bcc.n	8004408 <clust2sect+0x20>
 8004404:	2300      	movs	r3, #0
 8004406:	e008      	b.n	800441a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	895b      	ldrh	r3, [r3, #10]
 800440c:	461a      	mov	r2, r3
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	fb03 f202 	mul.w	r2, r3, r2
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	4413      	add	r3, r2
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d904      	bls.n	8004446 <get_fat+0x20>
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004446:	2301      	movs	r3, #1
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	e0bb      	b.n	80045c4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800444c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004450:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b03      	cmp	r3, #3
 8004458:	f000 8083 	beq.w	8004562 <get_fat+0x13c>
 800445c:	2b03      	cmp	r3, #3
 800445e:	f300 80a7 	bgt.w	80045b0 <get_fat+0x18a>
 8004462:	2b01      	cmp	r3, #1
 8004464:	d002      	beq.n	800446c <get_fat+0x46>
 8004466:	2b02      	cmp	r3, #2
 8004468:	d056      	beq.n	8004518 <get_fat+0xf2>
 800446a:	e0a1      	b.n	80045b0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	899b      	ldrh	r3, [r3, #12]
 8004482:	4619      	mov	r1, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	fbb3 f3f1 	udiv	r3, r3, r1
 800448a:	4413      	add	r3, r2
 800448c:	4619      	mov	r1, r3
 800448e:	6938      	ldr	r0, [r7, #16]
 8004490:	f7ff ff0c 	bl	80042ac <move_window>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	f040 808d 	bne.w	80045b6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	60fa      	str	r2, [r7, #12]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	8992      	ldrh	r2, [r2, #12]
 80044a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80044aa:	fb02 f201 	mul.w	r2, r2, r1
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4413      	add	r3, r2
 80044b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	899b      	ldrh	r3, [r3, #12]
 80044c2:	4619      	mov	r1, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80044ca:	4413      	add	r3, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	6938      	ldr	r0, [r7, #16]
 80044d0:	f7ff feec 	bl	80042ac <move_window>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d16f      	bne.n	80045ba <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	899b      	ldrh	r3, [r3, #12]
 80044de:	461a      	mov	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80044e6:	fb02 f201 	mul.w	r2, r2, r1
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	461a      	mov	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <get_fat+0xe8>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	e002      	b.n	8004514 <get_fat+0xee>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004514:	617b      	str	r3, [r7, #20]
			break;
 8004516:	e055      	b.n	80045c4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	899b      	ldrh	r3, [r3, #12]
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	b29b      	uxth	r3, r3
 8004524:	4619      	mov	r1, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	fbb3 f3f1 	udiv	r3, r3, r1
 800452c:	4413      	add	r3, r2
 800452e:	4619      	mov	r1, r3
 8004530:	6938      	ldr	r0, [r7, #16]
 8004532:	f7ff febb 	bl	80042ac <move_window>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d140      	bne.n	80045be <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	8992      	ldrh	r2, [r2, #12]
 800454a:	fbb3 f0f2 	udiv	r0, r3, r2
 800454e:	fb02 f200 	mul.w	r2, r2, r0
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	440b      	add	r3, r1
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fbf8 	bl	8003d4c <ld_word>
 800455c:	4603      	mov	r3, r0
 800455e:	617b      	str	r3, [r7, #20]
			break;
 8004560:	e030      	b.n	80045c4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	899b      	ldrh	r3, [r3, #12]
 800456a:	089b      	lsrs	r3, r3, #2
 800456c:	b29b      	uxth	r3, r3
 800456e:	4619      	mov	r1, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	fbb3 f3f1 	udiv	r3, r3, r1
 8004576:	4413      	add	r3, r2
 8004578:	4619      	mov	r1, r3
 800457a:	6938      	ldr	r0, [r7, #16]
 800457c:	f7ff fe96 	bl	80042ac <move_window>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d11d      	bne.n	80045c2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	8992      	ldrh	r2, [r2, #12]
 8004594:	fbb3 f0f2 	udiv	r0, r3, r2
 8004598:	fb02 f200 	mul.w	r2, r2, r0
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	440b      	add	r3, r1
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fbeb 	bl	8003d7c <ld_dword>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045ac:	617b      	str	r3, [r7, #20]
			break;
 80045ae:	e009      	b.n	80045c4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80045b0:	2301      	movs	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e006      	b.n	80045c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045b6:	bf00      	nop
 80045b8:	e004      	b.n	80045c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045ba:	bf00      	nop
 80045bc:	e002      	b.n	80045c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80045be:	bf00      	nop
 80045c0:	e000      	b.n	80045c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80045c2:	bf00      	nop
		}
	}

	return val;
 80045c4:	697b      	ldr	r3, [r7, #20]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80045ce:	b590      	push	{r4, r7, lr}
 80045d0:	b089      	sub	sp, #36	; 0x24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80045da:	2302      	movs	r3, #2
 80045dc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	f240 8102 	bls.w	80047ea <put_fat+0x21c>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	f080 80fc 	bcs.w	80047ea <put_fat+0x21c>
		switch (fs->fs_type) {
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	f000 80b6 	beq.w	8004768 <put_fat+0x19a>
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	f300 80fd 	bgt.w	80047fc <put_fat+0x22e>
 8004602:	2b01      	cmp	r3, #1
 8004604:	d003      	beq.n	800460e <put_fat+0x40>
 8004606:	2b02      	cmp	r3, #2
 8004608:	f000 8083 	beq.w	8004712 <put_fat+0x144>
 800460c:	e0f6      	b.n	80047fc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4413      	add	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	899b      	ldrh	r3, [r3, #12]
 8004624:	4619      	mov	r1, r3
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	fbb3 f3f1 	udiv	r3, r3, r1
 800462c:	4413      	add	r3, r2
 800462e:	4619      	mov	r1, r3
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7ff fe3b 	bl	80042ac <move_window>
 8004636:	4603      	mov	r3, r0
 8004638:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800463a:	7ffb      	ldrb	r3, [r7, #31]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f040 80d6 	bne.w	80047ee <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	61ba      	str	r2, [r7, #24]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	8992      	ldrh	r2, [r2, #12]
 8004652:	fbb3 f0f2 	udiv	r0, r3, r2
 8004656:	fb02 f200 	mul.w	r2, r2, r0
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	440b      	add	r3, r1
 800465e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <put_fat+0xb8>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b25b      	sxtb	r3, r3
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	b25a      	sxtb	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	b25b      	sxtb	r3, r3
 800467e:	4313      	orrs	r3, r2
 8004680:	b25b      	sxtb	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	e001      	b.n	800468a <put_fat+0xbc>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	899b      	ldrh	r3, [r3, #12]
 800469c:	4619      	mov	r1, r3
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80046a4:	4413      	add	r3, r2
 80046a6:	4619      	mov	r1, r3
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f7ff fdff 	bl	80042ac <move_window>
 80046ae:	4603      	mov	r3, r0
 80046b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80046b2:	7ffb      	ldrb	r3, [r7, #31]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f040 809c 	bne.w	80047f2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	899b      	ldrh	r3, [r3, #12]
 80046c4:	461a      	mov	r2, r3
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80046cc:	fb02 f200 	mul.w	r2, r2, r0
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	440b      	add	r3, r1
 80046d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <put_fat+0x11a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e00e      	b.n	8004706 <put_fat+0x138>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b25b      	sxtb	r3, r3
 80046ee:	f023 030f 	bic.w	r3, r3, #15
 80046f2:	b25a      	sxtb	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	b25b      	sxtb	r3, r3
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	b25b      	sxtb	r3, r3
 8004700:	4313      	orrs	r3, r2
 8004702:	b25b      	sxtb	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	70da      	strb	r2, [r3, #3]
			break;
 8004710:	e074      	b.n	80047fc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	899b      	ldrh	r3, [r3, #12]
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	b29b      	uxth	r3, r3
 800471e:	4619      	mov	r1, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	fbb3 f3f1 	udiv	r3, r3, r1
 8004726:	4413      	add	r3, r2
 8004728:	4619      	mov	r1, r3
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f7ff fdbe 	bl	80042ac <move_window>
 8004730:	4603      	mov	r3, r0
 8004732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004734:	7ffb      	ldrb	r3, [r7, #31]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d15d      	bne.n	80047f6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	8992      	ldrh	r2, [r2, #12]
 8004748:	fbb3 f0f2 	udiv	r0, r3, r2
 800474c:	fb02 f200 	mul.w	r2, r2, r0
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	440b      	add	r3, r1
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	b292      	uxth	r2, r2
 8004758:	4611      	mov	r1, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fb31 	bl	8003dc2 <st_word>
			fs->wflag = 1;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	70da      	strb	r2, [r3, #3]
			break;
 8004766:	e049      	b.n	80047fc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	899b      	ldrh	r3, [r3, #12]
 8004770:	089b      	lsrs	r3, r3, #2
 8004772:	b29b      	uxth	r3, r3
 8004774:	4619      	mov	r1, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	fbb3 f3f1 	udiv	r3, r3, r1
 800477c:	4413      	add	r3, r2
 800477e:	4619      	mov	r1, r3
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff fd93 	bl	80042ac <move_window>
 8004786:	4603      	mov	r3, r0
 8004788:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800478a:	7ffb      	ldrb	r3, [r7, #31]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d134      	bne.n	80047fa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	8992      	ldrh	r2, [r2, #12]
 80047a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80047a8:	fb02 f200 	mul.w	r2, r2, r0
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	440b      	add	r3, r1
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fae3 	bl	8003d7c <ld_dword>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80047bc:	4323      	orrs	r3, r4
 80047be:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	8992      	ldrh	r2, [r2, #12]
 80047ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80047d2:	fb02 f200 	mul.w	r2, r2, r0
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	440b      	add	r3, r1
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fb0b 	bl	8003df8 <st_dword>
			fs->wflag = 1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	70da      	strb	r2, [r3, #3]
			break;
 80047e8:	e008      	b.n	80047fc <put_fat+0x22e>
		}
	}
 80047ea:	bf00      	nop
 80047ec:	e006      	b.n	80047fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80047ee:	bf00      	nop
 80047f0:	e004      	b.n	80047fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80047fa:	bf00      	nop
	return res;
 80047fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3724      	adds	r7, #36	; 0x24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd90      	pop	{r4, r7, pc}

08004806 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b088      	sub	sp, #32
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d904      	bls.n	800482c <remove_chain+0x26>
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	429a      	cmp	r2, r3
 800482a:	d301      	bcc.n	8004830 <remove_chain+0x2a>
 800482c:	2302      	movs	r3, #2
 800482e:	e04b      	b.n	80048c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00c      	beq.n	8004850 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	69b8      	ldr	r0, [r7, #24]
 800483e:	f7ff fec6 	bl	80045ce <put_fat>
 8004842:	4603      	mov	r3, r0
 8004844:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004846:	7ffb      	ldrb	r3, [r7, #31]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <remove_chain+0x4a>
 800484c:	7ffb      	ldrb	r3, [r7, #31]
 800484e:	e03b      	b.n	80048c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff fde7 	bl	8004426 <get_fat>
 8004858:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d031      	beq.n	80048c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <remove_chain+0x64>
 8004866:	2302      	movs	r3, #2
 8004868:	e02e      	b.n	80048c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004870:	d101      	bne.n	8004876 <remove_chain+0x70>
 8004872:	2301      	movs	r3, #1
 8004874:	e028      	b.n	80048c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004876:	2200      	movs	r2, #0
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	69b8      	ldr	r0, [r7, #24]
 800487c:	f7ff fea7 	bl	80045ce <put_fat>
 8004880:	4603      	mov	r3, r0
 8004882:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004884:	7ffb      	ldrb	r3, [r7, #31]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <remove_chain+0x88>
 800488a:	7ffb      	ldrb	r3, [r7, #31]
 800488c:	e01c      	b.n	80048c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	3b02      	subs	r3, #2
 8004898:	429a      	cmp	r2, r3
 800489a:	d20b      	bcs.n	80048b4 <remove_chain+0xae>
			fs->free_clst++;
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	791b      	ldrb	r3, [r3, #4]
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d3c6      	bcc.n	8004850 <remove_chain+0x4a>
 80048c2:	e000      	b.n	80048c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80048c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10d      	bne.n	8004902 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d004      	beq.n	80048fc <create_chain+0x2c>
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d31b      	bcc.n	8004934 <create_chain+0x64>
 80048fc:	2301      	movs	r3, #1
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	e018      	b.n	8004934 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004902:	6839      	ldr	r1, [r7, #0]
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff fd8e 	bl	8004426 <get_fat>
 800490a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d801      	bhi.n	8004916 <create_chain+0x46>
 8004912:	2301      	movs	r3, #1
 8004914:	e070      	b.n	80049f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800491c:	d101      	bne.n	8004922 <create_chain+0x52>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	e06a      	b.n	80049f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	429a      	cmp	r2, r3
 800492a:	d201      	bcs.n	8004930 <create_chain+0x60>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	e063      	b.n	80049f8 <create_chain+0x128>
		scl = clst;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	3301      	adds	r3, #1
 800493c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	429a      	cmp	r2, r3
 8004946:	d307      	bcc.n	8004958 <create_chain+0x88>
				ncl = 2;
 8004948:	2302      	movs	r3, #2
 800494a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	429a      	cmp	r2, r3
 8004952:	d901      	bls.n	8004958 <create_chain+0x88>
 8004954:	2300      	movs	r3, #0
 8004956:	e04f      	b.n	80049f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004958:	69f9      	ldr	r1, [r7, #28]
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fd63 	bl	8004426 <get_fat>
 8004960:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00e      	beq.n	8004986 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d003      	beq.n	8004976 <create_chain+0xa6>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004974:	d101      	bne.n	800497a <create_chain+0xaa>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	e03e      	b.n	80049f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	429a      	cmp	r2, r3
 8004980:	d1da      	bne.n	8004938 <create_chain+0x68>
 8004982:	2300      	movs	r3, #0
 8004984:	e038      	b.n	80049f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004986:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800498c:	69f9      	ldr	r1, [r7, #28]
 800498e:	6938      	ldr	r0, [r7, #16]
 8004990:	f7ff fe1d 	bl	80045ce <put_fat>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <create_chain+0xe2>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	6839      	ldr	r1, [r7, #0]
 80049a8:	6938      	ldr	r0, [r7, #16]
 80049aa:	f7ff fe10 	bl	80045ce <put_fat>
 80049ae:	4603      	mov	r3, r0
 80049b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d116      	bne.n	80049e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	3b02      	subs	r3, #2
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d804      	bhi.n	80049d6 <create_chain+0x106>
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	791b      	ldrb	r3, [r3, #4]
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	711a      	strb	r2, [r3, #4]
 80049e4:	e007      	b.n	80049f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d102      	bne.n	80049f2 <create_chain+0x122>
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049f0:	e000      	b.n	80049f4 <create_chain+0x124>
 80049f2:	2301      	movs	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80049f6:	69fb      	ldr	r3, [r7, #28]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	3304      	adds	r3, #4
 8004a16:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	899b      	ldrh	r3, [r3, #12]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	8952      	ldrh	r2, [r2, #10]
 8004a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1d1a      	adds	r2, r3, #4
 8004a32:	613a      	str	r2, [r7, #16]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <clmt_clust+0x42>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e010      	b.n	8004a64 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d307      	bcc.n	8004a5a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3304      	adds	r3, #4
 8004a56:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004a58:	e7e9      	b.n	8004a2e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004a5a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4413      	add	r3, r2
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a86:	d204      	bcs.n	8004a92 <dir_sdi+0x22>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004a92:	2302      	movs	r3, #2
 8004a94:	e071      	b.n	8004b7a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <dir_sdi+0x46>
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d902      	bls.n	8004ab6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10c      	bne.n	8004ad6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	8912      	ldrh	r2, [r2, #8]
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d301      	bcc.n	8004acc <dir_sdi+0x5c>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e056      	b.n	8004b7a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	61da      	str	r2, [r3, #28]
 8004ad4:	e02d      	b.n	8004b32 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	895b      	ldrh	r3, [r3, #10]
 8004ada:	461a      	mov	r2, r3
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	899b      	ldrh	r3, [r3, #12]
 8004ae0:	fb03 f302 	mul.w	r3, r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ae6:	e019      	b.n	8004b1c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6979      	ldr	r1, [r7, #20]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff fc9a 	bl	8004426 <get_fat>
 8004af2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004afa:	d101      	bne.n	8004b00 <dir_sdi+0x90>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e03c      	b.n	8004b7a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d904      	bls.n	8004b10 <dir_sdi+0xa0>
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d301      	bcc.n	8004b14 <dir_sdi+0xa4>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e032      	b.n	8004b7a <dir_sdi+0x10a>
			ofs -= csz;
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d2e1      	bcs.n	8004ae8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004b24:	6979      	ldr	r1, [r7, #20]
 8004b26:	6938      	ldr	r0, [r7, #16]
 8004b28:	f7ff fc5e 	bl	80043e8 <clust2sect>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <dir_sdi+0xd4>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e01a      	b.n	8004b7a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	899b      	ldrh	r3, [r3, #12]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b54:	441a      	add	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	899b      	ldrh	r3, [r3, #12]
 8004b64:	461a      	mov	r2, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b6c:	fb02 f200 	mul.w	r2, r2, r0
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	18ca      	adds	r2, r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b086      	sub	sp, #24
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	3320      	adds	r3, #32
 8004b98:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <dir_next+0x28>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ba8:	d301      	bcc.n	8004bae <dir_next+0x2c>
 8004baa:	2304      	movs	r3, #4
 8004bac:	e0bb      	b.n	8004d26 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	899b      	ldrh	r3, [r3, #12]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bba:	fb02 f201 	mul.w	r2, r2, r1
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 809d 	bne.w	8004d00 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	8912      	ldrh	r2, [r2, #8]
 8004be0:	4293      	cmp	r3, r2
 8004be2:	f0c0 808d 	bcc.w	8004d00 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	61da      	str	r2, [r3, #28]
 8004bec:	2304      	movs	r3, #4
 8004bee:	e09a      	b.n	8004d26 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	899b      	ldrh	r3, [r3, #12]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	8952      	ldrh	r2, [r2, #10]
 8004c00:	3a01      	subs	r2, #1
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d17b      	bne.n	8004d00 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f7ff fc08 	bl	8004426 <get_fat>
 8004c16:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d801      	bhi.n	8004c22 <dir_next+0xa0>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e081      	b.n	8004d26 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c28:	d101      	bne.n	8004c2e <dir_next+0xac>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e07b      	b.n	8004d26 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d359      	bcc.n	8004cec <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d104      	bne.n	8004c48 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	61da      	str	r2, [r3, #28]
 8004c44:	2304      	movs	r3, #4
 8004c46:	e06e      	b.n	8004d26 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f7ff fe3d 	bl	80048d0 <create_chain>
 8004c56:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <dir_next+0xe0>
 8004c5e:	2307      	movs	r3, #7
 8004c60:	e061      	b.n	8004d26 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <dir_next+0xea>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e05c      	b.n	8004d26 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c72:	d101      	bne.n	8004c78 <dir_next+0xf6>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e056      	b.n	8004d26 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7ff fad3 	bl	8004224 <sync_window>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <dir_next+0x106>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e04e      	b.n	8004d26 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	899b      	ldrh	r3, [r3, #12]
 8004c92:	461a      	mov	r2, r3
 8004c94:	2100      	movs	r1, #0
 8004c96:	f7ff f8fc 	bl	8003e92 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	6979      	ldr	r1, [r7, #20]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff fba1 	bl	80043e8 <clust2sect>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	635a      	str	r2, [r3, #52]	; 0x34
 8004cac:	e012      	b.n	8004cd4 <dir_next+0x152>
						fs->wflag = 1;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7ff fab5 	bl	8004224 <sync_window>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <dir_next+0x142>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e030      	b.n	8004d26 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	635a      	str	r2, [r3, #52]	; 0x34
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	895b      	ldrh	r3, [r3, #10]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d3e6      	bcc.n	8004cae <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad2      	subs	r2, r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004cf2:	6979      	ldr	r1, [r7, #20]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff fb77 	bl	80043e8 <clust2sect>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	899b      	ldrh	r3, [r3, #12]
 8004d10:	461a      	mov	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d18:	fb02 f200 	mul.w	r2, r2, r0
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	18ca      	adds	r2, r1, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b086      	sub	sp, #24
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004d3e:	2100      	movs	r1, #0
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff fe95 	bl	8004a70 <dir_sdi>
 8004d46:	4603      	mov	r3, r0
 8004d48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d12b      	bne.n	8004da8 <dir_alloc+0x7a>
		n = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff faa6 	bl	80042ac <move_window>
 8004d60:	4603      	mov	r3, r0
 8004d62:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11d      	bne.n	8004da6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2be5      	cmp	r3, #229	; 0xe5
 8004d72:	d004      	beq.n	8004d7e <dir_alloc+0x50>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d107      	bne.n	8004d8e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3301      	adds	r3, #1
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d102      	bne.n	8004d92 <dir_alloc+0x64>
 8004d8c:	e00c      	b.n	8004da8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004d8e:	2300      	movs	r3, #0
 8004d90:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004d92:	2101      	movs	r1, #1
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff fef4 	bl	8004b82 <dir_next>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0d7      	beq.n	8004d54 <dir_alloc+0x26>
 8004da4:	e000      	b.n	8004da8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004da6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d101      	bne.n	8004db2 <dir_alloc+0x84>
 8004dae:	2307      	movs	r3, #7
 8004db0:	75fb      	strb	r3, [r7, #23]
	return res;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	331a      	adds	r3, #26
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe ffbe 	bl	8003d4c <ld_word>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d109      	bne.n	8004df0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe ffb3 	bl	8003d4c <ld_word>
 8004de6:	4603      	mov	r3, r0
 8004de8:	041b      	lsls	r3, r3, #16
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004df0:	68fb      	ldr	r3, [r7, #12]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	331a      	adds	r3, #26
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	b292      	uxth	r2, r2
 8004e0e:	4611      	mov	r1, r2
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe ffd6 	bl	8003dc2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d109      	bne.n	8004e32 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f103 0214 	add.w	r2, r3, #20
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	0c1b      	lsrs	r3, r3, #16
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f7fe ffc8 	bl	8003dc2 <st_word>
	}
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	331a      	adds	r3, #26
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe ff7e 	bl	8003d4c <ld_word>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <cmp_lfn+0x1e>
 8004e56:	2300      	movs	r3, #0
 8004e58:	e059      	b.n	8004f0e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e62:	1e5a      	subs	r2, r3, #1
 8004e64:	4613      	mov	r3, r2
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004e70:	2301      	movs	r3, #1
 8004e72:	81fb      	strh	r3, [r7, #14]
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	e033      	b.n	8004ee2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004e7a:	4a27      	ldr	r2, [pc, #156]	; (8004f18 <cmp_lfn+0xdc>)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4413      	add	r3, r2
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	4413      	add	r3, r2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe ff5f 	bl	8003d4c <ld_word>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004e92:	89fb      	ldrh	r3, [r7, #14]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01a      	beq.n	8004ece <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2bfe      	cmp	r3, #254	; 0xfe
 8004e9c:	d812      	bhi.n	8004ec4 <cmp_lfn+0x88>
 8004e9e:	89bb      	ldrh	r3, [r7, #12]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f002 f865 	bl	8006f70 <ff_wtoupper>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	461c      	mov	r4, r3
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	617a      	str	r2, [r7, #20]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f002 f859 	bl	8006f70 <ff_wtoupper>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	429c      	cmp	r4, r3
 8004ec2:	d001      	beq.n	8004ec8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e022      	b.n	8004f0e <cmp_lfn+0xd2>
			}
			wc = uc;
 8004ec8:	89bb      	ldrh	r3, [r7, #12]
 8004eca:	81fb      	strh	r3, [r7, #14]
 8004ecc:	e006      	b.n	8004edc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004ece:	89bb      	ldrh	r3, [r7, #12]
 8004ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d001      	beq.n	8004edc <cmp_lfn+0xa0>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e018      	b.n	8004f0e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d9c8      	bls.n	8004e7a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00b      	beq.n	8004f0c <cmp_lfn+0xd0>
 8004ef4:	89fb      	ldrh	r3, [r7, #14]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <cmp_lfn+0xd0>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4413      	add	r3, r2
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <cmp_lfn+0xd0>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e000      	b.n	8004f0e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004f0c:	2301      	movs	r3, #1
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd90      	pop	{r4, r7, pc}
 8004f16:	bf00      	nop
 8004f18:	08007c48 	.word	0x08007c48

08004f1c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	4611      	mov	r1, r2
 8004f28:	461a      	mov	r2, r3
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	71fb      	strb	r3, [r7, #7]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	330d      	adds	r3, #13
 8004f36:	79ba      	ldrb	r2, [r7, #6]
 8004f38:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	330b      	adds	r3, #11
 8004f3e:	220f      	movs	r2, #15
 8004f40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	330c      	adds	r3, #12
 8004f46:	2200      	movs	r2, #0
 8004f48:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	331a      	adds	r3, #26
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe ff36 	bl	8003dc2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	1e5a      	subs	r2, r3, #1
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	82fb      	strh	r3, [r7, #22]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004f6e:	8afb      	ldrh	r3, [r7, #22]
 8004f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <put_lfn+0x6c>
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	61fa      	str	r2, [r7, #28]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004f88:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <put_lfn+0xcc>)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4413      	add	r3, r2
 8004f96:	8afa      	ldrh	r2, [r7, #22]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe ff11 	bl	8003dc2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004fa0:	8afb      	ldrh	r3, [r7, #22]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <put_lfn+0x90>
 8004fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004faa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b0c      	cmp	r3, #12
 8004fb6:	d9da      	bls.n	8004f6e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004fb8:	8afb      	ldrh	r3, [r7, #22]
 8004fba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d006      	beq.n	8004fd0 <put_lfn+0xb4>
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <put_lfn+0xbc>
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	79fa      	ldrb	r2, [r7, #7]
 8004fdc:	701a      	strb	r2, [r3, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	08007c48 	.word	0x08007c48

08004fec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08c      	sub	sp, #48	; 0x30
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004ffa:	220b      	movs	r2, #11
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7fe ff26 	bl	8003e50 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b05      	cmp	r3, #5
 8005008:	d92b      	bls.n	8005062 <gen_numname+0x76>
		sr = seq;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800500e:	e022      	b.n	8005056 <gen_numname+0x6a>
			wc = *lfn++;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	1c9a      	adds	r2, r3, #2
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800501a:	2300      	movs	r3, #0
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
 800501e:	e017      	b.n	8005050 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	005a      	lsls	r2, r3, #1
 8005024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800502e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005030:	085b      	lsrs	r3, r3, #1
 8005032:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <gen_numname+0x5e>
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005044:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005048:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	3301      	adds	r3, #1
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	2b0f      	cmp	r3, #15
 8005054:	d9e4      	bls.n	8005020 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1d8      	bne.n	8005010 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005062:	2307      	movs	r3, #7
 8005064:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	b2db      	uxtb	r3, r3
 8005070:	3330      	adds	r3, #48	; 0x30
 8005072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800507a:	2b39      	cmp	r3, #57	; 0x39
 800507c:	d904      	bls.n	8005088 <gen_numname+0x9c>
 800507e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005082:	3307      	adds	r3, #7
 8005084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	1e5a      	subs	r2, r3, #1
 800508c:	62ba      	str	r2, [r7, #40]	; 0x28
 800508e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005092:	4413      	add	r3, r2
 8005094:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005098:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	091b      	lsrs	r3, r3, #4
 80050a0:	603b      	str	r3, [r7, #0]
	} while (seq);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1de      	bne.n	8005066 <gen_numname+0x7a>
	ns[i] = '~';
 80050a8:	f107 0214 	add.w	r2, r7, #20
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	4413      	add	r3, r2
 80050b0:	227e      	movs	r2, #126	; 0x7e
 80050b2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80050b4:	2300      	movs	r3, #0
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
 80050b8:	e002      	b.n	80050c0 <gen_numname+0xd4>
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	3301      	adds	r3, #1
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
 80050c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d205      	bcs.n	80050d4 <gen_numname+0xe8>
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	4413      	add	r3, r2
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d1f2      	bne.n	80050ba <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	2b07      	cmp	r3, #7
 80050d8:	d808      	bhi.n	80050ec <gen_numname+0x100>
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	62ba      	str	r2, [r7, #40]	; 0x28
 80050e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80050e4:	4413      	add	r3, r2
 80050e6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80050ea:	e000      	b.n	80050ee <gen_numname+0x102>
 80050ec:	2120      	movs	r1, #32
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	627a      	str	r2, [r7, #36]	; 0x24
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	460a      	mov	r2, r1
 80050fa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	2b07      	cmp	r3, #7
 8005100:	d9e8      	bls.n	80050d4 <gen_numname+0xe8>
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	3730      	adds	r7, #48	; 0x30
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005118:	230b      	movs	r3, #11
 800511a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	b2da      	uxtb	r2, r3
 8005120:	0852      	lsrs	r2, r2, #1
 8005122:	01db      	lsls	r3, r3, #7
 8005124:	4313      	orrs	r3, r2
 8005126:	b2da      	uxtb	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	1c59      	adds	r1, r3, #1
 800512c:	6079      	str	r1, [r7, #4]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	4413      	add	r3, r2
 8005132:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	3b01      	subs	r3, #1
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1ed      	bne.n	800511c <sum_sfn+0x10>
	return sum;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800515c:	2100      	movs	r1, #0
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff fc86 	bl	8004a70 <dir_sdi>
 8005164:	4603      	mov	r3, r0
 8005166:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <dir_find+0x24>
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	e0a9      	b.n	80052c6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005172:	23ff      	movs	r3, #255	; 0xff
 8005174:	753b      	strb	r3, [r7, #20]
 8005176:	7d3b      	ldrb	r3, [r7, #20]
 8005178:	757b      	strb	r3, [r7, #21]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	4619      	mov	r1, r3
 8005188:	6938      	ldr	r0, [r7, #16]
 800518a:	f7ff f88f 	bl	80042ac <move_window>
 800518e:	4603      	mov	r3, r0
 8005190:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f040 8090 	bne.w	80052ba <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80051a2:	7dbb      	ldrb	r3, [r7, #22]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d102      	bne.n	80051ae <dir_find+0x60>
 80051a8:	2304      	movs	r3, #4
 80051aa:	75fb      	strb	r3, [r7, #23]
 80051ac:	e08a      	b.n	80052c4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	330b      	adds	r3, #11
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ba:	73fb      	strb	r3, [r7, #15]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80051c2:	7dbb      	ldrb	r3, [r7, #22]
 80051c4:	2be5      	cmp	r3, #229	; 0xe5
 80051c6:	d007      	beq.n	80051d8 <dir_find+0x8a>
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <dir_find+0x98>
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b0f      	cmp	r3, #15
 80051d6:	d006      	beq.n	80051e6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80051d8:	23ff      	movs	r3, #255	; 0xff
 80051da:	757b      	strb	r3, [r7, #21]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
 80051e4:	e05e      	b.n	80052a4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2b0f      	cmp	r3, #15
 80051ea:	d136      	bne.n	800525a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d154      	bne.n	80052a4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80051fa:	7dbb      	ldrb	r3, [r7, #22]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	7b5b      	ldrb	r3, [r3, #13]
 800520a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800520c:	7dbb      	ldrb	r3, [r7, #22]
 800520e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005212:	75bb      	strb	r3, [r7, #22]
 8005214:	7dbb      	ldrb	r3, [r7, #22]
 8005216:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005220:	7dba      	ldrb	r2, [r7, #22]
 8005222:	7d7b      	ldrb	r3, [r7, #21]
 8005224:	429a      	cmp	r2, r3
 8005226:	d115      	bne.n	8005254 <dir_find+0x106>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	330d      	adds	r3, #13
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	7d3a      	ldrb	r2, [r7, #20]
 8005232:	429a      	cmp	r2, r3
 8005234:	d10e      	bne.n	8005254 <dir_find+0x106>
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f7ff fdfb 	bl	8004e3c <cmp_lfn>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <dir_find+0x106>
 800524c:	7d7b      	ldrb	r3, [r7, #21]
 800524e:	3b01      	subs	r3, #1
 8005250:	b2db      	uxtb	r3, r3
 8005252:	e000      	b.n	8005256 <dir_find+0x108>
 8005254:	23ff      	movs	r3, #255	; 0xff
 8005256:	757b      	strb	r3, [r7, #21]
 8005258:	e024      	b.n	80052a4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800525a:	7d7b      	ldrb	r3, [r7, #21]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <dir_find+0x126>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff ff51 	bl	800510c <sum_sfn>
 800526a:	4603      	mov	r3, r0
 800526c:	461a      	mov	r2, r3
 800526e:	7d3b      	ldrb	r3, [r7, #20]
 8005270:	4293      	cmp	r3, r2
 8005272:	d024      	beq.n	80052be <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <dir_find+0x14a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a18      	ldr	r0, [r3, #32]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3324      	adds	r3, #36	; 0x24
 800528a:	220b      	movs	r2, #11
 800528c:	4619      	mov	r1, r3
 800528e:	f7fe fe1b 	bl	8003ec8 <mem_cmp>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d014      	beq.n	80052c2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005298:	23ff      	movs	r3, #255	; 0xff
 800529a:	757b      	strb	r3, [r7, #21]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80052a4:	2100      	movs	r1, #0
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff fc6b 	bl	8004b82 <dir_next>
 80052ac:	4603      	mov	r3, r0
 80052ae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f43f af65 	beq.w	8005182 <dir_find+0x34>
 80052b8:	e004      	b.n	80052c4 <dir_find+0x176>
		if (res != FR_OK) break;
 80052ba:	bf00      	nop
 80052bc:	e002      	b.n	80052c4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80052be:	bf00      	nop
 80052c0:	e000      	b.n	80052c4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80052c2:	bf00      	nop

	return res;
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08c      	sub	sp, #48	; 0x30
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80052e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <dir_register+0x20>
 80052ec:	2306      	movs	r3, #6
 80052ee:	e0e0      	b.n	80054b2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80052f0:	2300      	movs	r3, #0
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
 80052f4:	e002      	b.n	80052fc <dir_register+0x2c>
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	3301      	adds	r3, #1
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1f4      	bne.n	80052f6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005312:	f107 030c 	add.w	r3, r7, #12
 8005316:	220c      	movs	r2, #12
 8005318:	4618      	mov	r0, r3
 800531a:	f7fe fd99 	bl	8003e50 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d032      	beq.n	800538e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2240      	movs	r2, #64	; 0x40
 800532c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005330:	2301      	movs	r3, #1
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
 8005334:	e016      	b.n	8005364 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	f107 010c 	add.w	r1, r7, #12
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	f7ff fe51 	bl	8004fec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff feff 	bl	800514e <dir_find>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	3301      	adds	r3, #1
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	2b63      	cmp	r3, #99	; 0x63
 8005368:	d9e5      	bls.n	8005336 <dir_register+0x66>
 800536a:	e000      	b.n	800536e <dir_register+0x9e>
			if (res != FR_OK) break;
 800536c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	2b64      	cmp	r3, #100	; 0x64
 8005372:	d101      	bne.n	8005378 <dir_register+0xa8>
 8005374:	2307      	movs	r3, #7
 8005376:	e09c      	b.n	80054b2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800537c:	2b04      	cmp	r3, #4
 800537e:	d002      	beq.n	8005386 <dir_register+0xb6>
 8005380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005384:	e095      	b.n	80054b2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005386:	7dfa      	ldrb	r2, [r7, #23]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800538e:	7dfb      	ldrb	r3, [r7, #23]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <dir_register+0xd8>
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	330c      	adds	r3, #12
 800539c:	4a47      	ldr	r2, [pc, #284]	; (80054bc <dir_register+0x1ec>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	3301      	adds	r3, #1
 80053a6:	e000      	b.n	80053aa <dir_register+0xda>
 80053a8:	2301      	movs	r3, #1
 80053aa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80053ac:	6a39      	ldr	r1, [r7, #32]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fcbd 	bl	8004d2e <dir_alloc>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80053ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d148      	bne.n	8005454 <dir_register+0x184>
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d042      	beq.n	8005454 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695a      	ldr	r2, [r3, #20]
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	015b      	lsls	r3, r3, #5
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fb48 	bl	8004a70 <dir_sdi>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80053e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d132      	bne.n	8005454 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3324      	adds	r3, #36	; 0x24
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff fe8a 	bl	800510c <sum_sfn>
 80053f8:	4603      	mov	r3, r0
 80053fa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	4619      	mov	r1, r3
 8005402:	69f8      	ldr	r0, [r7, #28]
 8005404:	f7fe ff52 	bl	80042ac <move_window>
 8005408:	4603      	mov	r3, r0
 800540a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800540e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005412:	2b00      	cmp	r3, #0
 8005414:	d11d      	bne.n	8005452 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	6918      	ldr	r0, [r3, #16]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a19      	ldr	r1, [r3, #32]
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	7efb      	ldrb	r3, [r7, #27]
 8005424:	f7ff fd7a 	bl	8004f1c <put_lfn>
				fs->wflag = 1;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2201      	movs	r2, #1
 800542c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800542e:	2100      	movs	r1, #0
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fba6 	bl	8004b82 <dir_next>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800543c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005440:	2b00      	cmp	r3, #0
 8005442:	d107      	bne.n	8005454 <dir_register+0x184>
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	3b01      	subs	r3, #1
 8005448:	623b      	str	r3, [r7, #32]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1d5      	bne.n	80053fc <dir_register+0x12c>
 8005450:	e000      	b.n	8005454 <dir_register+0x184>
				if (res != FR_OK) break;
 8005452:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005454:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005458:	2b00      	cmp	r3, #0
 800545a:	d128      	bne.n	80054ae <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	4619      	mov	r1, r3
 8005462:	69f8      	ldr	r0, [r7, #28]
 8005464:	f7fe ff22 	bl	80042ac <move_window>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800546e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005472:	2b00      	cmp	r3, #0
 8005474:	d11b      	bne.n	80054ae <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	2220      	movs	r2, #32
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe fd07 	bl	8003e92 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a18      	ldr	r0, [r3, #32]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3324      	adds	r3, #36	; 0x24
 800548c:	220b      	movs	r2, #11
 800548e:	4619      	mov	r1, r3
 8005490:	f7fe fcde 	bl	8003e50 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	330c      	adds	r3, #12
 80054a0:	f002 0218 	and.w	r2, r2, #24
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2201      	movs	r2, #1
 80054ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80054ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3730      	adds	r7, #48	; 0x30
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	4ec4ec4f 	.word	0x4ec4ec4f

080054c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08a      	sub	sp, #40	; 0x28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	61ba      	str	r2, [r7, #24]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4413      	add	r3, r2
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80054ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054f0:	2b1f      	cmp	r3, #31
 80054f2:	d940      	bls.n	8005576 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80054f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054f6:	2b2f      	cmp	r3, #47	; 0x2f
 80054f8:	d006      	beq.n	8005508 <create_name+0x48>
 80054fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054fc:	2b5c      	cmp	r3, #92	; 0x5c
 80054fe:	d110      	bne.n	8005522 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005500:	e002      	b.n	8005508 <create_name+0x48>
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	3301      	adds	r3, #1
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	4413      	add	r3, r2
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b2f      	cmp	r3, #47	; 0x2f
 8005512:	d0f6      	beq.n	8005502 <create_name+0x42>
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	4413      	add	r3, r2
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b5c      	cmp	r3, #92	; 0x5c
 800551e:	d0f0      	beq.n	8005502 <create_name+0x42>
			break;
 8005520:	e02a      	b.n	8005578 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2bfe      	cmp	r3, #254	; 0xfe
 8005526:	d901      	bls.n	800552c <create_name+0x6c>
 8005528:	2306      	movs	r3, #6
 800552a:	e177      	b.n	800581c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800552c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800552e:	b2db      	uxtb	r3, r3
 8005530:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005534:	2101      	movs	r1, #1
 8005536:	4618      	mov	r0, r3
 8005538:	f001 fcde 	bl	8006ef8 <ff_convert>
 800553c:	4603      	mov	r3, r0
 800553e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <create_name+0x8a>
 8005546:	2306      	movs	r3, #6
 8005548:	e168      	b.n	800581c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800554a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800554c:	2b7f      	cmp	r3, #127	; 0x7f
 800554e:	d809      	bhi.n	8005564 <create_name+0xa4>
 8005550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005552:	4619      	mov	r1, r3
 8005554:	48b3      	ldr	r0, [pc, #716]	; (8005824 <create_name+0x364>)
 8005556:	f7fe fcde 	bl	8003f16 <chk_chr>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <create_name+0xa4>
 8005560:	2306      	movs	r3, #6
 8005562:	e15b      	b.n	800581c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	617a      	str	r2, [r7, #20]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005572:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005574:	e7b4      	b.n	80054e0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005576:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	441a      	add	r2, r3
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005584:	2b1f      	cmp	r3, #31
 8005586:	d801      	bhi.n	800558c <create_name+0xcc>
 8005588:	2304      	movs	r3, #4
 800558a:	e000      	b.n	800558e <create_name+0xce>
 800558c:	2300      	movs	r3, #0
 800558e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005592:	e011      	b.n	80055b8 <create_name+0xf8>
		w = lfn[di - 1];
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800559a:	3b01      	subs	r3, #1
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80055a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	d002      	beq.n	80055b2 <create_name+0xf2>
 80055ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055ae:	2b2e      	cmp	r3, #46	; 0x2e
 80055b0:	d106      	bne.n	80055c0 <create_name+0x100>
		di--;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1ea      	bne.n	8005594 <create_name+0xd4>
 80055be:	e000      	b.n	80055c2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80055c0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	2200      	movs	r2, #0
 80055cc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <create_name+0x118>
 80055d4:	2306      	movs	r3, #6
 80055d6:	e121      	b.n	800581c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3324      	adds	r3, #36	; 0x24
 80055dc:	220b      	movs	r2, #11
 80055de:	2120      	movs	r1, #32
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fe fc56 	bl	8003e92 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	e002      	b.n	80055f2 <create_name+0x132>
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	3301      	adds	r3, #1
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d0f5      	beq.n	80055ec <create_name+0x12c>
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	2b2e      	cmp	r3, #46	; 0x2e
 800560c:	d0ee      	beq.n	80055ec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <create_name+0x168>
 8005614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005618:	f043 0303 	orr.w	r3, r3, #3
 800561c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005620:	e002      	b.n	8005628 <create_name+0x168>
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	3b01      	subs	r3, #1
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d009      	beq.n	8005642 <create_name+0x182>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005634:	3b01      	subs	r3, #1
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	2b2e      	cmp	r3, #46	; 0x2e
 8005640:	d1ef      	bne.n	8005622 <create_name+0x162>

	i = b = 0; ni = 8;
 8005642:	2300      	movs	r3, #0
 8005644:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005648:	2300      	movs	r3, #0
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	2308      	movs	r3, #8
 800564e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	61ba      	str	r2, [r7, #24]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 8090 	beq.w	8005788 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800566a:	2b20      	cmp	r3, #32
 800566c:	d006      	beq.n	800567c <create_name+0x1bc>
 800566e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005670:	2b2e      	cmp	r3, #46	; 0x2e
 8005672:	d10a      	bne.n	800568a <create_name+0x1ca>
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	429a      	cmp	r2, r3
 800567a:	d006      	beq.n	800568a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800567c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005680:	f043 0303 	orr.w	r3, r3, #3
 8005684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005688:	e07d      	b.n	8005786 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800568a:	6a3a      	ldr	r2, [r7, #32]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	429a      	cmp	r2, r3
 8005690:	d203      	bcs.n	800569a <create_name+0x1da>
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	429a      	cmp	r2, r3
 8005698:	d123      	bne.n	80056e2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2b0b      	cmp	r3, #11
 800569e:	d106      	bne.n	80056ae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80056a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056a4:	f043 0303 	orr.w	r3, r3, #3
 80056a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80056ac:	e06f      	b.n	800578e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d005      	beq.n	80056c2 <create_name+0x202>
 80056b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056ba:	f043 0303 	orr.w	r3, r3, #3
 80056be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d860      	bhi.n	800578c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	2308      	movs	r3, #8
 80056d0:	623b      	str	r3, [r7, #32]
 80056d2:	230b      	movs	r3, #11
 80056d4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80056d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80056e0:	e051      	b.n	8005786 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80056e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056e4:	2b7f      	cmp	r3, #127	; 0x7f
 80056e6:	d914      	bls.n	8005712 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80056e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 fc03 	bl	8006ef8 <ff_convert>
 80056f2:	4603      	mov	r3, r0
 80056f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80056f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <create_name+0x246>
 80056fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056fe:	3b80      	subs	r3, #128	; 0x80
 8005700:	4a49      	ldr	r2, [pc, #292]	; (8005828 <create_name+0x368>)
 8005702:	5cd3      	ldrb	r3, [r2, r3]
 8005704:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800570a:	f043 0302 	orr.w	r3, r3, #2
 800570e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d007      	beq.n	8005728 <create_name+0x268>
 8005718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800571a:	4619      	mov	r1, r3
 800571c:	4843      	ldr	r0, [pc, #268]	; (800582c <create_name+0x36c>)
 800571e:	f7fe fbfa 	bl	8003f16 <chk_chr>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005728:	235f      	movs	r3, #95	; 0x5f
 800572a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800572c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005730:	f043 0303 	orr.w	r3, r3, #3
 8005734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005738:	e01b      	b.n	8005772 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800573a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d909      	bls.n	8005754 <create_name+0x294>
 8005740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005742:	2b5a      	cmp	r3, #90	; 0x5a
 8005744:	d806      	bhi.n	8005754 <create_name+0x294>
					b |= 2;
 8005746:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800574a:	f043 0302 	orr.w	r3, r3, #2
 800574e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005752:	e00e      	b.n	8005772 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005756:	2b60      	cmp	r3, #96	; 0x60
 8005758:	d90b      	bls.n	8005772 <create_name+0x2b2>
 800575a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800575c:	2b7a      	cmp	r3, #122	; 0x7a
 800575e:	d808      	bhi.n	8005772 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005764:	f043 0301 	orr.w	r3, r3, #1
 8005768:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800576c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800576e:	3b20      	subs	r3, #32
 8005770:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	623a      	str	r2, [r7, #32]
 8005778:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800577a:	b2d1      	uxtb	r1, r2
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	4413      	add	r3, r2
 8005780:	460a      	mov	r2, r1
 8005782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005786:	e763      	b.n	8005650 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005788:	bf00      	nop
 800578a:	e000      	b.n	800578e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800578c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005794:	2be5      	cmp	r3, #229	; 0xe5
 8005796:	d103      	bne.n	80057a0 <create_name+0x2e0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2205      	movs	r2, #5
 800579c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d104      	bne.n	80057b0 <create_name+0x2f0>
 80057a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80057b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057b4:	f003 030c 	and.w	r3, r3, #12
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	d005      	beq.n	80057c8 <create_name+0x308>
 80057bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d105      	bne.n	80057d4 <create_name+0x314>
 80057c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057cc:	f043 0302 	orr.w	r3, r3, #2
 80057d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80057d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d117      	bne.n	8005810 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80057e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057e4:	f003 0303 	and.w	r3, r3, #3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d105      	bne.n	80057f8 <create_name+0x338>
 80057ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057f0:	f043 0310 	orr.w	r3, r3, #16
 80057f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80057f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057fc:	f003 030c 	and.w	r3, r3, #12
 8005800:	2b04      	cmp	r3, #4
 8005802:	d105      	bne.n	8005810 <create_name+0x350>
 8005804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005808:	f043 0308 	orr.w	r3, r3, #8
 800580c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005816:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800581a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800581c:	4618      	mov	r0, r3
 800581e:	3728      	adds	r7, #40	; 0x28
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	08007b68 	.word	0x08007b68
 8005828:	08007bc8 	.word	0x08007bc8
 800582c:	08007b74 	.word	0x08007b74

08005830 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005844:	e002      	b.n	800584c <follow_path+0x1c>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	3301      	adds	r3, #1
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b2f      	cmp	r3, #47	; 0x2f
 8005852:	d0f8      	beq.n	8005846 <follow_path+0x16>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b5c      	cmp	r3, #92	; 0x5c
 800585a:	d0f4      	beq.n	8005846 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2200      	movs	r2, #0
 8005860:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b1f      	cmp	r3, #31
 8005868:	d80a      	bhi.n	8005880 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2280      	movs	r2, #128	; 0x80
 800586e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005872:	2100      	movs	r1, #0
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff f8fb 	bl	8004a70 <dir_sdi>
 800587a:	4603      	mov	r3, r0
 800587c:	75fb      	strb	r3, [r7, #23]
 800587e:	e048      	b.n	8005912 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005880:	463b      	mov	r3, r7
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fe1b 	bl	80054c0 <create_name>
 800588a:	4603      	mov	r3, r0
 800588c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d139      	bne.n	8005908 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fc5a 	bl	800514e <dir_find>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80058a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d12c      	bne.n	800590c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80058b2:	7afb      	ldrb	r3, [r7, #11]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d127      	bne.n	800590c <follow_path+0xdc>
 80058bc:	2305      	movs	r3, #5
 80058be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80058c0:	e024      	b.n	800590c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d121      	bne.n	8005910 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	799b      	ldrb	r3, [r3, #6]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d102      	bne.n	80058de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80058d8:	2305      	movs	r3, #5
 80058da:	75fb      	strb	r3, [r7, #23]
 80058dc:	e019      	b.n	8005912 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	8992      	ldrh	r2, [r2, #12]
 80058ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80058f0:	fb02 f200 	mul.w	r2, r2, r0
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	440b      	add	r3, r1
 80058f8:	4619      	mov	r1, r3
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7ff fa5e 	bl	8004dbc <ld_clust>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005906:	e7bb      	b.n	8005880 <follow_path+0x50>
			if (res != FR_OK) break;
 8005908:	bf00      	nop
 800590a:	e002      	b.n	8005912 <follow_path+0xe2>
				break;
 800590c:	bf00      	nop
 800590e:	e000      	b.n	8005912 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005910:	bf00      	nop
			}
		}
	}

	return res;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005928:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d031      	beq.n	8005996 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e002      	b.n	8005940 <get_ldnumber+0x24>
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	3301      	adds	r3, #1
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b1f      	cmp	r3, #31
 8005946:	d903      	bls.n	8005950 <get_ldnumber+0x34>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b3a      	cmp	r3, #58	; 0x3a
 800594e:	d1f4      	bne.n	800593a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b3a      	cmp	r3, #58	; 0x3a
 8005956:	d11c      	bne.n	8005992 <get_ldnumber+0x76>
			tp = *path;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	60fa      	str	r2, [r7, #12]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	3b30      	subs	r3, #48	; 0x30
 8005968:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b09      	cmp	r3, #9
 800596e:	d80e      	bhi.n	800598e <get_ldnumber+0x72>
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	429a      	cmp	r2, r3
 8005976:	d10a      	bne.n	800598e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d107      	bne.n	800598e <get_ldnumber+0x72>
					vol = (int)i;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	3301      	adds	r3, #1
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	e002      	b.n	8005998 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005996:	693b      	ldr	r3, [r7, #16]
}
 8005998:	4618      	mov	r0, r3
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	70da      	strb	r2, [r3, #3]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059ba:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80059bc:	6839      	ldr	r1, [r7, #0]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fe fc74 	bl	80042ac <move_window>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <check_fs+0x2a>
 80059ca:	2304      	movs	r3, #4
 80059cc:	e038      	b.n	8005a40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3338      	adds	r3, #56	; 0x38
 80059d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe f9b8 	bl	8003d4c <ld_word>
 80059dc:	4603      	mov	r3, r0
 80059de:	461a      	mov	r2, r3
 80059e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d001      	beq.n	80059ec <check_fs+0x48>
 80059e8:	2303      	movs	r3, #3
 80059ea:	e029      	b.n	8005a40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059f2:	2be9      	cmp	r3, #233	; 0xe9
 80059f4:	d009      	beq.n	8005a0a <check_fs+0x66>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059fc:	2beb      	cmp	r3, #235	; 0xeb
 80059fe:	d11e      	bne.n	8005a3e <check_fs+0x9a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a06:	2b90      	cmp	r3, #144	; 0x90
 8005a08:	d119      	bne.n	8005a3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3338      	adds	r3, #56	; 0x38
 8005a0e:	3336      	adds	r3, #54	; 0x36
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe f9b3 	bl	8003d7c <ld_dword>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a1c:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <check_fs+0xa4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d101      	bne.n	8005a26 <check_fs+0x82>
 8005a22:	2300      	movs	r3, #0
 8005a24:	e00c      	b.n	8005a40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3338      	adds	r3, #56	; 0x38
 8005a2a:	3352      	adds	r3, #82	; 0x52
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe f9a5 	bl	8003d7c <ld_dword>
 8005a32:	4603      	mov	r3, r0
 8005a34:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <check_fs+0xa8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d101      	bne.n	8005a3e <check_fs+0x9a>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e000      	b.n	8005a40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005a3e:	2302      	movs	r3, #2
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	00544146 	.word	0x00544146
 8005a4c:	33544146 	.word	0x33544146

08005a50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b096      	sub	sp, #88	; 0x58
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f7ff ff59 	bl	800591c <get_ldnumber>
 8005a6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	da01      	bge.n	8005a76 <find_volume+0x26>
 8005a72:	230b      	movs	r3, #11
 8005a74:	e268      	b.n	8005f48 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005a76:	4ab0      	ldr	r2, [pc, #704]	; (8005d38 <find_volume+0x2e8>)
 8005a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <find_volume+0x3a>
 8005a86:	230c      	movs	r3, #12
 8005a88:	e25e      	b.n	8005f48 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01a      	beq.n	8005ad6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fe f8b3 	bl	8003c10 <disk_status>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10c      	bne.n	8005ad6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <find_volume+0x82>
 8005ac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005ace:	230a      	movs	r3, #10
 8005ad0:	e23a      	b.n	8005f48 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e238      	b.n	8005f48 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fe f8ab 	bl	8003c44 <disk_initialize>
 8005aee:	4603      	mov	r3, r0
 8005af0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005b00:	2303      	movs	r3, #3
 8005b02:	e221      	b.n	8005f48 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <find_volume+0xca>
 8005b0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005b16:	230a      	movs	r3, #10
 8005b18:	e216      	b.n	8005f48 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	7858      	ldrb	r0, [r3, #1]
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	330c      	adds	r3, #12
 8005b22:	461a      	mov	r2, r3
 8005b24:	2102      	movs	r1, #2
 8005b26:	f7fe f8f3 	bl	8003d10 <disk_ioctl>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <find_volume+0xe4>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e209      	b.n	8005f48 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	899b      	ldrh	r3, [r3, #12]
 8005b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3c:	d80d      	bhi.n	8005b5a <find_volume+0x10a>
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	899b      	ldrh	r3, [r3, #12]
 8005b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b46:	d308      	bcc.n	8005b5a <find_volume+0x10a>
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	899b      	ldrh	r3, [r3, #12]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	899b      	ldrh	r3, [r3, #12]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <find_volume+0x10e>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e1f4      	b.n	8005f48 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005b62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b66:	f7ff ff1d 	bl	80059a4 <check_fs>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005b70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d14b      	bne.n	8005c10 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005b78:	2300      	movs	r3, #0
 8005b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b7c:	e01f      	b.n	8005bbe <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005b8c:	4413      	add	r3, r2
 8005b8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	3304      	adds	r3, #4
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d006      	beq.n	8005ba8 <find_volume+0x158>
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe f8ec 	bl	8003d7c <ld_dword>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	e000      	b.n	8005baa <find_volume+0x15a>
 8005ba8:	2200      	movs	r2, #0
 8005baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005bb2:	440b      	add	r3, r1
 8005bb4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bba:	3301      	adds	r3, #1
 8005bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d9dc      	bls.n	8005b7e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <find_volume+0x184>
 8005bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005bdc:	4413      	add	r3, r2
 8005bde:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005be2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <find_volume+0x1a6>
 8005bea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bee:	f7ff fed9 	bl	80059a4 <check_fs>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	e000      	b.n	8005bf8 <find_volume+0x1a8>
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d905      	bls.n	8005c10 <find_volume+0x1c0>
 8005c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c06:	3301      	adds	r3, #1
 8005c08:	643b      	str	r3, [r7, #64]	; 0x40
 8005c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d9e1      	bls.n	8005bd4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d101      	bne.n	8005c1c <find_volume+0x1cc>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e195      	b.n	8005f48 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d901      	bls.n	8005c28 <find_volume+0x1d8>
 8005c24:	230d      	movs	r3, #13
 8005c26:	e18f      	b.n	8005f48 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	3338      	adds	r3, #56	; 0x38
 8005c2c:	330b      	adds	r3, #11
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe f88c 	bl	8003d4c <ld_word>
 8005c34:	4603      	mov	r3, r0
 8005c36:	461a      	mov	r2, r3
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	899b      	ldrh	r3, [r3, #12]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d001      	beq.n	8005c44 <find_volume+0x1f4>
 8005c40:	230d      	movs	r3, #13
 8005c42:	e181      	b.n	8005f48 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c46:	3338      	adds	r3, #56	; 0x38
 8005c48:	3316      	adds	r3, #22
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe f87e 	bl	8003d4c <ld_word>
 8005c50:	4603      	mov	r3, r0
 8005c52:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <find_volume+0x218>
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	3338      	adds	r3, #56	; 0x38
 8005c5e:	3324      	adds	r3, #36	; 0x24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe f88b 	bl	8003d7c <ld_dword>
 8005c66:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c6c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7a:	789b      	ldrb	r3, [r3, #2]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d005      	beq.n	8005c8c <find_volume+0x23c>
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	789b      	ldrb	r3, [r3, #2]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d001      	beq.n	8005c8c <find_volume+0x23c>
 8005c88:	230d      	movs	r3, #13
 8005c8a:	e15d      	b.n	8005f48 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8e:	789b      	ldrb	r3, [r3, #2]
 8005c90:	461a      	mov	r2, r3
 8005c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c94:	fb02 f303 	mul.w	r3, r2, r3
 8005c98:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	895b      	ldrh	r3, [r3, #10]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d008      	beq.n	8005cc0 <find_volume+0x270>
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	895b      	ldrh	r3, [r3, #10]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	895b      	ldrh	r3, [r3, #10]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	4013      	ands	r3, r2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <find_volume+0x274>
 8005cc0:	230d      	movs	r3, #13
 8005cc2:	e141      	b.n	8005f48 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	3338      	adds	r3, #56	; 0x38
 8005cc8:	3311      	adds	r3, #17
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe f83e 	bl	8003d4c <ld_word>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	891b      	ldrh	r3, [r3, #8]
 8005cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cde:	8992      	ldrh	r2, [r2, #12]
 8005ce0:	0952      	lsrs	r2, r2, #5
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ce8:	fb02 f201 	mul.w	r2, r2, r1
 8005cec:	1a9b      	subs	r3, r3, r2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <find_volume+0x2a8>
 8005cf4:	230d      	movs	r3, #13
 8005cf6:	e127      	b.n	8005f48 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	3338      	adds	r3, #56	; 0x38
 8005cfc:	3313      	adds	r3, #19
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe f824 	bl	8003d4c <ld_word>
 8005d04:	4603      	mov	r3, r0
 8005d06:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <find_volume+0x2cc>
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	3338      	adds	r3, #56	; 0x38
 8005d12:	3320      	adds	r3, #32
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fe f831 	bl	8003d7c <ld_dword>
 8005d1a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	3338      	adds	r3, #56	; 0x38
 8005d20:	330e      	adds	r3, #14
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe f812 	bl	8003d4c <ld_word>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005d2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <find_volume+0x2ec>
 8005d32:	230d      	movs	r3, #13
 8005d34:	e108      	b.n	8005f48 <find_volume+0x4f8>
 8005d36:	bf00      	nop
 8005d38:	200000ac 	.word	0x200000ac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005d3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	4413      	add	r3, r2
 8005d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d44:	8911      	ldrh	r1, [r2, #8]
 8005d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d48:	8992      	ldrh	r2, [r2, #12]
 8005d4a:	0952      	lsrs	r2, r2, #5
 8005d4c:	b292      	uxth	r2, r2
 8005d4e:	fbb1 f2f2 	udiv	r2, r1, r2
 8005d52:	b292      	uxth	r2, r2
 8005d54:	4413      	add	r3, r2
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d201      	bcs.n	8005d64 <find_volume+0x314>
 8005d60:	230d      	movs	r3, #13
 8005d62:	e0f1      	b.n	8005f48 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d6c:	8952      	ldrh	r2, [r2, #10]
 8005d6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <find_volume+0x32e>
 8005d7a:	230d      	movs	r3, #13
 8005d7c:	e0e4      	b.n	8005f48 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d802      	bhi.n	8005d94 <find_volume+0x344>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d802      	bhi.n	8005da4 <find_volume+0x354>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	1c9a      	adds	r2, r3, #2
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005db2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db6:	441a      	add	r2, r3
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005dbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	441a      	add	r2, r3
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d11e      	bne.n	8005e0c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	3338      	adds	r3, #56	; 0x38
 8005dd2:	332a      	adds	r3, #42	; 0x2a
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fd ffb9 	bl	8003d4c <ld_word>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <find_volume+0x394>
 8005de0:	230d      	movs	r3, #13
 8005de2:	e0b1      	b.n	8005f48 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	891b      	ldrh	r3, [r3, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <find_volume+0x3a0>
 8005dec:	230d      	movs	r3, #13
 8005dee:	e0ab      	b.n	8005f48 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	3338      	adds	r3, #56	; 0x38
 8005df4:	332c      	adds	r3, #44	; 0x2c
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fd ffc0 	bl	8003d7c <ld_dword>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	647b      	str	r3, [r7, #68]	; 0x44
 8005e0a:	e01f      	b.n	8005e4c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	891b      	ldrh	r3, [r3, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <find_volume+0x3c8>
 8005e14:	230d      	movs	r3, #13
 8005e16:	e097      	b.n	8005f48 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1e:	441a      	add	r2, r3
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d103      	bne.n	8005e34 <find_volume+0x3e4>
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	e00a      	b.n	8005e4a <find_volume+0x3fa>
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	4413      	add	r3, r2
 8005e3e:	085a      	lsrs	r2, r3, #1
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005e4a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	899b      	ldrh	r3, [r3, #12]
 8005e54:	4619      	mov	r1, r3
 8005e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e58:	440b      	add	r3, r1
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e5e:	8989      	ldrh	r1, [r1, #12]
 8005e60:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d201      	bcs.n	8005e6c <find_volume+0x41c>
 8005e68:	230d      	movs	r3, #13
 8005e6a:	e06d      	b.n	8005f48 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e72:	619a      	str	r2, [r3, #24]
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	2280      	movs	r2, #128	; 0x80
 8005e80:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005e82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d149      	bne.n	8005f1e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	3338      	adds	r3, #56	; 0x38
 8005e8e:	3330      	adds	r3, #48	; 0x30
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fd ff5b 	bl	8003d4c <ld_word>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d140      	bne.n	8005f1e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ea4:	f7fe fa02 	bl	80042ac <move_window>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d137      	bne.n	8005f1e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	3338      	adds	r3, #56	; 0x38
 8005eb8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fd ff45 	bl	8003d4c <ld_word>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d127      	bne.n	8005f1e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	3338      	adds	r3, #56	; 0x38
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fd ff52 	bl	8003d7c <ld_dword>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <find_volume+0x500>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d11e      	bne.n	8005f1e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	3338      	adds	r3, #56	; 0x38
 8005ee4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fd ff47 	bl	8003d7c <ld_dword>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4a18      	ldr	r2, [pc, #96]	; (8005f54 <find_volume+0x504>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d113      	bne.n	8005f1e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	3338      	adds	r3, #56	; 0x38
 8005efa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fd ff3c 	bl	8003d7c <ld_dword>
 8005f04:	4602      	mov	r2, r0
 8005f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f08:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	3338      	adds	r3, #56	; 0x38
 8005f0e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fd ff32 	bl	8003d7c <ld_dword>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005f24:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <find_volume+0x508>)
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <find_volume+0x508>)
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <find_volume+0x508>)
 8005f34:	881a      	ldrh	r2, [r3, #0]
 8005f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f38:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	4a07      	ldr	r2, [pc, #28]	; (8005f5c <find_volume+0x50c>)
 8005f3e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005f40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f42:	f7fe f94b 	bl	80041dc <clear_lock>
#endif
	return FR_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3758      	adds	r7, #88	; 0x58
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	41615252 	.word	0x41615252
 8005f54:	61417272 	.word	0x61417272
 8005f58:	200000b0 	.word	0x200000b0
 8005f5c:	200000d4 	.word	0x200000d4

08005f60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005f6a:	2309      	movs	r3, #9
 8005f6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01c      	beq.n	8005fae <validate+0x4e>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d018      	beq.n	8005fae <validate+0x4e>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d013      	beq.n	8005fae <validate+0x4e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	889a      	ldrh	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	88db      	ldrh	r3, [r3, #6]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d10c      	bne.n	8005fae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fd fe38 	bl	8003c10 <disk_status>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <validate+0x4e>
			res = FR_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <validate+0x5a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	e000      	b.n	8005fbc <validate+0x5c>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	6013      	str	r3, [r2, #0]
	return res;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005fde:	f107 0310 	add.w	r3, r7, #16
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff fc9a 	bl	800591c <get_ldnumber>
 8005fe8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	da01      	bge.n	8005ff4 <f_mount+0x28>
 8005ff0:	230b      	movs	r3, #11
 8005ff2:	e02b      	b.n	800604c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005ff4:	4a17      	ldr	r2, [pc, #92]	; (8006054 <f_mount+0x88>)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ffc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006004:	69b8      	ldr	r0, [r7, #24]
 8006006:	f7fe f8e9 	bl	80041dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	490d      	ldr	r1, [pc, #52]	; (8006054 <f_mount+0x88>)
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <f_mount+0x66>
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d001      	beq.n	8006036 <f_mount+0x6a>
 8006032:	2300      	movs	r3, #0
 8006034:	e00a      	b.n	800604c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006036:	f107 010c 	add.w	r1, r7, #12
 800603a:	f107 0308 	add.w	r3, r7, #8
 800603e:	2200      	movs	r2, #0
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fd05 	bl	8005a50 <find_volume>
 8006046:	4603      	mov	r3, r0
 8006048:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800604a:	7dfb      	ldrb	r3, [r7, #23]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3720      	adds	r7, #32
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	200000ac 	.word	0x200000ac

08006058 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b09a      	sub	sp, #104	; 0x68
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <f_open+0x18>
 800606c:	2309      	movs	r3, #9
 800606e:	e1bb      	b.n	80063e8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006076:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006078:	79fa      	ldrb	r2, [r7, #7]
 800607a:	f107 0114 	add.w	r1, r7, #20
 800607e:	f107 0308 	add.w	r3, r7, #8
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fce4 	bl	8005a50 <find_volume>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800608e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 819f 	bne.w	80063d6 <f_open+0x37e>
		dj.obj.fs = fs;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	f107 0318 	add.w	r3, r7, #24
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fbc3 	bl	8005830 <follow_path>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80060b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d11a      	bne.n	80060ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80060b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	da03      	bge.n	80060ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80060c2:	2306      	movs	r3, #6
 80060c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80060c8:	e011      	b.n	80060ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	f023 0301 	bic.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf14      	ite	ne
 80060d4:	2301      	movne	r3, #1
 80060d6:	2300      	moveq	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	f107 0318 	add.w	r3, r7, #24
 80060e0:	4611      	mov	r1, r2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fd ff32 	bl	8003f4c <chk_lock>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	f003 031c 	and.w	r3, r3, #28
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d07f      	beq.n	80061f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80060f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d017      	beq.n	8006130 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006100:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006104:	2b04      	cmp	r3, #4
 8006106:	d10e      	bne.n	8006126 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006108:	f7fd ff7c 	bl	8004004 <enq_lock>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d006      	beq.n	8006120 <f_open+0xc8>
 8006112:	f107 0318 	add.w	r3, r7, #24
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff f8da 	bl	80052d0 <dir_register>
 800611c:	4603      	mov	r3, r0
 800611e:	e000      	b.n	8006122 <f_open+0xca>
 8006120:	2312      	movs	r3, #18
 8006122:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	f043 0308 	orr.w	r3, r3, #8
 800612c:	71fb      	strb	r3, [r7, #7]
 800612e:	e010      	b.n	8006152 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006130:	7fbb      	ldrb	r3, [r7, #30]
 8006132:	f003 0311 	and.w	r3, r3, #17
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <f_open+0xea>
					res = FR_DENIED;
 800613a:	2307      	movs	r3, #7
 800613c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006140:	e007      	b.n	8006152 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <f_open+0xfa>
 800614c:	2308      	movs	r3, #8
 800614e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006152:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006156:	2b00      	cmp	r3, #0
 8006158:	d168      	bne.n	800622c <f_open+0x1d4>
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d063      	beq.n	800622c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006164:	f7fd fcf6 	bl	8003b54 <get_fattime>
 8006168:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	330e      	adds	r3, #14
 800616e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006170:	4618      	mov	r0, r3
 8006172:	f7fd fe41 	bl	8003df8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	3316      	adds	r3, #22
 800617a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800617c:	4618      	mov	r0, r3
 800617e:	f7fd fe3b 	bl	8003df8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	330b      	adds	r3, #11
 8006186:	2220      	movs	r2, #32
 8006188:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800618e:	4611      	mov	r1, r2
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe fe13 	bl	8004dbc <ld_clust>
 8006196:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800619c:	2200      	movs	r2, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fe2b 	bl	8004dfa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	331c      	adds	r3, #28
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fd fe24 	bl	8003df8 <st_dword>
					fs->wflag = 1;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2201      	movs	r2, #1
 80061b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80061b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d037      	beq.n	800622c <f_open+0x1d4>
						dw = fs->winsect;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80061c2:	f107 0318 	add.w	r3, r7, #24
 80061c6:	2200      	movs	r2, #0
 80061c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fb1b 	bl	8004806 <remove_chain>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80061d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d126      	bne.n	800622c <f_open+0x1d4>
							res = move_window(fs, dw);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fe f862 	bl	80042ac <move_window>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061f2:	3a01      	subs	r2, #1
 80061f4:	615a      	str	r2, [r3, #20]
 80061f6:	e019      	b.n	800622c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80061f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d115      	bne.n	800622c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006200:	7fbb      	ldrb	r3, [r7, #30]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <f_open+0x1ba>
					res = FR_NO_FILE;
 800620a:	2304      	movs	r3, #4
 800620c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006210:	e00c      	b.n	800622c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <f_open+0x1d4>
 800621c:	7fbb      	ldrb	r3, [r7, #30]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <f_open+0x1d4>
						res = FR_DENIED;
 8006226:	2307      	movs	r3, #7
 8006228:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800622c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006230:	2b00      	cmp	r3, #0
 8006232:	d128      	bne.n	8006286 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006244:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800624e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	bf14      	ite	ne
 800625e:	2301      	movne	r3, #1
 8006260:	2300      	moveq	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	f107 0318 	add.w	r3, r7, #24
 800626a:	4611      	mov	r1, r2
 800626c:	4618      	mov	r0, r3
 800626e:	f7fd feeb 	bl	8004048 <inc_lock>
 8006272:	4602      	mov	r2, r0
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <f_open+0x22e>
 8006280:	2302      	movs	r3, #2
 8006282:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006286:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 80a3 	bne.w	80063d6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006294:	4611      	mov	r1, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fd90 	bl	8004dbc <ld_clust>
 800629c:	4602      	mov	r2, r0
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	331c      	adds	r3, #28
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fd fd68 	bl	8003d7c <ld_dword>
 80062ac:	4602      	mov	r2, r0
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	88da      	ldrh	r2, [r3, #6]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	79fa      	ldrb	r2, [r7, #7]
 80062ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3330      	adds	r3, #48	; 0x30
 80062e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062e6:	2100      	movs	r1, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fd fdd2 	bl	8003e92 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d06e      	beq.n	80063d6 <f_open+0x37e>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d06a      	beq.n	80063d6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	895b      	ldrh	r3, [r3, #10]
 800630c:	461a      	mov	r2, r3
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	899b      	ldrh	r3, [r3, #12]
 8006312:	fb03 f302 	mul.w	r3, r3, r2
 8006316:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006324:	e016      	b.n	8006354 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe f87b 	bl	8004426 <get_fat>
 8006330:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006334:	2b01      	cmp	r3, #1
 8006336:	d802      	bhi.n	800633e <f_open+0x2e6>
 8006338:	2302      	movs	r3, #2
 800633a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800633e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006344:	d102      	bne.n	800634c <f_open+0x2f4>
 8006346:	2301      	movs	r3, #1
 8006348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800634c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800634e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006354:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <f_open+0x30c>
 800635c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800635e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006360:	429a      	cmp	r2, r3
 8006362:	d8e0      	bhi.n	8006326 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006368:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800636a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800636e:	2b00      	cmp	r3, #0
 8006370:	d131      	bne.n	80063d6 <f_open+0x37e>
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	899b      	ldrh	r3, [r3, #12]
 8006376:	461a      	mov	r2, r3
 8006378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800637a:	fbb3 f1f2 	udiv	r1, r3, r2
 800637e:	fb02 f201 	mul.w	r2, r2, r1
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d026      	beq.n	80063d6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe f82b 	bl	80043e8 <clust2sect>
 8006392:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <f_open+0x34a>
						res = FR_INT_ERR;
 800639a:	2302      	movs	r3, #2
 800639c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80063a0:	e019      	b.n	80063d6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	899b      	ldrh	r3, [r3, #12]
 80063a6:	461a      	mov	r2, r3
 80063a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80063ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b0:	441a      	add	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	7858      	ldrb	r0, [r3, #1]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	2301      	movs	r3, #1
 80063c6:	f7fd fc63 	bl	8003c90 <disk_read>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <f_open+0x37e>
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80063d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <f_open+0x38c>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80063e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3768      	adds	r7, #104	; 0x68
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08e      	sub	sp, #56	; 0x38
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f107 0214 	add.w	r2, r7, #20
 800640e:	4611      	mov	r1, r2
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff fda5 	bl	8005f60 <validate>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800641c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006420:	2b00      	cmp	r3, #0
 8006422:	d107      	bne.n	8006434 <f_read+0x44>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	7d5b      	ldrb	r3, [r3, #21]
 8006428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800642c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <f_read+0x4a>
 8006434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006438:	e135      	b.n	80066a6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	7d1b      	ldrb	r3, [r3, #20]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <f_read+0x5a>
 8006446:	2307      	movs	r3, #7
 8006448:	e12d      	b.n	80066a6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	429a      	cmp	r2, r3
 800645c:	f240 811e 	bls.w	800669c <f_read+0x2ac>
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006464:	e11a      	b.n	800669c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	8992      	ldrh	r2, [r2, #12]
 800646e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006472:	fb02 f201 	mul.w	r2, r2, r1
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	2b00      	cmp	r3, #0
 800647a:	f040 80d5 	bne.w	8006628 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	8992      	ldrh	r2, [r2, #12]
 8006486:	fbb3 f3f2 	udiv	r3, r3, r2
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	8952      	ldrh	r2, [r2, #10]
 800648e:	3a01      	subs	r2, #1
 8006490:	4013      	ands	r3, r2
 8006492:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d12f      	bne.n	80064fa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	633b      	str	r3, [r7, #48]	; 0x30
 80064a8:	e013      	b.n	80064d2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	4619      	mov	r1, r3
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f7fe faa1 	bl	8004a00 <clmt_clust>
 80064be:	6338      	str	r0, [r7, #48]	; 0x30
 80064c0:	e007      	b.n	80064d2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f7fd ffab 	bl	8004426 <get_fat>
 80064d0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d804      	bhi.n	80064e2 <f_read+0xf2>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2202      	movs	r2, #2
 80064dc:	755a      	strb	r2, [r3, #21]
 80064de:	2302      	movs	r3, #2
 80064e0:	e0e1      	b.n	80066a6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e8:	d104      	bne.n	80064f4 <f_read+0x104>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	755a      	strb	r2, [r3, #21]
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0d8      	b.n	80066a6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f7fd ff70 	bl	80043e8 <clust2sect>
 8006508:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <f_read+0x12a>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2202      	movs	r2, #2
 8006514:	755a      	strb	r2, [r3, #21]
 8006516:	2302      	movs	r3, #2
 8006518:	e0c5      	b.n	80066a6 <f_read+0x2b6>
			sect += csect;
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	899b      	ldrh	r3, [r3, #12]
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	fbb3 f3f2 	udiv	r3, r3, r2
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	2b00      	cmp	r3, #0
 8006534:	d041      	beq.n	80065ba <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	4413      	add	r3, r2
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	8952      	ldrh	r2, [r2, #10]
 8006540:	4293      	cmp	r3, r2
 8006542:	d905      	bls.n	8006550 <f_read+0x160>
					cc = fs->csize - csect;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	895b      	ldrh	r3, [r3, #10]
 8006548:	461a      	mov	r2, r3
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	7858      	ldrb	r0, [r3, #1]
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800655a:	f7fd fb99 	bl	8003c90 <disk_read>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <f_read+0x17e>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	755a      	strb	r2, [r3, #21]
 800656a:	2301      	movs	r3, #1
 800656c:	e09b      	b.n	80066a6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	7d1b      	ldrb	r3, [r3, #20]
 8006572:	b25b      	sxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	da18      	bge.n	80065aa <f_read+0x1ba>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a1a      	ldr	r2, [r3, #32]
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006582:	429a      	cmp	r2, r3
 8006584:	d911      	bls.n	80065aa <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a1a      	ldr	r2, [r3, #32]
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	8992      	ldrh	r2, [r2, #12]
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006598:	18d0      	adds	r0, r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	899b      	ldrh	r3, [r3, #12]
 80065a4:	461a      	mov	r2, r3
 80065a6:	f7fd fc53 	bl	8003e50 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	899b      	ldrh	r3, [r3, #12]
 80065ae:	461a      	mov	r2, r3
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80065b8:	e05c      	b.n	8006674 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d02e      	beq.n	8006622 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	7d1b      	ldrb	r3, [r3, #20]
 80065c8:	b25b      	sxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	da18      	bge.n	8006600 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	7858      	ldrb	r0, [r3, #1]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	2301      	movs	r3, #1
 80065de:	f7fd fb77 	bl	8003cd0 <disk_write>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <f_read+0x202>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	755a      	strb	r2, [r3, #21]
 80065ee:	2301      	movs	r3, #1
 80065f0:	e059      	b.n	80066a6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	7d1b      	ldrb	r3, [r3, #20]
 80065f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	7858      	ldrb	r0, [r3, #1]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800660a:	2301      	movs	r3, #1
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	f7fd fb3f 	bl	8003c90 <disk_read>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d004      	beq.n	8006622 <f_read+0x232>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2201      	movs	r2, #1
 800661c:	755a      	strb	r2, [r3, #21]
 800661e:	2301      	movs	r3, #1
 8006620:	e041      	b.n	80066a6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	899b      	ldrh	r3, [r3, #12]
 800662c:	4618      	mov	r0, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	8992      	ldrh	r2, [r2, #12]
 8006636:	fbb3 f1f2 	udiv	r1, r3, r2
 800663a:	fb02 f201 	mul.w	r2, r2, r1
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	1ac3      	subs	r3, r0, r3
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	429a      	cmp	r2, r3
 800664a:	d901      	bls.n	8006650 <f_read+0x260>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	8992      	ldrh	r2, [r2, #12]
 800665e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006662:	fb02 f200 	mul.w	r2, r2, r0
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	440b      	add	r3, r1
 800666a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800666c:	4619      	mov	r1, r3
 800666e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006670:	f7fd fbee 	bl	8003e50 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	4413      	add	r3, r2
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	699a      	ldr	r2, [r3, #24]
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	441a      	add	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	619a      	str	r2, [r3, #24]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	441a      	add	r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f47f aee1 	bne.w	8006466 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3738      	adds	r7, #56	; 0x38
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b08c      	sub	sp, #48	; 0x30
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
 80066ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f107 0210 	add.w	r2, r7, #16
 80066cc:	4611      	mov	r1, r2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff fc46 	bl	8005f60 <validate>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80066da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d107      	bne.n	80066f2 <f_write+0x44>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	7d5b      	ldrb	r3, [r3, #21]
 80066e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80066ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <f_write+0x4a>
 80066f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066f6:	e16a      	b.n	80069ce <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	7d1b      	ldrb	r3, [r3, #20]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <f_write+0x5a>
 8006704:	2307      	movs	r3, #7
 8006706:	e162      	b.n	80069ce <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	699a      	ldr	r2, [r3, #24]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	441a      	add	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	429a      	cmp	r2, r3
 8006716:	f080 814c 	bcs.w	80069b2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	43db      	mvns	r3, r3
 8006720:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006722:	e146      	b.n	80069b2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	8992      	ldrh	r2, [r2, #12]
 800672c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006730:	fb02 f201 	mul.w	r2, r2, r1
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	2b00      	cmp	r3, #0
 8006738:	f040 80f1 	bne.w	800691e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	8992      	ldrh	r2, [r2, #12]
 8006744:	fbb3 f3f2 	udiv	r3, r3, r2
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	8952      	ldrh	r2, [r2, #10]
 800674c:	3a01      	subs	r2, #1
 800674e:	4013      	ands	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d143      	bne.n	80067e0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10c      	bne.n	800677a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	d11a      	bne.n	80067a2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f7fe f8ad 	bl	80048d0 <create_chain>
 8006776:	62b8      	str	r0, [r7, #40]	; 0x28
 8006778:	e013      	b.n	80067a2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	4619      	mov	r1, r3
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7fe f939 	bl	8004a00 <clmt_clust>
 800678e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006790:	e007      	b.n	80067a2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	4619      	mov	r1, r3
 800679a:	4610      	mov	r0, r2
 800679c:	f7fe f898 	bl	80048d0 <create_chain>
 80067a0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8109 	beq.w	80069bc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d104      	bne.n	80067ba <f_write+0x10c>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2202      	movs	r2, #2
 80067b4:	755a      	strb	r2, [r3, #21]
 80067b6:	2302      	movs	r3, #2
 80067b8:	e109      	b.n	80069ce <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067c0:	d104      	bne.n	80067cc <f_write+0x11e>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	755a      	strb	r2, [r3, #21]
 80067c8:	2301      	movs	r3, #1
 80067ca:	e100      	b.n	80069ce <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067d0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <f_write+0x132>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067de:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	7d1b      	ldrb	r3, [r3, #20]
 80067e4:	b25b      	sxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da18      	bge.n	800681c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	7858      	ldrb	r0, [r3, #1]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1a      	ldr	r2, [r3, #32]
 80067f8:	2301      	movs	r3, #1
 80067fa:	f7fd fa69 	bl	8003cd0 <disk_write>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d004      	beq.n	800680e <f_write+0x160>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2201      	movs	r2, #1
 8006808:	755a      	strb	r2, [r3, #21]
 800680a:	2301      	movs	r3, #1
 800680c:	e0df      	b.n	80069ce <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	7d1b      	ldrb	r3, [r3, #20]
 8006812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006816:	b2da      	uxtb	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	4619      	mov	r1, r3
 8006824:	4610      	mov	r0, r2
 8006826:	f7fd fddf 	bl	80043e8 <clust2sect>
 800682a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <f_write+0x18e>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2202      	movs	r2, #2
 8006836:	755a      	strb	r2, [r3, #21]
 8006838:	2302      	movs	r3, #2
 800683a:	e0c8      	b.n	80069ce <f_write+0x320>
			sect += csect;
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	4413      	add	r3, r2
 8006842:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	899b      	ldrh	r3, [r3, #12]
 8006848:	461a      	mov	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006850:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d043      	beq.n	80068e0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	4413      	add	r3, r2
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	8952      	ldrh	r2, [r2, #10]
 8006862:	4293      	cmp	r3, r2
 8006864:	d905      	bls.n	8006872 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	895b      	ldrh	r3, [r3, #10]
 800686a:	461a      	mov	r2, r3
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	7858      	ldrb	r0, [r3, #1]
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	69f9      	ldr	r1, [r7, #28]
 800687c:	f7fd fa28 	bl	8003cd0 <disk_write>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d004      	beq.n	8006890 <f_write+0x1e2>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	755a      	strb	r2, [r3, #21]
 800688c:	2301      	movs	r3, #1
 800688e:	e09e      	b.n	80069ce <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	6a3a      	ldr	r2, [r7, #32]
 800689a:	429a      	cmp	r2, r3
 800689c:	d918      	bls.n	80068d0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1a      	ldr	r2, [r3, #32]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	8992      	ldrh	r2, [r2, #12]
 80068b0:	fb02 f303 	mul.w	r3, r2, r3
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	18d1      	adds	r1, r2, r3
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	899b      	ldrh	r3, [r3, #12]
 80068bc:	461a      	mov	r2, r3
 80068be:	f7fd fac7 	bl	8003e50 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	7d1b      	ldrb	r3, [r3, #20]
 80068c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	899b      	ldrh	r3, [r3, #12]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	fb02 f303 	mul.w	r3, r2, r3
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80068de:	e04b      	b.n	8006978 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d016      	beq.n	8006918 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d210      	bcs.n	8006918 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	7858      	ldrb	r0, [r3, #1]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006900:	2301      	movs	r3, #1
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	f7fd f9c4 	bl	8003c90 <disk_read>
 8006908:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	755a      	strb	r2, [r3, #21]
 8006914:	2301      	movs	r3, #1
 8006916:	e05a      	b.n	80069ce <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	899b      	ldrh	r3, [r3, #12]
 8006922:	4618      	mov	r0, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	8992      	ldrh	r2, [r2, #12]
 800692c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006930:	fb02 f201 	mul.w	r2, r2, r1
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	1ac3      	subs	r3, r0, r3
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800693a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	429a      	cmp	r2, r3
 8006940:	d901      	bls.n	8006946 <f_write+0x298>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	8992      	ldrh	r2, [r2, #12]
 8006954:	fbb3 f0f2 	udiv	r0, r3, r2
 8006958:	fb02 f200 	mul.w	r2, r2, r0
 800695c:	1a9b      	subs	r3, r3, r2
 800695e:	440b      	add	r3, r1
 8006960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006962:	69f9      	ldr	r1, [r7, #28]
 8006964:	4618      	mov	r0, r3
 8006966:	f7fd fa73 	bl	8003e50 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	7d1b      	ldrb	r3, [r3, #20]
 800696e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006972:	b2da      	uxtb	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006978:	69fa      	ldr	r2, [r7, #28]
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	4413      	add	r3, r2
 800697e:	61fb      	str	r3, [r7, #28]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	441a      	add	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	619a      	str	r2, [r3, #24]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	429a      	cmp	r2, r3
 8006996:	bf38      	it	cc
 8006998:	461a      	movcc	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	60da      	str	r2, [r3, #12]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	441a      	add	r2, r3
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f47f aeb5 	bne.w	8006724 <f_write+0x76>
 80069ba:	e000      	b.n	80069be <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80069bc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	7d1b      	ldrb	r3, [r3, #20]
 80069c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3730      	adds	r7, #48	; 0x30
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b086      	sub	sp, #24
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f107 0208 	add.w	r2, r7, #8
 80069e4:	4611      	mov	r1, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff faba 	bl	8005f60 <validate>
 80069ec:	4603      	mov	r3, r0
 80069ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d168      	bne.n	8006ac8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	7d1b      	ldrb	r3, [r3, #20]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d062      	beq.n	8006ac8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	7d1b      	ldrb	r3, [r3, #20]
 8006a06:	b25b      	sxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	da15      	bge.n	8006a38 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	7858      	ldrb	r0, [r3, #1]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1a      	ldr	r2, [r3, #32]
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f7fd f958 	bl	8003cd0 <disk_write>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <f_sync+0x54>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e04f      	b.n	8006aca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	7d1b      	ldrb	r3, [r3, #20]
 8006a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006a38:	f7fd f88c 	bl	8003b54 <get_fattime>
 8006a3c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	4619      	mov	r1, r3
 8006a46:	4610      	mov	r0, r2
 8006a48:	f7fd fc30 	bl	80042ac <move_window>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d138      	bne.n	8006ac8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	330b      	adds	r3, #11
 8006a60:	781a      	ldrb	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	330b      	adds	r3, #11
 8006a66:	f042 0220 	orr.w	r2, r2, #32
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	461a      	mov	r2, r3
 8006a78:	68f9      	ldr	r1, [r7, #12]
 8006a7a:	f7fe f9be 	bl	8004dfa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f103 021c 	add.w	r2, r3, #28
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	f7fd f9b4 	bl	8003df8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3316      	adds	r3, #22
 8006a94:	6939      	ldr	r1, [r7, #16]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fd f9ae 	bl	8003df8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3312      	adds	r3, #18
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fd f98d 	bl	8003dc2 <st_word>
					fs->wflag = 1;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fd fc29 	bl	8004308 <sync_fs>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	7d1b      	ldrb	r3, [r3, #20]
 8006abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff ff7b 	bl	80069d6 <f_sync>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d118      	bne.n	8006b1c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f107 0208 	add.w	r2, r7, #8
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff fa34 	bl	8005f60 <validate>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10c      	bne.n	8006b1c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fd fb2c 	bl	8004164 <dec_lock>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d102      	bne.n	8006b1c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b092      	sub	sp, #72	; 0x48
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006b32:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006b36:	f107 030c 	add.w	r3, r7, #12
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe ff87 	bl	8005a50 <find_volume>
 8006b42:	4603      	mov	r3, r0
 8006b44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006b48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f040 8099 	bne.w	8006c84 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	699a      	ldr	r2, [r3, #24]
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	3b02      	subs	r3, #2
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d804      	bhi.n	8006b70 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	e089      	b.n	8006c84 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d128      	bne.n	8006bce <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006b84:	f107 0314 	add.w	r3, r7, #20
 8006b88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fd fc4b 	bl	8004426 <get_fat>
 8006b90:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b98:	d103      	bne.n	8006ba2 <f_getfree+0x7c>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006ba0:	e063      	b.n	8006c6a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d103      	bne.n	8006bb0 <f_getfree+0x8a>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006bae:	e05c      	b.n	8006c6a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d102      	bne.n	8006bbc <f_getfree+0x96>
 8006bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb8:	3301      	adds	r3, #1
 8006bba:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d3db      	bcc.n	8006b84 <f_getfree+0x5e>
 8006bcc:	e04d      	b.n	8006c6a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bde:	2300      	movs	r3, #0
 8006be0:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d113      	bne.n	8006c10 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	63ba      	str	r2, [r7, #56]	; 0x38
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	f7fd fb5b 	bl	80042ac <move_window>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006bfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d131      	bne.n	8006c68 <f_getfree+0x142>
							p = fs->win;
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	3338      	adds	r3, #56	; 0x38
 8006c08:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	899b      	ldrh	r3, [r3, #12]
 8006c0e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d10f      	bne.n	8006c38 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c1a:	f7fd f897 	bl	8003d4c <ld_word>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d102      	bne.n	8006c2a <f_getfree+0x104>
 8006c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c26:	3301      	adds	r3, #1
 8006c28:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	3302      	adds	r3, #2
 8006c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	3b02      	subs	r3, #2
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
 8006c36:	e010      	b.n	8006c5a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c3a:	f7fd f89f 	bl	8003d7c <ld_dword>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d102      	bne.n	8006c4e <f_getfree+0x128>
 8006c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	3304      	adds	r3, #4
 8006c52:	633b      	str	r3, [r7, #48]	; 0x30
 8006c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c56:	3b04      	subs	r3, #4
 8006c58:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1bd      	bne.n	8006be2 <f_getfree+0xbc>
 8006c66:	e000      	b.n	8006c6a <f_getfree+0x144>
							if (res != FR_OK) break;
 8006c68:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c6e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c74:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	791a      	ldrb	r2, [r3, #4]
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	f042 0201 	orr.w	r2, r2, #1
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006c84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3748      	adds	r7, #72	; 0x48
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006ca4:	e01b      	b.n	8006cde <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006ca6:	f107 0310 	add.w	r3, r7, #16
 8006caa:	f107 0114 	add.w	r1, r7, #20
 8006cae:	2201      	movs	r2, #1
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff fb9d 	bl	80063f0 <f_read>
		if (rc != 1) break;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d116      	bne.n	8006cea <f_gets+0x5a>
		c = s[0];
 8006cbc:	7d3b      	ldrb	r3, [r7, #20]
 8006cbe:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	2b0d      	cmp	r3, #13
 8006cc4:	d100      	bne.n	8006cc8 <f_gets+0x38>
 8006cc6:	e00a      	b.n	8006cde <f_gets+0x4e>
		*p++ = c;
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	61ba      	str	r2, [r7, #24]
 8006cce:	7dfa      	ldrb	r2, [r7, #23]
 8006cd0:	701a      	strb	r2, [r3, #0]
		n++;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	2b0a      	cmp	r3, #10
 8006cdc:	d007      	beq.n	8006cee <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	dbde      	blt.n	8006ca6 <f_gets+0x16>
 8006ce8:	e002      	b.n	8006cf0 <f_gets+0x60>
		if (rc != 1) break;
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006cee:	bf00      	nop
	}
	*p = 0;
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <f_gets+0x70>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	e000      	b.n	8006d02 <f_gets+0x72>
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	2b0a      	cmp	r3, #10
 8006d1a:	d103      	bne.n	8006d24 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006d1c:	210d      	movs	r1, #13
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff fff3 	bl	8006d0a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	db25      	blt.n	8006d7c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	60fa      	str	r2, [r7, #12]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b3c      	cmp	r3, #60	; 0x3c
 8006d42:	dd12      	ble.n	8006d6a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6818      	ldr	r0, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f103 010c 	add.w	r1, r3, #12
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	f107 0308 	add.w	r3, r7, #8
 8006d54:	f7ff fcab 	bl	80066ae <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d101      	bne.n	8006d64 <putc_bfd+0x5a>
 8006d60:	2300      	movs	r3, #0
 8006d62:	e001      	b.n	8006d68 <putc_bfd+0x5e>
 8006d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d68:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	609a      	str	r2, [r3, #8]
 8006d7a:	e000      	b.n	8006d7e <putc_bfd+0x74>
	if (i < 0) return;
 8006d7c:	bf00      	nop
}
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	db16      	blt.n	8006dc2 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f103 010c 	add.w	r1, r3, #12
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f107 030c 	add.w	r3, r7, #12
 8006da8:	f7ff fc81 	bl	80066ae <f_write>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d107      	bne.n	8006dc2 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d102      	bne.n	8006dc2 <putc_flush+0x3e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	e001      	b.n	8006dc6 <putc_flush+0x42>
	return EOF;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	605a      	str	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	609a      	str	r2, [r3, #8]
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b096      	sub	sp, #88	; 0x58
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006e02:	f107 030c 	add.w	r3, r7, #12
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff ffe0 	bl	8006dce <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006e0e:	e009      	b.n	8006e24 <f_puts+0x2c>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	607a      	str	r2, [r7, #4]
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	f107 030c 	add.w	r3, r7, #12
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff ff73 	bl	8006d0a <putc_bfd>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1f1      	bne.n	8006e10 <f_puts+0x18>
	return putc_flush(&pb);
 8006e2c:	f107 030c 	add.w	r3, r7, #12
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff ffa7 	bl	8006d84 <putc_flush>
 8006e36:	4603      	mov	r3, r0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3758      	adds	r7, #88	; 0x58
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006e56:	4b1f      	ldr	r3, [pc, #124]	; (8006ed4 <FATFS_LinkDriverEx+0x94>)
 8006e58:	7a5b      	ldrb	r3, [r3, #9]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d131      	bne.n	8006ec4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e60:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <FATFS_LinkDriverEx+0x94>)
 8006e62:	7a5b      	ldrb	r3, [r3, #9]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	4b1a      	ldr	r3, [pc, #104]	; (8006ed4 <FATFS_LinkDriverEx+0x94>)
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006e6e:	4b19      	ldr	r3, [pc, #100]	; (8006ed4 <FATFS_LinkDriverEx+0x94>)
 8006e70:	7a5b      	ldrb	r3, [r3, #9]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	4a17      	ldr	r2, [pc, #92]	; (8006ed4 <FATFS_LinkDriverEx+0x94>)
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006e7e:	4b15      	ldr	r3, [pc, #84]	; (8006ed4 <FATFS_LinkDriverEx+0x94>)
 8006e80:	7a5b      	ldrb	r3, [r3, #9]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	461a      	mov	r2, r3
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <FATFS_LinkDriverEx+0x94>)
 8006e88:	4413      	add	r3, r2
 8006e8a:	79fa      	ldrb	r2, [r7, #7]
 8006e8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006e8e:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <FATFS_LinkDriverEx+0x94>)
 8006e90:	7a5b      	ldrb	r3, [r3, #9]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	b2d1      	uxtb	r1, r2
 8006e98:	4a0e      	ldr	r2, [pc, #56]	; (8006ed4 <FATFS_LinkDriverEx+0x94>)
 8006e9a:	7251      	strb	r1, [r2, #9]
 8006e9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006e9e:	7dbb      	ldrb	r3, [r7, #22]
 8006ea0:	3330      	adds	r3, #48	; 0x30
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	223a      	movs	r2, #58	; 0x3a
 8006eae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	3302      	adds	r3, #2
 8006eb4:	222f      	movs	r2, #47	; 0x2f
 8006eb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	3303      	adds	r3, #3
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	200002d4 	.word	0x200002d4

08006ed8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff ffaa 	bl	8006e40 <FATFS_LinkDriverEx>
 8006eec:	4603      	mov	r3, r0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	4603      	mov	r3, r0
 8006f00:	6039      	str	r1, [r7, #0]
 8006f02:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	2b7f      	cmp	r3, #127	; 0x7f
 8006f08:	d802      	bhi.n	8006f10 <ff_convert+0x18>
		c = chr;
 8006f0a:	88fb      	ldrh	r3, [r7, #6]
 8006f0c:	81fb      	strh	r3, [r7, #14]
 8006f0e:	e025      	b.n	8006f5c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00b      	beq.n	8006f2e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	2bff      	cmp	r3, #255	; 0xff
 8006f1a:	d805      	bhi.n	8006f28 <ff_convert+0x30>
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	3b80      	subs	r3, #128	; 0x80
 8006f20:	4a12      	ldr	r2, [pc, #72]	; (8006f6c <ff_convert+0x74>)
 8006f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f26:	e000      	b.n	8006f2a <ff_convert+0x32>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	81fb      	strh	r3, [r7, #14]
 8006f2c:	e016      	b.n	8006f5c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006f2e:	2300      	movs	r3, #0
 8006f30:	81fb      	strh	r3, [r7, #14]
 8006f32:	e009      	b.n	8006f48 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006f34:	89fb      	ldrh	r3, [r7, #14]
 8006f36:	4a0d      	ldr	r2, [pc, #52]	; (8006f6c <ff_convert+0x74>)
 8006f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f3c:	88fa      	ldrh	r2, [r7, #6]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d006      	beq.n	8006f50 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006f42:	89fb      	ldrh	r3, [r7, #14]
 8006f44:	3301      	adds	r3, #1
 8006f46:	81fb      	strh	r3, [r7, #14]
 8006f48:	89fb      	ldrh	r3, [r7, #14]
 8006f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f4c:	d9f2      	bls.n	8006f34 <ff_convert+0x3c>
 8006f4e:	e000      	b.n	8006f52 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006f50:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006f52:	89fb      	ldrh	r3, [r7, #14]
 8006f54:	3380      	adds	r3, #128	; 0x80
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006f5c:	89fb      	ldrh	r3, [r7, #14]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	08007c58 	.word	0x08007c58

08006f70 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006f7a:	88fb      	ldrh	r3, [r7, #6]
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f80:	d201      	bcs.n	8006f86 <ff_wtoupper+0x16>
 8006f82:	4b3e      	ldr	r3, [pc, #248]	; (800707c <ff_wtoupper+0x10c>)
 8006f84:	e000      	b.n	8006f88 <ff_wtoupper+0x18>
 8006f86:	4b3e      	ldr	r3, [pc, #248]	; (8007080 <ff_wtoupper+0x110>)
 8006f88:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	1c9a      	adds	r2, r3, #2
 8006f8e:	617a      	str	r2, [r7, #20]
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006f94:	8a7b      	ldrh	r3, [r7, #18]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d068      	beq.n	800706c <ff_wtoupper+0xfc>
 8006f9a:	88fa      	ldrh	r2, [r7, #6]
 8006f9c:	8a7b      	ldrh	r3, [r7, #18]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d364      	bcc.n	800706c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	1c9a      	adds	r2, r3, #2
 8006fa6:	617a      	str	r2, [r7, #20]
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	823b      	strh	r3, [r7, #16]
 8006fac:	8a3b      	ldrh	r3, [r7, #16]
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	81fb      	strh	r3, [r7, #14]
 8006fb2:	8a3b      	ldrh	r3, [r7, #16]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006fb8:	88fa      	ldrh	r2, [r7, #6]
 8006fba:	8a79      	ldrh	r1, [r7, #18]
 8006fbc:	8a3b      	ldrh	r3, [r7, #16]
 8006fbe:	440b      	add	r3, r1
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	da49      	bge.n	8007058 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006fc4:	89fb      	ldrh	r3, [r7, #14]
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d84f      	bhi.n	800706a <ff_wtoupper+0xfa>
 8006fca:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <ff_wtoupper+0x60>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006ff5 	.word	0x08006ff5
 8006fd4:	08007007 	.word	0x08007007
 8006fd8:	0800701d 	.word	0x0800701d
 8006fdc:	08007025 	.word	0x08007025
 8006fe0:	0800702d 	.word	0x0800702d
 8006fe4:	08007035 	.word	0x08007035
 8006fe8:	0800703d 	.word	0x0800703d
 8006fec:	08007045 	.word	0x08007045
 8006ff0:	0800704d 	.word	0x0800704d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006ff4:	88fa      	ldrh	r2, [r7, #6]
 8006ff6:	8a7b      	ldrh	r3, [r7, #18]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4413      	add	r3, r2
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	80fb      	strh	r3, [r7, #6]
 8007004:	e027      	b.n	8007056 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	8a7b      	ldrh	r3, [r7, #18]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	b29b      	uxth	r3, r3
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	b29b      	uxth	r3, r3
 8007014:	88fa      	ldrh	r2, [r7, #6]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	80fb      	strh	r3, [r7, #6]
 800701a:	e01c      	b.n	8007056 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800701c:	88fb      	ldrh	r3, [r7, #6]
 800701e:	3b10      	subs	r3, #16
 8007020:	80fb      	strh	r3, [r7, #6]
 8007022:	e018      	b.n	8007056 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	3b20      	subs	r3, #32
 8007028:	80fb      	strh	r3, [r7, #6]
 800702a:	e014      	b.n	8007056 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800702c:	88fb      	ldrh	r3, [r7, #6]
 800702e:	3b30      	subs	r3, #48	; 0x30
 8007030:	80fb      	strh	r3, [r7, #6]
 8007032:	e010      	b.n	8007056 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	3b1a      	subs	r3, #26
 8007038:	80fb      	strh	r3, [r7, #6]
 800703a:	e00c      	b.n	8007056 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	3308      	adds	r3, #8
 8007040:	80fb      	strh	r3, [r7, #6]
 8007042:	e008      	b.n	8007056 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007044:	88fb      	ldrh	r3, [r7, #6]
 8007046:	3b50      	subs	r3, #80	; 0x50
 8007048:	80fb      	strh	r3, [r7, #6]
 800704a:	e004      	b.n	8007056 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800704c:	88fb      	ldrh	r3, [r7, #6]
 800704e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007052:	80fb      	strh	r3, [r7, #6]
 8007054:	bf00      	nop
			}
			break;
 8007056:	e008      	b.n	800706a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007058:	89fb      	ldrh	r3, [r7, #14]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d195      	bne.n	8006f8a <ff_wtoupper+0x1a>
 800705e:	8a3b      	ldrh	r3, [r7, #16]
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4413      	add	r3, r2
 8007066:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007068:	e78f      	b.n	8006f8a <ff_wtoupper+0x1a>
			break;
 800706a:	bf00      	nop
	}

	return chr;
 800706c:	88fb      	ldrh	r3, [r7, #6]
}
 800706e:	4618      	mov	r0, r3
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	08007d58 	.word	0x08007d58
 8007080:	08007f4c 	.word	0x08007f4c

08007084 <__errno>:
 8007084:	4b01      	ldr	r3, [pc, #4]	; (800708c <__errno+0x8>)
 8007086:	6818      	ldr	r0, [r3, #0]
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	20000024 	.word	0x20000024

08007090 <__libc_init_array>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	4d0d      	ldr	r5, [pc, #52]	; (80070c8 <__libc_init_array+0x38>)
 8007094:	4c0d      	ldr	r4, [pc, #52]	; (80070cc <__libc_init_array+0x3c>)
 8007096:	1b64      	subs	r4, r4, r5
 8007098:	10a4      	asrs	r4, r4, #2
 800709a:	2600      	movs	r6, #0
 800709c:	42a6      	cmp	r6, r4
 800709e:	d109      	bne.n	80070b4 <__libc_init_array+0x24>
 80070a0:	4d0b      	ldr	r5, [pc, #44]	; (80070d0 <__libc_init_array+0x40>)
 80070a2:	4c0c      	ldr	r4, [pc, #48]	; (80070d4 <__libc_init_array+0x44>)
 80070a4:	f000 fc4e 	bl	8007944 <_init>
 80070a8:	1b64      	subs	r4, r4, r5
 80070aa:	10a4      	asrs	r4, r4, #2
 80070ac:	2600      	movs	r6, #0
 80070ae:	42a6      	cmp	r6, r4
 80070b0:	d105      	bne.n	80070be <__libc_init_array+0x2e>
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b8:	4798      	blx	r3
 80070ba:	3601      	adds	r6, #1
 80070bc:	e7ee      	b.n	800709c <__libc_init_array+0xc>
 80070be:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c2:	4798      	blx	r3
 80070c4:	3601      	adds	r6, #1
 80070c6:	e7f2      	b.n	80070ae <__libc_init_array+0x1e>
 80070c8:	08008044 	.word	0x08008044
 80070cc:	08008044 	.word	0x08008044
 80070d0:	08008044 	.word	0x08008044
 80070d4:	08008048 	.word	0x08008048

080070d8 <memset>:
 80070d8:	4402      	add	r2, r0
 80070da:	4603      	mov	r3, r0
 80070dc:	4293      	cmp	r3, r2
 80070de:	d100      	bne.n	80070e2 <memset+0xa>
 80070e0:	4770      	bx	lr
 80070e2:	f803 1b01 	strb.w	r1, [r3], #1
 80070e6:	e7f9      	b.n	80070dc <memset+0x4>

080070e8 <siprintf>:
 80070e8:	b40e      	push	{r1, r2, r3}
 80070ea:	b500      	push	{lr}
 80070ec:	b09c      	sub	sp, #112	; 0x70
 80070ee:	ab1d      	add	r3, sp, #116	; 0x74
 80070f0:	9002      	str	r0, [sp, #8]
 80070f2:	9006      	str	r0, [sp, #24]
 80070f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070f8:	4809      	ldr	r0, [pc, #36]	; (8007120 <siprintf+0x38>)
 80070fa:	9107      	str	r1, [sp, #28]
 80070fc:	9104      	str	r1, [sp, #16]
 80070fe:	4909      	ldr	r1, [pc, #36]	; (8007124 <siprintf+0x3c>)
 8007100:	f853 2b04 	ldr.w	r2, [r3], #4
 8007104:	9105      	str	r1, [sp, #20]
 8007106:	6800      	ldr	r0, [r0, #0]
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	a902      	add	r1, sp, #8
 800710c:	f000 f868 	bl	80071e0 <_svfiprintf_r>
 8007110:	9b02      	ldr	r3, [sp, #8]
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	b01c      	add	sp, #112	; 0x70
 8007118:	f85d eb04 	ldr.w	lr, [sp], #4
 800711c:	b003      	add	sp, #12
 800711e:	4770      	bx	lr
 8007120:	20000024 	.word	0x20000024
 8007124:	ffff0208 	.word	0xffff0208

08007128 <__ssputs_r>:
 8007128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800712c:	688e      	ldr	r6, [r1, #8]
 800712e:	429e      	cmp	r6, r3
 8007130:	4682      	mov	sl, r0
 8007132:	460c      	mov	r4, r1
 8007134:	4690      	mov	r8, r2
 8007136:	461f      	mov	r7, r3
 8007138:	d838      	bhi.n	80071ac <__ssputs_r+0x84>
 800713a:	898a      	ldrh	r2, [r1, #12]
 800713c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007140:	d032      	beq.n	80071a8 <__ssputs_r+0x80>
 8007142:	6825      	ldr	r5, [r4, #0]
 8007144:	6909      	ldr	r1, [r1, #16]
 8007146:	eba5 0901 	sub.w	r9, r5, r1
 800714a:	6965      	ldr	r5, [r4, #20]
 800714c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007154:	3301      	adds	r3, #1
 8007156:	444b      	add	r3, r9
 8007158:	106d      	asrs	r5, r5, #1
 800715a:	429d      	cmp	r5, r3
 800715c:	bf38      	it	cc
 800715e:	461d      	movcc	r5, r3
 8007160:	0553      	lsls	r3, r2, #21
 8007162:	d531      	bpl.n	80071c8 <__ssputs_r+0xa0>
 8007164:	4629      	mov	r1, r5
 8007166:	f000 fb47 	bl	80077f8 <_malloc_r>
 800716a:	4606      	mov	r6, r0
 800716c:	b950      	cbnz	r0, 8007184 <__ssputs_r+0x5c>
 800716e:	230c      	movs	r3, #12
 8007170:	f8ca 3000 	str.w	r3, [sl]
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800717a:	81a3      	strh	r3, [r4, #12]
 800717c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007184:	6921      	ldr	r1, [r4, #16]
 8007186:	464a      	mov	r2, r9
 8007188:	f000 fabe 	bl	8007708 <memcpy>
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	6126      	str	r6, [r4, #16]
 800719a:	6165      	str	r5, [r4, #20]
 800719c:	444e      	add	r6, r9
 800719e:	eba5 0509 	sub.w	r5, r5, r9
 80071a2:	6026      	str	r6, [r4, #0]
 80071a4:	60a5      	str	r5, [r4, #8]
 80071a6:	463e      	mov	r6, r7
 80071a8:	42be      	cmp	r6, r7
 80071aa:	d900      	bls.n	80071ae <__ssputs_r+0x86>
 80071ac:	463e      	mov	r6, r7
 80071ae:	4632      	mov	r2, r6
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	4641      	mov	r1, r8
 80071b4:	f000 fab6 	bl	8007724 <memmove>
 80071b8:	68a3      	ldr	r3, [r4, #8]
 80071ba:	6822      	ldr	r2, [r4, #0]
 80071bc:	1b9b      	subs	r3, r3, r6
 80071be:	4432      	add	r2, r6
 80071c0:	60a3      	str	r3, [r4, #8]
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	2000      	movs	r0, #0
 80071c6:	e7db      	b.n	8007180 <__ssputs_r+0x58>
 80071c8:	462a      	mov	r2, r5
 80071ca:	f000 fb6f 	bl	80078ac <_realloc_r>
 80071ce:	4606      	mov	r6, r0
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d1e1      	bne.n	8007198 <__ssputs_r+0x70>
 80071d4:	6921      	ldr	r1, [r4, #16]
 80071d6:	4650      	mov	r0, sl
 80071d8:	f000 fabe 	bl	8007758 <_free_r>
 80071dc:	e7c7      	b.n	800716e <__ssputs_r+0x46>
	...

080071e0 <_svfiprintf_r>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	4698      	mov	r8, r3
 80071e6:	898b      	ldrh	r3, [r1, #12]
 80071e8:	061b      	lsls	r3, r3, #24
 80071ea:	b09d      	sub	sp, #116	; 0x74
 80071ec:	4607      	mov	r7, r0
 80071ee:	460d      	mov	r5, r1
 80071f0:	4614      	mov	r4, r2
 80071f2:	d50e      	bpl.n	8007212 <_svfiprintf_r+0x32>
 80071f4:	690b      	ldr	r3, [r1, #16]
 80071f6:	b963      	cbnz	r3, 8007212 <_svfiprintf_r+0x32>
 80071f8:	2140      	movs	r1, #64	; 0x40
 80071fa:	f000 fafd 	bl	80077f8 <_malloc_r>
 80071fe:	6028      	str	r0, [r5, #0]
 8007200:	6128      	str	r0, [r5, #16]
 8007202:	b920      	cbnz	r0, 800720e <_svfiprintf_r+0x2e>
 8007204:	230c      	movs	r3, #12
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800720c:	e0d1      	b.n	80073b2 <_svfiprintf_r+0x1d2>
 800720e:	2340      	movs	r3, #64	; 0x40
 8007210:	616b      	str	r3, [r5, #20]
 8007212:	2300      	movs	r3, #0
 8007214:	9309      	str	r3, [sp, #36]	; 0x24
 8007216:	2320      	movs	r3, #32
 8007218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800721c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007220:	2330      	movs	r3, #48	; 0x30
 8007222:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073cc <_svfiprintf_r+0x1ec>
 8007226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800722a:	f04f 0901 	mov.w	r9, #1
 800722e:	4623      	mov	r3, r4
 8007230:	469a      	mov	sl, r3
 8007232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007236:	b10a      	cbz	r2, 800723c <_svfiprintf_r+0x5c>
 8007238:	2a25      	cmp	r2, #37	; 0x25
 800723a:	d1f9      	bne.n	8007230 <_svfiprintf_r+0x50>
 800723c:	ebba 0b04 	subs.w	fp, sl, r4
 8007240:	d00b      	beq.n	800725a <_svfiprintf_r+0x7a>
 8007242:	465b      	mov	r3, fp
 8007244:	4622      	mov	r2, r4
 8007246:	4629      	mov	r1, r5
 8007248:	4638      	mov	r0, r7
 800724a:	f7ff ff6d 	bl	8007128 <__ssputs_r>
 800724e:	3001      	adds	r0, #1
 8007250:	f000 80aa 	beq.w	80073a8 <_svfiprintf_r+0x1c8>
 8007254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007256:	445a      	add	r2, fp
 8007258:	9209      	str	r2, [sp, #36]	; 0x24
 800725a:	f89a 3000 	ldrb.w	r3, [sl]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 80a2 	beq.w	80073a8 <_svfiprintf_r+0x1c8>
 8007264:	2300      	movs	r3, #0
 8007266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800726a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800726e:	f10a 0a01 	add.w	sl, sl, #1
 8007272:	9304      	str	r3, [sp, #16]
 8007274:	9307      	str	r3, [sp, #28]
 8007276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800727a:	931a      	str	r3, [sp, #104]	; 0x68
 800727c:	4654      	mov	r4, sl
 800727e:	2205      	movs	r2, #5
 8007280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007284:	4851      	ldr	r0, [pc, #324]	; (80073cc <_svfiprintf_r+0x1ec>)
 8007286:	f7f8 ffbb 	bl	8000200 <memchr>
 800728a:	9a04      	ldr	r2, [sp, #16]
 800728c:	b9d8      	cbnz	r0, 80072c6 <_svfiprintf_r+0xe6>
 800728e:	06d0      	lsls	r0, r2, #27
 8007290:	bf44      	itt	mi
 8007292:	2320      	movmi	r3, #32
 8007294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007298:	0711      	lsls	r1, r2, #28
 800729a:	bf44      	itt	mi
 800729c:	232b      	movmi	r3, #43	; 0x2b
 800729e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a2:	f89a 3000 	ldrb.w	r3, [sl]
 80072a6:	2b2a      	cmp	r3, #42	; 0x2a
 80072a8:	d015      	beq.n	80072d6 <_svfiprintf_r+0xf6>
 80072aa:	9a07      	ldr	r2, [sp, #28]
 80072ac:	4654      	mov	r4, sl
 80072ae:	2000      	movs	r0, #0
 80072b0:	f04f 0c0a 	mov.w	ip, #10
 80072b4:	4621      	mov	r1, r4
 80072b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ba:	3b30      	subs	r3, #48	; 0x30
 80072bc:	2b09      	cmp	r3, #9
 80072be:	d94e      	bls.n	800735e <_svfiprintf_r+0x17e>
 80072c0:	b1b0      	cbz	r0, 80072f0 <_svfiprintf_r+0x110>
 80072c2:	9207      	str	r2, [sp, #28]
 80072c4:	e014      	b.n	80072f0 <_svfiprintf_r+0x110>
 80072c6:	eba0 0308 	sub.w	r3, r0, r8
 80072ca:	fa09 f303 	lsl.w	r3, r9, r3
 80072ce:	4313      	orrs	r3, r2
 80072d0:	9304      	str	r3, [sp, #16]
 80072d2:	46a2      	mov	sl, r4
 80072d4:	e7d2      	b.n	800727c <_svfiprintf_r+0x9c>
 80072d6:	9b03      	ldr	r3, [sp, #12]
 80072d8:	1d19      	adds	r1, r3, #4
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	9103      	str	r1, [sp, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	bfbb      	ittet	lt
 80072e2:	425b      	neglt	r3, r3
 80072e4:	f042 0202 	orrlt.w	r2, r2, #2
 80072e8:	9307      	strge	r3, [sp, #28]
 80072ea:	9307      	strlt	r3, [sp, #28]
 80072ec:	bfb8      	it	lt
 80072ee:	9204      	strlt	r2, [sp, #16]
 80072f0:	7823      	ldrb	r3, [r4, #0]
 80072f2:	2b2e      	cmp	r3, #46	; 0x2e
 80072f4:	d10c      	bne.n	8007310 <_svfiprintf_r+0x130>
 80072f6:	7863      	ldrb	r3, [r4, #1]
 80072f8:	2b2a      	cmp	r3, #42	; 0x2a
 80072fa:	d135      	bne.n	8007368 <_svfiprintf_r+0x188>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	1d1a      	adds	r2, r3, #4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	9203      	str	r2, [sp, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	bfb8      	it	lt
 8007308:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800730c:	3402      	adds	r4, #2
 800730e:	9305      	str	r3, [sp, #20]
 8007310:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073dc <_svfiprintf_r+0x1fc>
 8007314:	7821      	ldrb	r1, [r4, #0]
 8007316:	2203      	movs	r2, #3
 8007318:	4650      	mov	r0, sl
 800731a:	f7f8 ff71 	bl	8000200 <memchr>
 800731e:	b140      	cbz	r0, 8007332 <_svfiprintf_r+0x152>
 8007320:	2340      	movs	r3, #64	; 0x40
 8007322:	eba0 000a 	sub.w	r0, r0, sl
 8007326:	fa03 f000 	lsl.w	r0, r3, r0
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	4303      	orrs	r3, r0
 800732e:	3401      	adds	r4, #1
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007336:	4826      	ldr	r0, [pc, #152]	; (80073d0 <_svfiprintf_r+0x1f0>)
 8007338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800733c:	2206      	movs	r2, #6
 800733e:	f7f8 ff5f 	bl	8000200 <memchr>
 8007342:	2800      	cmp	r0, #0
 8007344:	d038      	beq.n	80073b8 <_svfiprintf_r+0x1d8>
 8007346:	4b23      	ldr	r3, [pc, #140]	; (80073d4 <_svfiprintf_r+0x1f4>)
 8007348:	bb1b      	cbnz	r3, 8007392 <_svfiprintf_r+0x1b2>
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	3307      	adds	r3, #7
 800734e:	f023 0307 	bic.w	r3, r3, #7
 8007352:	3308      	adds	r3, #8
 8007354:	9303      	str	r3, [sp, #12]
 8007356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007358:	4433      	add	r3, r6
 800735a:	9309      	str	r3, [sp, #36]	; 0x24
 800735c:	e767      	b.n	800722e <_svfiprintf_r+0x4e>
 800735e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007362:	460c      	mov	r4, r1
 8007364:	2001      	movs	r0, #1
 8007366:	e7a5      	b.n	80072b4 <_svfiprintf_r+0xd4>
 8007368:	2300      	movs	r3, #0
 800736a:	3401      	adds	r4, #1
 800736c:	9305      	str	r3, [sp, #20]
 800736e:	4619      	mov	r1, r3
 8007370:	f04f 0c0a 	mov.w	ip, #10
 8007374:	4620      	mov	r0, r4
 8007376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800737a:	3a30      	subs	r2, #48	; 0x30
 800737c:	2a09      	cmp	r2, #9
 800737e:	d903      	bls.n	8007388 <_svfiprintf_r+0x1a8>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0c5      	beq.n	8007310 <_svfiprintf_r+0x130>
 8007384:	9105      	str	r1, [sp, #20]
 8007386:	e7c3      	b.n	8007310 <_svfiprintf_r+0x130>
 8007388:	fb0c 2101 	mla	r1, ip, r1, r2
 800738c:	4604      	mov	r4, r0
 800738e:	2301      	movs	r3, #1
 8007390:	e7f0      	b.n	8007374 <_svfiprintf_r+0x194>
 8007392:	ab03      	add	r3, sp, #12
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	462a      	mov	r2, r5
 8007398:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <_svfiprintf_r+0x1f8>)
 800739a:	a904      	add	r1, sp, #16
 800739c:	4638      	mov	r0, r7
 800739e:	f3af 8000 	nop.w
 80073a2:	1c42      	adds	r2, r0, #1
 80073a4:	4606      	mov	r6, r0
 80073a6:	d1d6      	bne.n	8007356 <_svfiprintf_r+0x176>
 80073a8:	89ab      	ldrh	r3, [r5, #12]
 80073aa:	065b      	lsls	r3, r3, #25
 80073ac:	f53f af2c 	bmi.w	8007208 <_svfiprintf_r+0x28>
 80073b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073b2:	b01d      	add	sp, #116	; 0x74
 80073b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	ab03      	add	r3, sp, #12
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	462a      	mov	r2, r5
 80073be:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <_svfiprintf_r+0x1f8>)
 80073c0:	a904      	add	r1, sp, #16
 80073c2:	4638      	mov	r0, r7
 80073c4:	f000 f87a 	bl	80074bc <_printf_i>
 80073c8:	e7eb      	b.n	80073a2 <_svfiprintf_r+0x1c2>
 80073ca:	bf00      	nop
 80073cc:	08008008 	.word	0x08008008
 80073d0:	08008012 	.word	0x08008012
 80073d4:	00000000 	.word	0x00000000
 80073d8:	08007129 	.word	0x08007129
 80073dc:	0800800e 	.word	0x0800800e

080073e0 <_printf_common>:
 80073e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e4:	4616      	mov	r6, r2
 80073e6:	4699      	mov	r9, r3
 80073e8:	688a      	ldr	r2, [r1, #8]
 80073ea:	690b      	ldr	r3, [r1, #16]
 80073ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073f0:	4293      	cmp	r3, r2
 80073f2:	bfb8      	it	lt
 80073f4:	4613      	movlt	r3, r2
 80073f6:	6033      	str	r3, [r6, #0]
 80073f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073fc:	4607      	mov	r7, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	b10a      	cbz	r2, 8007406 <_printf_common+0x26>
 8007402:	3301      	adds	r3, #1
 8007404:	6033      	str	r3, [r6, #0]
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	0699      	lsls	r1, r3, #26
 800740a:	bf42      	ittt	mi
 800740c:	6833      	ldrmi	r3, [r6, #0]
 800740e:	3302      	addmi	r3, #2
 8007410:	6033      	strmi	r3, [r6, #0]
 8007412:	6825      	ldr	r5, [r4, #0]
 8007414:	f015 0506 	ands.w	r5, r5, #6
 8007418:	d106      	bne.n	8007428 <_printf_common+0x48>
 800741a:	f104 0a19 	add.w	sl, r4, #25
 800741e:	68e3      	ldr	r3, [r4, #12]
 8007420:	6832      	ldr	r2, [r6, #0]
 8007422:	1a9b      	subs	r3, r3, r2
 8007424:	42ab      	cmp	r3, r5
 8007426:	dc26      	bgt.n	8007476 <_printf_common+0x96>
 8007428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800742c:	1e13      	subs	r3, r2, #0
 800742e:	6822      	ldr	r2, [r4, #0]
 8007430:	bf18      	it	ne
 8007432:	2301      	movne	r3, #1
 8007434:	0692      	lsls	r2, r2, #26
 8007436:	d42b      	bmi.n	8007490 <_printf_common+0xb0>
 8007438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800743c:	4649      	mov	r1, r9
 800743e:	4638      	mov	r0, r7
 8007440:	47c0      	blx	r8
 8007442:	3001      	adds	r0, #1
 8007444:	d01e      	beq.n	8007484 <_printf_common+0xa4>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	68e5      	ldr	r5, [r4, #12]
 800744a:	6832      	ldr	r2, [r6, #0]
 800744c:	f003 0306 	and.w	r3, r3, #6
 8007450:	2b04      	cmp	r3, #4
 8007452:	bf08      	it	eq
 8007454:	1aad      	subeq	r5, r5, r2
 8007456:	68a3      	ldr	r3, [r4, #8]
 8007458:	6922      	ldr	r2, [r4, #16]
 800745a:	bf0c      	ite	eq
 800745c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007460:	2500      	movne	r5, #0
 8007462:	4293      	cmp	r3, r2
 8007464:	bfc4      	itt	gt
 8007466:	1a9b      	subgt	r3, r3, r2
 8007468:	18ed      	addgt	r5, r5, r3
 800746a:	2600      	movs	r6, #0
 800746c:	341a      	adds	r4, #26
 800746e:	42b5      	cmp	r5, r6
 8007470:	d11a      	bne.n	80074a8 <_printf_common+0xc8>
 8007472:	2000      	movs	r0, #0
 8007474:	e008      	b.n	8007488 <_printf_common+0xa8>
 8007476:	2301      	movs	r3, #1
 8007478:	4652      	mov	r2, sl
 800747a:	4649      	mov	r1, r9
 800747c:	4638      	mov	r0, r7
 800747e:	47c0      	blx	r8
 8007480:	3001      	adds	r0, #1
 8007482:	d103      	bne.n	800748c <_printf_common+0xac>
 8007484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800748c:	3501      	adds	r5, #1
 800748e:	e7c6      	b.n	800741e <_printf_common+0x3e>
 8007490:	18e1      	adds	r1, r4, r3
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	2030      	movs	r0, #48	; 0x30
 8007496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800749a:	4422      	add	r2, r4
 800749c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074a4:	3302      	adds	r3, #2
 80074a6:	e7c7      	b.n	8007438 <_printf_common+0x58>
 80074a8:	2301      	movs	r3, #1
 80074aa:	4622      	mov	r2, r4
 80074ac:	4649      	mov	r1, r9
 80074ae:	4638      	mov	r0, r7
 80074b0:	47c0      	blx	r8
 80074b2:	3001      	adds	r0, #1
 80074b4:	d0e6      	beq.n	8007484 <_printf_common+0xa4>
 80074b6:	3601      	adds	r6, #1
 80074b8:	e7d9      	b.n	800746e <_printf_common+0x8e>
	...

080074bc <_printf_i>:
 80074bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	460c      	mov	r4, r1
 80074c2:	4691      	mov	r9, r2
 80074c4:	7e27      	ldrb	r7, [r4, #24]
 80074c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074c8:	2f78      	cmp	r7, #120	; 0x78
 80074ca:	4680      	mov	r8, r0
 80074cc:	469a      	mov	sl, r3
 80074ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d2:	d807      	bhi.n	80074e4 <_printf_i+0x28>
 80074d4:	2f62      	cmp	r7, #98	; 0x62
 80074d6:	d80a      	bhi.n	80074ee <_printf_i+0x32>
 80074d8:	2f00      	cmp	r7, #0
 80074da:	f000 80d8 	beq.w	800768e <_printf_i+0x1d2>
 80074de:	2f58      	cmp	r7, #88	; 0x58
 80074e0:	f000 80a3 	beq.w	800762a <_printf_i+0x16e>
 80074e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074ec:	e03a      	b.n	8007564 <_printf_i+0xa8>
 80074ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074f2:	2b15      	cmp	r3, #21
 80074f4:	d8f6      	bhi.n	80074e4 <_printf_i+0x28>
 80074f6:	a001      	add	r0, pc, #4	; (adr r0, 80074fc <_printf_i+0x40>)
 80074f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80074fc:	08007555 	.word	0x08007555
 8007500:	08007569 	.word	0x08007569
 8007504:	080074e5 	.word	0x080074e5
 8007508:	080074e5 	.word	0x080074e5
 800750c:	080074e5 	.word	0x080074e5
 8007510:	080074e5 	.word	0x080074e5
 8007514:	08007569 	.word	0x08007569
 8007518:	080074e5 	.word	0x080074e5
 800751c:	080074e5 	.word	0x080074e5
 8007520:	080074e5 	.word	0x080074e5
 8007524:	080074e5 	.word	0x080074e5
 8007528:	08007675 	.word	0x08007675
 800752c:	08007599 	.word	0x08007599
 8007530:	08007657 	.word	0x08007657
 8007534:	080074e5 	.word	0x080074e5
 8007538:	080074e5 	.word	0x080074e5
 800753c:	08007697 	.word	0x08007697
 8007540:	080074e5 	.word	0x080074e5
 8007544:	08007599 	.word	0x08007599
 8007548:	080074e5 	.word	0x080074e5
 800754c:	080074e5 	.word	0x080074e5
 8007550:	0800765f 	.word	0x0800765f
 8007554:	680b      	ldr	r3, [r1, #0]
 8007556:	1d1a      	adds	r2, r3, #4
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	600a      	str	r2, [r1, #0]
 800755c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007564:	2301      	movs	r3, #1
 8007566:	e0a3      	b.n	80076b0 <_printf_i+0x1f4>
 8007568:	6825      	ldr	r5, [r4, #0]
 800756a:	6808      	ldr	r0, [r1, #0]
 800756c:	062e      	lsls	r6, r5, #24
 800756e:	f100 0304 	add.w	r3, r0, #4
 8007572:	d50a      	bpl.n	800758a <_printf_i+0xce>
 8007574:	6805      	ldr	r5, [r0, #0]
 8007576:	600b      	str	r3, [r1, #0]
 8007578:	2d00      	cmp	r5, #0
 800757a:	da03      	bge.n	8007584 <_printf_i+0xc8>
 800757c:	232d      	movs	r3, #45	; 0x2d
 800757e:	426d      	negs	r5, r5
 8007580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007584:	485e      	ldr	r0, [pc, #376]	; (8007700 <_printf_i+0x244>)
 8007586:	230a      	movs	r3, #10
 8007588:	e019      	b.n	80075be <_printf_i+0x102>
 800758a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800758e:	6805      	ldr	r5, [r0, #0]
 8007590:	600b      	str	r3, [r1, #0]
 8007592:	bf18      	it	ne
 8007594:	b22d      	sxthne	r5, r5
 8007596:	e7ef      	b.n	8007578 <_printf_i+0xbc>
 8007598:	680b      	ldr	r3, [r1, #0]
 800759a:	6825      	ldr	r5, [r4, #0]
 800759c:	1d18      	adds	r0, r3, #4
 800759e:	6008      	str	r0, [r1, #0]
 80075a0:	0628      	lsls	r0, r5, #24
 80075a2:	d501      	bpl.n	80075a8 <_printf_i+0xec>
 80075a4:	681d      	ldr	r5, [r3, #0]
 80075a6:	e002      	b.n	80075ae <_printf_i+0xf2>
 80075a8:	0669      	lsls	r1, r5, #25
 80075aa:	d5fb      	bpl.n	80075a4 <_printf_i+0xe8>
 80075ac:	881d      	ldrh	r5, [r3, #0]
 80075ae:	4854      	ldr	r0, [pc, #336]	; (8007700 <_printf_i+0x244>)
 80075b0:	2f6f      	cmp	r7, #111	; 0x6f
 80075b2:	bf0c      	ite	eq
 80075b4:	2308      	moveq	r3, #8
 80075b6:	230a      	movne	r3, #10
 80075b8:	2100      	movs	r1, #0
 80075ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075be:	6866      	ldr	r6, [r4, #4]
 80075c0:	60a6      	str	r6, [r4, #8]
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	bfa2      	ittt	ge
 80075c6:	6821      	ldrge	r1, [r4, #0]
 80075c8:	f021 0104 	bicge.w	r1, r1, #4
 80075cc:	6021      	strge	r1, [r4, #0]
 80075ce:	b90d      	cbnz	r5, 80075d4 <_printf_i+0x118>
 80075d0:	2e00      	cmp	r6, #0
 80075d2:	d04d      	beq.n	8007670 <_printf_i+0x1b4>
 80075d4:	4616      	mov	r6, r2
 80075d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80075da:	fb03 5711 	mls	r7, r3, r1, r5
 80075de:	5dc7      	ldrb	r7, [r0, r7]
 80075e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075e4:	462f      	mov	r7, r5
 80075e6:	42bb      	cmp	r3, r7
 80075e8:	460d      	mov	r5, r1
 80075ea:	d9f4      	bls.n	80075d6 <_printf_i+0x11a>
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d10b      	bne.n	8007608 <_printf_i+0x14c>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	07df      	lsls	r7, r3, #31
 80075f4:	d508      	bpl.n	8007608 <_printf_i+0x14c>
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	6861      	ldr	r1, [r4, #4]
 80075fa:	4299      	cmp	r1, r3
 80075fc:	bfde      	ittt	le
 80075fe:	2330      	movle	r3, #48	; 0x30
 8007600:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007604:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007608:	1b92      	subs	r2, r2, r6
 800760a:	6122      	str	r2, [r4, #16]
 800760c:	f8cd a000 	str.w	sl, [sp]
 8007610:	464b      	mov	r3, r9
 8007612:	aa03      	add	r2, sp, #12
 8007614:	4621      	mov	r1, r4
 8007616:	4640      	mov	r0, r8
 8007618:	f7ff fee2 	bl	80073e0 <_printf_common>
 800761c:	3001      	adds	r0, #1
 800761e:	d14c      	bne.n	80076ba <_printf_i+0x1fe>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007624:	b004      	add	sp, #16
 8007626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762a:	4835      	ldr	r0, [pc, #212]	; (8007700 <_printf_i+0x244>)
 800762c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	680e      	ldr	r6, [r1, #0]
 8007634:	061f      	lsls	r7, r3, #24
 8007636:	f856 5b04 	ldr.w	r5, [r6], #4
 800763a:	600e      	str	r6, [r1, #0]
 800763c:	d514      	bpl.n	8007668 <_printf_i+0x1ac>
 800763e:	07d9      	lsls	r1, r3, #31
 8007640:	bf44      	itt	mi
 8007642:	f043 0320 	orrmi.w	r3, r3, #32
 8007646:	6023      	strmi	r3, [r4, #0]
 8007648:	b91d      	cbnz	r5, 8007652 <_printf_i+0x196>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	f023 0320 	bic.w	r3, r3, #32
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	2310      	movs	r3, #16
 8007654:	e7b0      	b.n	80075b8 <_printf_i+0xfc>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	f043 0320 	orr.w	r3, r3, #32
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	2378      	movs	r3, #120	; 0x78
 8007660:	4828      	ldr	r0, [pc, #160]	; (8007704 <_printf_i+0x248>)
 8007662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007666:	e7e3      	b.n	8007630 <_printf_i+0x174>
 8007668:	065e      	lsls	r6, r3, #25
 800766a:	bf48      	it	mi
 800766c:	b2ad      	uxthmi	r5, r5
 800766e:	e7e6      	b.n	800763e <_printf_i+0x182>
 8007670:	4616      	mov	r6, r2
 8007672:	e7bb      	b.n	80075ec <_printf_i+0x130>
 8007674:	680b      	ldr	r3, [r1, #0]
 8007676:	6826      	ldr	r6, [r4, #0]
 8007678:	6960      	ldr	r0, [r4, #20]
 800767a:	1d1d      	adds	r5, r3, #4
 800767c:	600d      	str	r5, [r1, #0]
 800767e:	0635      	lsls	r5, r6, #24
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	d501      	bpl.n	8007688 <_printf_i+0x1cc>
 8007684:	6018      	str	r0, [r3, #0]
 8007686:	e002      	b.n	800768e <_printf_i+0x1d2>
 8007688:	0671      	lsls	r1, r6, #25
 800768a:	d5fb      	bpl.n	8007684 <_printf_i+0x1c8>
 800768c:	8018      	strh	r0, [r3, #0]
 800768e:	2300      	movs	r3, #0
 8007690:	6123      	str	r3, [r4, #16]
 8007692:	4616      	mov	r6, r2
 8007694:	e7ba      	b.n	800760c <_printf_i+0x150>
 8007696:	680b      	ldr	r3, [r1, #0]
 8007698:	1d1a      	adds	r2, r3, #4
 800769a:	600a      	str	r2, [r1, #0]
 800769c:	681e      	ldr	r6, [r3, #0]
 800769e:	6862      	ldr	r2, [r4, #4]
 80076a0:	2100      	movs	r1, #0
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7f8 fdac 	bl	8000200 <memchr>
 80076a8:	b108      	cbz	r0, 80076ae <_printf_i+0x1f2>
 80076aa:	1b80      	subs	r0, r0, r6
 80076ac:	6060      	str	r0, [r4, #4]
 80076ae:	6863      	ldr	r3, [r4, #4]
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	2300      	movs	r3, #0
 80076b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b8:	e7a8      	b.n	800760c <_printf_i+0x150>
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	4632      	mov	r2, r6
 80076be:	4649      	mov	r1, r9
 80076c0:	4640      	mov	r0, r8
 80076c2:	47d0      	blx	sl
 80076c4:	3001      	adds	r0, #1
 80076c6:	d0ab      	beq.n	8007620 <_printf_i+0x164>
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	079b      	lsls	r3, r3, #30
 80076cc:	d413      	bmi.n	80076f6 <_printf_i+0x23a>
 80076ce:	68e0      	ldr	r0, [r4, #12]
 80076d0:	9b03      	ldr	r3, [sp, #12]
 80076d2:	4298      	cmp	r0, r3
 80076d4:	bfb8      	it	lt
 80076d6:	4618      	movlt	r0, r3
 80076d8:	e7a4      	b.n	8007624 <_printf_i+0x168>
 80076da:	2301      	movs	r3, #1
 80076dc:	4632      	mov	r2, r6
 80076de:	4649      	mov	r1, r9
 80076e0:	4640      	mov	r0, r8
 80076e2:	47d0      	blx	sl
 80076e4:	3001      	adds	r0, #1
 80076e6:	d09b      	beq.n	8007620 <_printf_i+0x164>
 80076e8:	3501      	adds	r5, #1
 80076ea:	68e3      	ldr	r3, [r4, #12]
 80076ec:	9903      	ldr	r1, [sp, #12]
 80076ee:	1a5b      	subs	r3, r3, r1
 80076f0:	42ab      	cmp	r3, r5
 80076f2:	dcf2      	bgt.n	80076da <_printf_i+0x21e>
 80076f4:	e7eb      	b.n	80076ce <_printf_i+0x212>
 80076f6:	2500      	movs	r5, #0
 80076f8:	f104 0619 	add.w	r6, r4, #25
 80076fc:	e7f5      	b.n	80076ea <_printf_i+0x22e>
 80076fe:	bf00      	nop
 8007700:	08008019 	.word	0x08008019
 8007704:	0800802a 	.word	0x0800802a

08007708 <memcpy>:
 8007708:	440a      	add	r2, r1
 800770a:	4291      	cmp	r1, r2
 800770c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007710:	d100      	bne.n	8007714 <memcpy+0xc>
 8007712:	4770      	bx	lr
 8007714:	b510      	push	{r4, lr}
 8007716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800771a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800771e:	4291      	cmp	r1, r2
 8007720:	d1f9      	bne.n	8007716 <memcpy+0xe>
 8007722:	bd10      	pop	{r4, pc}

08007724 <memmove>:
 8007724:	4288      	cmp	r0, r1
 8007726:	b510      	push	{r4, lr}
 8007728:	eb01 0402 	add.w	r4, r1, r2
 800772c:	d902      	bls.n	8007734 <memmove+0x10>
 800772e:	4284      	cmp	r4, r0
 8007730:	4623      	mov	r3, r4
 8007732:	d807      	bhi.n	8007744 <memmove+0x20>
 8007734:	1e43      	subs	r3, r0, #1
 8007736:	42a1      	cmp	r1, r4
 8007738:	d008      	beq.n	800774c <memmove+0x28>
 800773a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800773e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007742:	e7f8      	b.n	8007736 <memmove+0x12>
 8007744:	4402      	add	r2, r0
 8007746:	4601      	mov	r1, r0
 8007748:	428a      	cmp	r2, r1
 800774a:	d100      	bne.n	800774e <memmove+0x2a>
 800774c:	bd10      	pop	{r4, pc}
 800774e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007756:	e7f7      	b.n	8007748 <memmove+0x24>

08007758 <_free_r>:
 8007758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800775a:	2900      	cmp	r1, #0
 800775c:	d048      	beq.n	80077f0 <_free_r+0x98>
 800775e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007762:	9001      	str	r0, [sp, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f1a1 0404 	sub.w	r4, r1, #4
 800776a:	bfb8      	it	lt
 800776c:	18e4      	addlt	r4, r4, r3
 800776e:	f000 f8d3 	bl	8007918 <__malloc_lock>
 8007772:	4a20      	ldr	r2, [pc, #128]	; (80077f4 <_free_r+0x9c>)
 8007774:	9801      	ldr	r0, [sp, #4]
 8007776:	6813      	ldr	r3, [r2, #0]
 8007778:	4615      	mov	r5, r2
 800777a:	b933      	cbnz	r3, 800778a <_free_r+0x32>
 800777c:	6063      	str	r3, [r4, #4]
 800777e:	6014      	str	r4, [r2, #0]
 8007780:	b003      	add	sp, #12
 8007782:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007786:	f000 b8cd 	b.w	8007924 <__malloc_unlock>
 800778a:	42a3      	cmp	r3, r4
 800778c:	d90b      	bls.n	80077a6 <_free_r+0x4e>
 800778e:	6821      	ldr	r1, [r4, #0]
 8007790:	1862      	adds	r2, r4, r1
 8007792:	4293      	cmp	r3, r2
 8007794:	bf04      	itt	eq
 8007796:	681a      	ldreq	r2, [r3, #0]
 8007798:	685b      	ldreq	r3, [r3, #4]
 800779a:	6063      	str	r3, [r4, #4]
 800779c:	bf04      	itt	eq
 800779e:	1852      	addeq	r2, r2, r1
 80077a0:	6022      	streq	r2, [r4, #0]
 80077a2:	602c      	str	r4, [r5, #0]
 80077a4:	e7ec      	b.n	8007780 <_free_r+0x28>
 80077a6:	461a      	mov	r2, r3
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	b10b      	cbz	r3, 80077b0 <_free_r+0x58>
 80077ac:	42a3      	cmp	r3, r4
 80077ae:	d9fa      	bls.n	80077a6 <_free_r+0x4e>
 80077b0:	6811      	ldr	r1, [r2, #0]
 80077b2:	1855      	adds	r5, r2, r1
 80077b4:	42a5      	cmp	r5, r4
 80077b6:	d10b      	bne.n	80077d0 <_free_r+0x78>
 80077b8:	6824      	ldr	r4, [r4, #0]
 80077ba:	4421      	add	r1, r4
 80077bc:	1854      	adds	r4, r2, r1
 80077be:	42a3      	cmp	r3, r4
 80077c0:	6011      	str	r1, [r2, #0]
 80077c2:	d1dd      	bne.n	8007780 <_free_r+0x28>
 80077c4:	681c      	ldr	r4, [r3, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	6053      	str	r3, [r2, #4]
 80077ca:	4421      	add	r1, r4
 80077cc:	6011      	str	r1, [r2, #0]
 80077ce:	e7d7      	b.n	8007780 <_free_r+0x28>
 80077d0:	d902      	bls.n	80077d8 <_free_r+0x80>
 80077d2:	230c      	movs	r3, #12
 80077d4:	6003      	str	r3, [r0, #0]
 80077d6:	e7d3      	b.n	8007780 <_free_r+0x28>
 80077d8:	6825      	ldr	r5, [r4, #0]
 80077da:	1961      	adds	r1, r4, r5
 80077dc:	428b      	cmp	r3, r1
 80077de:	bf04      	itt	eq
 80077e0:	6819      	ldreq	r1, [r3, #0]
 80077e2:	685b      	ldreq	r3, [r3, #4]
 80077e4:	6063      	str	r3, [r4, #4]
 80077e6:	bf04      	itt	eq
 80077e8:	1949      	addeq	r1, r1, r5
 80077ea:	6021      	streq	r1, [r4, #0]
 80077ec:	6054      	str	r4, [r2, #4]
 80077ee:	e7c7      	b.n	8007780 <_free_r+0x28>
 80077f0:	b003      	add	sp, #12
 80077f2:	bd30      	pop	{r4, r5, pc}
 80077f4:	200002e0 	.word	0x200002e0

080077f8 <_malloc_r>:
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	1ccd      	adds	r5, r1, #3
 80077fc:	f025 0503 	bic.w	r5, r5, #3
 8007800:	3508      	adds	r5, #8
 8007802:	2d0c      	cmp	r5, #12
 8007804:	bf38      	it	cc
 8007806:	250c      	movcc	r5, #12
 8007808:	2d00      	cmp	r5, #0
 800780a:	4606      	mov	r6, r0
 800780c:	db01      	blt.n	8007812 <_malloc_r+0x1a>
 800780e:	42a9      	cmp	r1, r5
 8007810:	d903      	bls.n	800781a <_malloc_r+0x22>
 8007812:	230c      	movs	r3, #12
 8007814:	6033      	str	r3, [r6, #0]
 8007816:	2000      	movs	r0, #0
 8007818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800781a:	f000 f87d 	bl	8007918 <__malloc_lock>
 800781e:	4921      	ldr	r1, [pc, #132]	; (80078a4 <_malloc_r+0xac>)
 8007820:	680a      	ldr	r2, [r1, #0]
 8007822:	4614      	mov	r4, r2
 8007824:	b99c      	cbnz	r4, 800784e <_malloc_r+0x56>
 8007826:	4f20      	ldr	r7, [pc, #128]	; (80078a8 <_malloc_r+0xb0>)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	b923      	cbnz	r3, 8007836 <_malloc_r+0x3e>
 800782c:	4621      	mov	r1, r4
 800782e:	4630      	mov	r0, r6
 8007830:	f000 f862 	bl	80078f8 <_sbrk_r>
 8007834:	6038      	str	r0, [r7, #0]
 8007836:	4629      	mov	r1, r5
 8007838:	4630      	mov	r0, r6
 800783a:	f000 f85d 	bl	80078f8 <_sbrk_r>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	d123      	bne.n	800788a <_malloc_r+0x92>
 8007842:	230c      	movs	r3, #12
 8007844:	6033      	str	r3, [r6, #0]
 8007846:	4630      	mov	r0, r6
 8007848:	f000 f86c 	bl	8007924 <__malloc_unlock>
 800784c:	e7e3      	b.n	8007816 <_malloc_r+0x1e>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	1b5b      	subs	r3, r3, r5
 8007852:	d417      	bmi.n	8007884 <_malloc_r+0x8c>
 8007854:	2b0b      	cmp	r3, #11
 8007856:	d903      	bls.n	8007860 <_malloc_r+0x68>
 8007858:	6023      	str	r3, [r4, #0]
 800785a:	441c      	add	r4, r3
 800785c:	6025      	str	r5, [r4, #0]
 800785e:	e004      	b.n	800786a <_malloc_r+0x72>
 8007860:	6863      	ldr	r3, [r4, #4]
 8007862:	42a2      	cmp	r2, r4
 8007864:	bf0c      	ite	eq
 8007866:	600b      	streq	r3, [r1, #0]
 8007868:	6053      	strne	r3, [r2, #4]
 800786a:	4630      	mov	r0, r6
 800786c:	f000 f85a 	bl	8007924 <__malloc_unlock>
 8007870:	f104 000b 	add.w	r0, r4, #11
 8007874:	1d23      	adds	r3, r4, #4
 8007876:	f020 0007 	bic.w	r0, r0, #7
 800787a:	1ac2      	subs	r2, r0, r3
 800787c:	d0cc      	beq.n	8007818 <_malloc_r+0x20>
 800787e:	1a1b      	subs	r3, r3, r0
 8007880:	50a3      	str	r3, [r4, r2]
 8007882:	e7c9      	b.n	8007818 <_malloc_r+0x20>
 8007884:	4622      	mov	r2, r4
 8007886:	6864      	ldr	r4, [r4, #4]
 8007888:	e7cc      	b.n	8007824 <_malloc_r+0x2c>
 800788a:	1cc4      	adds	r4, r0, #3
 800788c:	f024 0403 	bic.w	r4, r4, #3
 8007890:	42a0      	cmp	r0, r4
 8007892:	d0e3      	beq.n	800785c <_malloc_r+0x64>
 8007894:	1a21      	subs	r1, r4, r0
 8007896:	4630      	mov	r0, r6
 8007898:	f000 f82e 	bl	80078f8 <_sbrk_r>
 800789c:	3001      	adds	r0, #1
 800789e:	d1dd      	bne.n	800785c <_malloc_r+0x64>
 80078a0:	e7cf      	b.n	8007842 <_malloc_r+0x4a>
 80078a2:	bf00      	nop
 80078a4:	200002e0 	.word	0x200002e0
 80078a8:	200002e4 	.word	0x200002e4

080078ac <_realloc_r>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	4607      	mov	r7, r0
 80078b0:	4614      	mov	r4, r2
 80078b2:	460e      	mov	r6, r1
 80078b4:	b921      	cbnz	r1, 80078c0 <_realloc_r+0x14>
 80078b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078ba:	4611      	mov	r1, r2
 80078bc:	f7ff bf9c 	b.w	80077f8 <_malloc_r>
 80078c0:	b922      	cbnz	r2, 80078cc <_realloc_r+0x20>
 80078c2:	f7ff ff49 	bl	8007758 <_free_r>
 80078c6:	4625      	mov	r5, r4
 80078c8:	4628      	mov	r0, r5
 80078ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078cc:	f000 f830 	bl	8007930 <_malloc_usable_size_r>
 80078d0:	42a0      	cmp	r0, r4
 80078d2:	d20f      	bcs.n	80078f4 <_realloc_r+0x48>
 80078d4:	4621      	mov	r1, r4
 80078d6:	4638      	mov	r0, r7
 80078d8:	f7ff ff8e 	bl	80077f8 <_malloc_r>
 80078dc:	4605      	mov	r5, r0
 80078de:	2800      	cmp	r0, #0
 80078e0:	d0f2      	beq.n	80078c8 <_realloc_r+0x1c>
 80078e2:	4631      	mov	r1, r6
 80078e4:	4622      	mov	r2, r4
 80078e6:	f7ff ff0f 	bl	8007708 <memcpy>
 80078ea:	4631      	mov	r1, r6
 80078ec:	4638      	mov	r0, r7
 80078ee:	f7ff ff33 	bl	8007758 <_free_r>
 80078f2:	e7e9      	b.n	80078c8 <_realloc_r+0x1c>
 80078f4:	4635      	mov	r5, r6
 80078f6:	e7e7      	b.n	80078c8 <_realloc_r+0x1c>

080078f8 <_sbrk_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4d06      	ldr	r5, [pc, #24]	; (8007914 <_sbrk_r+0x1c>)
 80078fc:	2300      	movs	r3, #0
 80078fe:	4604      	mov	r4, r0
 8007900:	4608      	mov	r0, r1
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	f7fa f9c4 	bl	8001c90 <_sbrk>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d102      	bne.n	8007912 <_sbrk_r+0x1a>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	b103      	cbz	r3, 8007912 <_sbrk_r+0x1a>
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	200044dc 	.word	0x200044dc

08007918 <__malloc_lock>:
 8007918:	4801      	ldr	r0, [pc, #4]	; (8007920 <__malloc_lock+0x8>)
 800791a:	f000 b811 	b.w	8007940 <__retarget_lock_acquire_recursive>
 800791e:	bf00      	nop
 8007920:	200044e4 	.word	0x200044e4

08007924 <__malloc_unlock>:
 8007924:	4801      	ldr	r0, [pc, #4]	; (800792c <__malloc_unlock+0x8>)
 8007926:	f000 b80c 	b.w	8007942 <__retarget_lock_release_recursive>
 800792a:	bf00      	nop
 800792c:	200044e4 	.word	0x200044e4

08007930 <_malloc_usable_size_r>:
 8007930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007934:	1f18      	subs	r0, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	bfbc      	itt	lt
 800793a:	580b      	ldrlt	r3, [r1, r0]
 800793c:	18c0      	addlt	r0, r0, r3
 800793e:	4770      	bx	lr

08007940 <__retarget_lock_acquire_recursive>:
 8007940:	4770      	bx	lr

08007942 <__retarget_lock_release_recursive>:
 8007942:	4770      	bx	lr

08007944 <_init>:
 8007944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007946:	bf00      	nop
 8007948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794a:	bc08      	pop	{r3}
 800794c:	469e      	mov	lr, r3
 800794e:	4770      	bx	lr

08007950 <_fini>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	bf00      	nop
 8007954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007956:	bc08      	pop	{r3}
 8007958:	469e      	mov	lr, r3
 800795a:	4770      	bx	lr
