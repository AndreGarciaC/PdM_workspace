
TP_AndreaGarcia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08004c40  08004c40  00014c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e54  08004e54  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e5c  08004e5c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00004380  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004418  20004418  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018331  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033f3  00000000  00000000  000383f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  0003b7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b28  00000000  00000000  0003c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029060  00000000  00000000  0003cf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014462  00000000  00000000  00065ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e684d  00000000  00000000  0007a45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00160ca7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003718  00000000  00000000  00160cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004c28 	.word	0x08004c28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	08004c28 	.word	0x08004c28

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <ledInit>:
static delay_t led1Delay;
static delay_t led2Delay;
static delay_t led3Delay;

bool_t ledInit()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED1);
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fa6b 	bl	8000a98 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 80005c2:	2001      	movs	r0, #1
 80005c4:	f000 fa68 	bl	8000a98 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 fa65 	bl	8000a98 <BSP_LED_Init>

	delayInit (&led1Delay, 100);
 80005ce:	2164      	movs	r1, #100	; 0x64
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <ledInit+0x38>)
 80005d2:	f000 f95b 	bl	800088c <delayInit>
	delayInit (&led2Delay, 500);
 80005d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <ledInit+0x3c>)
 80005dc:	f000 f956 	bl	800088c <delayInit>
	delayInit (&led3Delay, 1000);
 80005e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <ledInit+0x40>)
 80005e6:	f000 f951 	bl	800088c <delayInit>

	return true;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000c4 	.word	0x200000c4
 80005f4:	200000d0 	.word	0x200000d0
 80005f8:	200000dc 	.word	0x200000dc

080005fc <mefInit>:

bool_t mefInit()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	demoState = UART_stt;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <mefInit+0x20>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
	rxFlag = false;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <mefInit+0x24>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	delayInit (&ansDelay, DELAY_RX);
 800060c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <mefInit+0x28>)
 8000612:	f000 f93b 	bl	800088c <delayInit>
	return true;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000b4 	.word	0x200000b4
 8000620:	200000b5 	.word	0x200000b5
 8000624:	200000b8 	.word	0x200000b8

08000628 <mefUpdate>:


void mefUpdate()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	uartSendMsg((uint8_t *)("\r DEMO GENERAL PRUEBAS PR-310\n\r"));
 800062c:	4822      	ldr	r0, [pc, #136]	; (80006b8 <mefUpdate+0x90>)
 800062e:	f000 f9a3 	bl	8000978 <uartSendMsg>
	switch(demoState)
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <mefUpdate+0x94>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b05      	cmp	r3, #5
 8000638:	d83c      	bhi.n	80006b4 <mefUpdate+0x8c>
 800063a:	a201      	add	r2, pc, #4	; (adr r2, 8000640 <mefUpdate+0x18>)
 800063c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000640:	08000659 	.word	0x08000659
 8000644:	08000669 	.word	0x08000669
 8000648:	08000679 	.word	0x08000679
 800064c:	08000689 	.word	0x08000689
 8000650:	08000699 	.word	0x08000699
 8000654:	080006a9 	.word	0x080006a9
	{
	case UART_stt:
		uartSendMsg((uint8_t *)"\r Prueba: Serial\n\r");
 8000658:	4819      	ldr	r0, [pc, #100]	; (80006c0 <mefUpdate+0x98>)
 800065a:	f000 f98d 	bl	8000978 <uartSendMsg>
		test();
 800065e:	f000 f83b 	bl	80006d8 <test>
		demoState = IO_stt;
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <mefUpdate+0x94>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
	case IO_stt:
		uartSendMsg((uint8_t *)("\r Prueba: Entradas y salidas verificadas \n\r"));
 8000668:	4816      	ldr	r0, [pc, #88]	; (80006c4 <mefUpdate+0x9c>)
 800066a:	f000 f985 	bl	8000978 <uartSendMsg>
		test();
 800066e:	f000 f833 	bl	80006d8 <test>
		demoState = SD_stt;
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <mefUpdate+0x94>)
 8000674:	2202      	movs	r2, #2
 8000676:	701a      	strb	r2, [r3, #0]
	case SD_stt:
//		SD_Rutine();
		uartSendMsg((uint8_t *)("\r Prueba: Micro SD verificada \n\r"));
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <mefUpdate+0xa0>)
 800067a:	f000 f97d 	bl	8000978 <uartSendMsg>
		test();
 800067e:	f000 f82b 	bl	80006d8 <test>
		demoState = WIFI_stt;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <mefUpdate+0x94>)
 8000684:	2203      	movs	r2, #3
 8000686:	701a      	strb	r2, [r3, #0]
	case WIFI_stt:
		uartSendMsg((uint8_t *)("\r Prueba: WiFi verificado \n\r"));
 8000688:	4810      	ldr	r0, [pc, #64]	; (80006cc <mefUpdate+0xa4>)
 800068a:	f000 f975 	bl	8000978 <uartSendMsg>
		test();
 800068e:	f000 f823 	bl	80006d8 <test>
		demoState = BLE_stt;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <mefUpdate+0x94>)
 8000694:	2204      	movs	r2, #4
 8000696:	701a      	strb	r2, [r3, #0]
	case BLE_stt:
		uartSendMsg((uint8_t *)("\r Prueba: BLE verificado \n\r"));
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <mefUpdate+0xa8>)
 800069a:	f000 f96d 	bl	8000978 <uartSendMsg>
		test();
 800069e:	f000 f81b 	bl	80006d8 <test>
		demoState = ETH_stt;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <mefUpdate+0x94>)
 80006a4:	2205      	movs	r2, #5
 80006a6:	701a      	strb	r2, [r3, #0]
	case ETH_stt:
		uartSendMsg((uint8_t *)("\r Prueba: Ethernet verificado \n\r"));
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <mefUpdate+0xac>)
 80006aa:	f000 f965 	bl	8000978 <uartSendMsg>
		test();
 80006ae:	f000 f813 	bl	80006d8 <test>
		break;
 80006b2:	bf00      	nop
	}
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	08004c40 	.word	0x08004c40
 80006bc:	200000b4 	.word	0x200000b4
 80006c0:	08004c60 	.word	0x08004c60
 80006c4:	08004c74 	.word	0x08004c74
 80006c8:	08004ca0 	.word	0x08004ca0
 80006cc:	08004cc4 	.word	0x08004cc4
 80006d0:	08004ce4 	.word	0x08004ce4
 80006d4:	08004d00 	.word	0x08004d00

080006d8 <test>:
//		BSP_LED_Off(LED1);
//	}
//}

static void test()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	while(!delayRead(&ansDelay))
 80006dc:	e005      	b.n	80006ea <test+0x12>
	{
		rxFlag=uartReadMsgPR310();
 80006de:	f000 f96f 	bl	80009c0 <uartReadMsgPR310>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <test+0x30>)
 80006e8:	701a      	strb	r2, [r3, #0]
	while(!delayRead(&ansDelay))
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <test+0x34>)
 80006ec:	f000 f8e8 	bl	80008c0 <delayRead>
 80006f0:	4603      	mov	r3, r0
 80006f2:	f083 0301 	eor.w	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f0      	bne.n	80006de <test+0x6>
	}
	uartSendMsg((uint8_t *)("\r Timeout\n\r"));
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <test+0x38>)
 80006fe:	f000 f93b 	bl	8000978 <uartSendMsg>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000b5 	.word	0x200000b5
 800070c:	200000b8 	.word	0x200000b8
 8000710:	08004d24 	.word	0x08004d24

08000714 <MX_SPI1_Init>:
}



void MX_SPI1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_SPI1_Init+0x64>)
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <MX_SPI1_Init+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_SPI1_Init+0x64>)
 8000720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000724:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_SPI1_Init+0x64>)
 8000740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000744:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_SPI1_Init+0x64>)
 8000760:	220a      	movs	r2, #10
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_SPI1_Init+0x64>)
 8000766:	f001 fc13 	bl	8001f90 <HAL_SPI_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000770:	f000 f806 	bl	8000780 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20001304 	.word	0x20001304
 800077c:	40013000 	.word	0x40013000

08000780 <Error_Handler>:

static void Error_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8000784:	2001      	movs	r0, #1
 8000786:	f000 f9d7 	bl	8000b38 <BSP_LED_On>
	while (1)
 800078a:	e7fe      	b.n	800078a <Error_Handler+0xa>

0800078c <debounceInit>:
static delay_t delay;

#define DELAY_TIME 40

bool_t debounceInit()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	debounceState = BUTTON_UP;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <debounceInit+0x20>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
	delayInit(&delay, DELAY_TIME);
 8000796:	2128      	movs	r1, #40	; 0x28
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <debounceInit+0x24>)
 800079a:	f000 f877 	bl	800088c <delayInit>

	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800079e:	2100      	movs	r1, #0
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 f9e3 	bl	8000b6c <BSP_PB_Init>


	return true;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000e8 	.word	0x200000e8
 80007b0:	200000ec 	.word	0x200000ec

080007b4 <debounceUpdate>:

void debounceUpdate()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	switch(debounceState)
 80007b8:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <debounceUpdate+0xc4>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d859      	bhi.n	8000874 <debounceUpdate+0xc0>
 80007c0:	a201      	add	r2, pc, #4	; (adr r2, 80007c8 <debounceUpdate+0x14>)
 80007c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c6:	bf00      	nop
 80007c8:	080007d9 	.word	0x080007d9
 80007cc:	080007f3 	.word	0x080007f3
 80007d0:	08000825 	.word	0x08000825
 80007d4:	0800083f 	.word	0x0800083f
	{
	case BUTTON_UP:
		if(BSP_PB_GetState(BUTTON_USER))
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fa1d 	bl	8000c18 <BSP_PB_GetState>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d040      	beq.n	8000866 <debounceUpdate+0xb2>
		{
			delayRead(&delay);
 80007e4:	4825      	ldr	r0, [pc, #148]	; (800087c <debounceUpdate+0xc8>)
 80007e6:	f000 f86b 	bl	80008c0 <delayRead>
			debounceState = BUTTON_FALLING;
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <debounceUpdate+0xc4>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
		}
		break;
 80007f0:	e039      	b.n	8000866 <debounceUpdate+0xb2>
	case BUTTON_FALLING:
		if(!delayRead(&delay))
 80007f2:	4822      	ldr	r0, [pc, #136]	; (800087c <debounceUpdate+0xc8>)
 80007f4:	f000 f864 	bl	80008c0 <delayRead>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f083 0301 	eor.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d032      	beq.n	800086a <debounceUpdate+0xb6>
		{
			if(BSP_PB_GetState(BUTTON_USER))
 8000804:	2000      	movs	r0, #0
 8000806:	f000 fa07 	bl	8000c18 <BSP_PB_GetState>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d005      	beq.n	800081c <debounceUpdate+0x68>
			{
				buttonPressed();
 8000810:	f000 f836 	bl	8000880 <buttonPressed>
				debounceState = BUTTON_DOWN;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <debounceUpdate+0xc4>)
 8000816:	2202      	movs	r2, #2
 8000818:	701a      	strb	r2, [r3, #0]
			else
			{
				debounceState = BUTTON_UP;
			}
		}
		break;
 800081a:	e026      	b.n	800086a <debounceUpdate+0xb6>
				debounceState = BUTTON_UP;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <debounceUpdate+0xc4>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
		break;
 8000822:	e022      	b.n	800086a <debounceUpdate+0xb6>
	case BUTTON_DOWN:
		if(!BSP_PB_GetState(BUTTON_USER))
 8000824:	2000      	movs	r0, #0
 8000826:	f000 f9f7 	bl	8000c18 <BSP_PB_GetState>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d11e      	bne.n	800086e <debounceUpdate+0xba>
		{
			delayRead(&delay);
 8000830:	4812      	ldr	r0, [pc, #72]	; (800087c <debounceUpdate+0xc8>)
 8000832:	f000 f845 	bl	80008c0 <delayRead>
			debounceState = BUTTON_RAISING;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <debounceUpdate+0xc4>)
 8000838:	2203      	movs	r2, #3
 800083a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800083c:	e017      	b.n	800086e <debounceUpdate+0xba>
	case BUTTON_RAISING:
		if(delayRead(&delay))
 800083e:	480f      	ldr	r0, [pc, #60]	; (800087c <debounceUpdate+0xc8>)
 8000840:	f000 f83e 	bl	80008c0 <delayRead>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d013      	beq.n	8000872 <debounceUpdate+0xbe>
		{
			if(!BSP_PB_GetState(BUTTON_USER))
 800084a:	2000      	movs	r0, #0
 800084c:	f000 f9e4 	bl	8000c18 <BSP_PB_GetState>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d103      	bne.n	800085e <debounceUpdate+0xaa>
			{
				debounceState = BUTTON_UP;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <debounceUpdate+0xc4>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
			else
			{
				debounceState = BUTTON_DOWN;
			}
		}
		break;
 800085c:	e009      	b.n	8000872 <debounceUpdate+0xbe>
				debounceState = BUTTON_DOWN;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <debounceUpdate+0xc4>)
 8000860:	2202      	movs	r2, #2
 8000862:	701a      	strb	r2, [r3, #0]
		break;
 8000864:	e005      	b.n	8000872 <debounceUpdate+0xbe>
		break;
 8000866:	bf00      	nop
 8000868:	e004      	b.n	8000874 <debounceUpdate+0xc0>
		break;
 800086a:	bf00      	nop
 800086c:	e002      	b.n	8000874 <debounceUpdate+0xc0>
		break;
 800086e:	bf00      	nop
 8000870:	e000      	b.n	8000874 <debounceUpdate+0xc0>
		break;
 8000872:	bf00      	nop
	}
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000e8 	.word	0x200000e8
 800087c:	200000ec 	.word	0x200000ec

08000880 <buttonPressed>:

void buttonPressed()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	mefUpdate();
 8000884:	f7ff fed0 	bl	8000628 <mefUpdate>
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <delayInit>:
#include <TESTER_delay.h>
/**
 * delayInit Carga el valor de duración en la estructura correspondiente. No inici la cuenta del retardo.
 */
void delayInit ( delay_t * delay, tick_t duration)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
	if(delay == 0 || duration < 0 || duration > MAX_DELAY) //Puntero no sea cero
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d004      	beq.n	80008a6 <delayInit+0x1a>
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	f242 7210 	movw	r2, #10000	; 0x2710
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d900      	bls.n	80008a8 <delayInit+0x1c>
		while(1);
 80008a6:	e7fe      	b.n	80008a6 <delayInit+0x1a>
	delay->duration = duration;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	605a      	str	r2, [r3, #4]
	delay->running = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	721a      	strb	r2, [r3, #8]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <delayRead>:
/**
 *
 */
bool_t delayRead ( delay_t * delay)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	bool_t isDurationOver = false;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]

	if (delay==0)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d100      	bne.n	80008d4 <delayRead+0x14>
		while(1);
 80008d2:	e7fe      	b.n	80008d2 <delayRead+0x12>

	if (!delay->running)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7a1b      	ldrb	r3, [r3, #8]
 80008d8:	f083 0301 	eor.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d009      	beq.n	80008f6 <delayRead+0x36>
	{
		delay->startTime = HAL_GetTick();
 80008e2:	f000 fb17 	bl	8000f14 <HAL_GetTick>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2201      	movs	r2, #1
 80008f2:	721a      	strb	r2, [r3, #8]
 80008f4:	e00f      	b.n	8000916 <delayRead+0x56>
	}
	else
	{
		if (((tick_t)HAL_GetTick() - delay->startTime) >= delay->duration)
 80008f6:	f000 fb0d 	bl	8000f14 <HAL_GetTick>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	1ad2      	subs	r2, r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	d304      	bcc.n	8000916 <delayRead+0x56>
		{
			isDurationOver = true;
 800090c:	2301      	movs	r3, #1
 800090e:	73fb      	strb	r3, [r7, #15]
			delay->running = 0;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	721a      	strb	r2, [r3, #8]
		}
	}
	return isDurationOver;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <Uart_Init>:

static void uartPrintConfig(void);
static void Error_Handler(void);

void Uart_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	UartHandle.Instance = USARTx;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <Uart_Init+0x50>)
 8000926:	4a13      	ldr	r2, [pc, #76]	; (8000974 <Uart_Init+0x54>)
 8000928:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 115200;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <Uart_Init+0x50>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <Uart_Init+0x50>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <Uart_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <Uart_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <Uart_Init+0x50>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <Uart_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <Uart_Init+0x50>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <Uart_Init+0x50>)
 8000958:	f001 fff0 	bl	800293c <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <Uart_Init+0x48>
	{
		Error_Handler();
 8000962:	f000 f893 	bl	8000a8c <Error_Handler>
	}
	else
	{
		uartPrintConfig();
	}
}
 8000966:	e001      	b.n	800096c <Uart_Init+0x4c>
		uartPrintConfig();
 8000968:	f000 f87c 	bl	8000a64 <uartPrintConfig>
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20001154 	.word	0x20001154
 8000974:	40004800 	.word	0x40004800

08000978 <uartSendMsg>:

void uartSendMsg(uint8_t *pstring)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	uint8_t i, count = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	73bb      	strb	r3, [r7, #14]
	for(i=0; *(pstring + i) !=0; i++)
 8000984:	2300      	movs	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	e005      	b.n	8000996 <uartSendMsg+0x1e>
	{
		count++;
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	3301      	adds	r3, #1
 800098e:	73bb      	strb	r3, [r7, #14]
	for(i=0; *(pstring + i) !=0; i++)
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	3301      	adds	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d1f3      	bne.n	800098a <uartSendMsg+0x12>
	}
	HAL_UART_Transmit(&UartHandle, pstring, count, 0xFFFF);
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <uartSendMsg+0x44>)
 80009ae:	f002 f812 	bl	80029d6 <HAL_UART_Transmit>
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20001154 	.word	0x20001154

080009c0 <uartReadMsgPR310>:

bool uartReadMsgPR310()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0c0      	sub	sp, #256	; 0x100
 80009c4:	af00      	add	r7, sp, #0
	char value[0xFF];
	if(__HAL_UART_GET_FLAG(&UartHandle, UART_FLAG_RXNE)>=1)
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <uartReadMsgPR310+0x8c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 0320 	and.w	r3, r3, #32
 80009d0:	2b20      	cmp	r3, #32
 80009d2:	d135      	bne.n	8000a40 <uartReadMsgPR310+0x80>
	{
		HAL_UART_Receive(&UartHandle, (uint8_t *)value, strlen(value),0xFF);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc14 	bl	8000204 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	4639      	mov	r1, r7
 80009e2:	23ff      	movs	r3, #255	; 0xff
 80009e4:	4819      	ldr	r0, [pc, #100]	; (8000a4c <uartReadMsgPR310+0x8c>)
 80009e6:	f002 f888 	bl	8002afa <HAL_UART_Receive>
		uartSendMsg((uint8_t *)value);
 80009ea:	463b      	mov	r3, r7
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ffc3 	bl	8000978 <uartSendMsg>
		uartSendMsg((uint8_t *)("\rIngrese 1 o 0\n\r"));
 80009f2:	4817      	ldr	r0, [pc, #92]	; (8000a50 <uartReadMsgPR310+0x90>)
 80009f4:	f7ff ffc0 	bl	8000978 <uartSendMsg>
		if(strcmp (value, "1")==0)
 80009f8:	463b      	mov	r3, r7
 80009fa:	4916      	ldr	r1, [pc, #88]	; (8000a54 <uartReadMsgPR310+0x94>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fbf7 	bl	80001f0 <strcmp>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d109      	bne.n	8000a1c <uartReadMsgPR310+0x5c>
		{
			uartSendMsg((uint8_t *)("\r Exito \n\r"));
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <uartReadMsgPR310+0x98>)
 8000a0a:	f7ff ffb5 	bl	8000978 <uartSendMsg>
			__HAL_UART_CLEAR_FLAG(&UartHandle, UART_FLAG_RXNE);
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <uartReadMsgPR310+0x8c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f06f 0220 	mvn.w	r2, #32
 8000a16:	601a      	str	r2, [r3, #0]
			return true;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e012      	b.n	8000a42 <uartReadMsgPR310+0x82>
		}
		else if(strcmp (value, "0")==0)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	490f      	ldr	r1, [pc, #60]	; (8000a5c <uartReadMsgPR310+0x9c>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fbe5 	bl	80001f0 <strcmp>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d109      	bne.n	8000a40 <uartReadMsgPR310+0x80>
		{
			uartSendMsg((uint8_t *)("\r Fallo \n\r"));
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <uartReadMsgPR310+0xa0>)
 8000a2e:	f7ff ffa3 	bl	8000978 <uartSendMsg>
			__HAL_UART_CLEAR_FLAG(&UartHandle, UART_FLAG_RXNE);
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <uartReadMsgPR310+0x8c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f06f 0220 	mvn.w	r2, #32
 8000a3a:	601a      	str	r2, [r3, #0]
			return false;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e000      	b.n	8000a42 <uartReadMsgPR310+0x82>
		}
	}
	return false;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20001154 	.word	0x20001154
 8000a50:	08004d30 	.word	0x08004d30
 8000a54:	08004d44 	.word	0x08004d44
 8000a58:	08004d48 	.word	0x08004d48
 8000a5c:	08004d54 	.word	0x08004d54
 8000a60:	08004d58 	.word	0x08004d58

08000a64 <uartPrintConfig>:

static void uartPrintConfig(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	uartSendMsg((uint8_t *)"UART inicializado\n\r");
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <uartPrintConfig+0x1c>)
 8000a6a:	f7ff ff85 	bl	8000978 <uartSendMsg>
	printf("Velocidad serial: %lu baudios.\n\r",UartHandle.Init.BaudRate);
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <uartPrintConfig+0x20>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	4619      	mov	r1, r3
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <uartPrintConfig+0x24>)
 8000a76:	f003 f981 	bl	8003d7c <iprintf>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08004d64 	.word	0x08004d64
 8000a84:	20001154 	.word	0x20001154
 8000a88:	08004d78 	.word	0x08004d78

08000a8c <Error_Handler>:

static void Error_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f000 f851 	bl	8000b38 <BSP_LED_On>
	while (1)
 8000a96:	e7fe      	b.n	8000a96 <Error_Handler+0xa>

08000a98 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10e      	bne.n	8000ac6 <BSP_LED_Init+0x2e>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <BSP_LED_Init+0x94>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <BSP_LED_Init+0x94>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <BSP_LED_Init+0x94>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	e00d      	b.n	8000ae2 <BSP_LED_Init+0x4a>
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <BSP_LED_Init+0x94>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <BSP_LED_Init+0x94>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <BSP_LED_Init+0x94>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <BSP_LED_Init+0x98>)
 8000ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <BSP_LED_Init+0x9c>)
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	f107 0214 	add.w	r2, r7, #20
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fb46 	bl	8001198 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <BSP_LED_Init+0x9c>)
 8000b10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <BSP_LED_Init+0x98>)
 8000b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f000 fcfe 	bl	8001520 <HAL_GPIO_WritePin>
}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	08004d9c 	.word	0x08004d9c
 8000b34:	20000000 	.word	0x20000000

08000b38 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <BSP_LED_On+0x2c>)
 8000b46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <BSP_LED_On+0x30>)
 8000b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b52:	2201      	movs	r2, #1
 8000b54:	4619      	mov	r1, r3
 8000b56:	f000 fce3 	bl	8001520 <HAL_GPIO_WritePin>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000000 	.word	0x20000000
 8000b68:	08004d9c 	.word	0x08004d9c

08000b6c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	460a      	mov	r2, r1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <BSP_PB_Init+0xa4>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <BSP_PB_Init+0xa4>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <BSP_PB_Init+0xa4>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000b98:	79bb      	ldrb	r3, [r7, #6]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d112      	bne.n	8000bc4 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <BSP_PB_Init+0xa8>)
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	f107 020c 	add.w	r2, r7, #12
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 faea 	bl	8001198 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000bc4:	79bb      	ldrb	r3, [r7, #6]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d11d      	bne.n	8000c06 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000bd4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bd8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <BSP_PB_Init+0xa8>)
 8000bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be2:	f107 020c 	add.w	r2, r7, #12
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fad5 	bl	8001198 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000bee:	2328      	movs	r3, #40	; 0x28
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	210f      	movs	r1, #15
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fa97 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000bfc:	2328      	movs	r3, #40	; 0x28
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 faae 	bl	8001162 <HAL_NVIC_EnableIRQ>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	2000000c 	.word	0x2000000c

08000c18 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <BSP_PB_GetState+0x28>)
 8000c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 fc5d 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000c36:	4603      	mov	r3, r0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000000c 	.word	0x2000000c

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SystemInit+0x60>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <SystemInit+0x60>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <SystemInit+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <SystemInit+0x64>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <SystemInit+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <SystemInit+0x64>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <SystemInit+0x64>)
 8000c70:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <SystemInit+0x64>)
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <SystemInit+0x68>)
 8000c7e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <SystemInit+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <SystemInit+0x64>)
 8000c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SystemInit+0x60>)
 8000c94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c98:	609a      	str	r2, [r3, #8]
#endif
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	24003010 	.word	0x24003010

08000cb0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000d04:	f000 f8f2 	bl	8000eec <HAL_IncTick>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	e00a      	b.n	8000d34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d1e:	f3af 8000 	nop.w
 8000d22:	4601      	mov	r1, r0
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbf0      	blt.n	8000d1e <_read+0x12>
	}

return len;
 8000d3c:	687b      	ldr	r3, [r7, #4]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	e009      	b.n	8000d6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbf1      	blt.n	8000d58 <_write+0x12>
	}
	return len;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_close>:

int _close(int file)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
	return -1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da6:	605a      	str	r2, [r3, #4]
	return 0;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <_isatty>:

int _isatty(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
	return 0;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f002 ff7e 	bl	8003d18 <__errno>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <_sbrk+0x64>)
 8000e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20030000 	.word	0x20030000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	200000f8 	.word	0x200000f8
 8000e50:	20004418 	.word	0x20004418

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_Init+0x34>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_Init+0x34>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e62:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x34>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x34>)
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f94f 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f000 fbbc 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023c00 	.word	0x40023c00

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f967 	bl	800117e <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec8:	f000 f92f 	bl	800112a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000010 	.word	0x20000010
 8000ee4:	20000018 	.word	0x20000018
 8000ee8:	20000014 	.word	0x20000014

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000018 	.word	0x20000018
 8000f10:	20002390 	.word	0x20002390

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20002390 	.word	0x20002390

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000018 	.word	0x20000018

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff3e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff31 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e177      	b.n	80014a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 8166 	bne.w	800149e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d005      	beq.n	80011ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d130      	bne.n	800124c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	f003 0201 	and.w	r2, r3, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b03      	cmp	r3, #3
 8001256:	d017      	beq.n	8001288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80c0 	beq.w	800149e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b66      	ldr	r3, [pc, #408]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a65      	ldr	r2, [pc, #404]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b63      	ldr	r3, [pc, #396]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133a:	4a61      	ldr	r2, [pc, #388]	; (80014c0 <HAL_GPIO_Init+0x328>)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a58      	ldr	r2, [pc, #352]	; (80014c4 <HAL_GPIO_Init+0x32c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d037      	beq.n	80013d6 <HAL_GPIO_Init+0x23e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a57      	ldr	r2, [pc, #348]	; (80014c8 <HAL_GPIO_Init+0x330>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d031      	beq.n	80013d2 <HAL_GPIO_Init+0x23a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a56      	ldr	r2, [pc, #344]	; (80014cc <HAL_GPIO_Init+0x334>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d02b      	beq.n	80013ce <HAL_GPIO_Init+0x236>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a55      	ldr	r2, [pc, #340]	; (80014d0 <HAL_GPIO_Init+0x338>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d025      	beq.n	80013ca <HAL_GPIO_Init+0x232>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a54      	ldr	r2, [pc, #336]	; (80014d4 <HAL_GPIO_Init+0x33c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d01f      	beq.n	80013c6 <HAL_GPIO_Init+0x22e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a53      	ldr	r2, [pc, #332]	; (80014d8 <HAL_GPIO_Init+0x340>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d019      	beq.n	80013c2 <HAL_GPIO_Init+0x22a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a52      	ldr	r2, [pc, #328]	; (80014dc <HAL_GPIO_Init+0x344>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0x226>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a51      	ldr	r2, [pc, #324]	; (80014e0 <HAL_GPIO_Init+0x348>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00d      	beq.n	80013ba <HAL_GPIO_Init+0x222>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a50      	ldr	r2, [pc, #320]	; (80014e4 <HAL_GPIO_Init+0x34c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x21e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x350>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_GPIO_Init+0x21a>
 80013ae:	2309      	movs	r3, #9
 80013b0:	e012      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013b2:	230a      	movs	r3, #10
 80013b4:	e010      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013b6:	2308      	movs	r3, #8
 80013b8:	e00e      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013ba:	2307      	movs	r3, #7
 80013bc:	e00c      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013be:	2306      	movs	r3, #6
 80013c0:	e00a      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013c2:	2305      	movs	r3, #5
 80013c4:	e008      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013c6:	2304      	movs	r3, #4
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013d6:	2300      	movs	r3, #0
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	f002 0203 	and.w	r2, r2, #3
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4093      	lsls	r3, r2
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e8:	4935      	ldr	r1, [pc, #212]	; (80014c0 <HAL_GPIO_Init+0x328>)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <HAL_GPIO_Init+0x354>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800141a:	4a34      	ldr	r2, [pc, #208]	; (80014ec <HAL_GPIO_Init+0x354>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001420:	4b32      	ldr	r3, [pc, #200]	; (80014ec <HAL_GPIO_Init+0x354>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001444:	4a29      	ldr	r2, [pc, #164]	; (80014ec <HAL_GPIO_Init+0x354>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_GPIO_Init+0x354>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <HAL_GPIO_Init+0x354>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HAL_GPIO_Init+0x354>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_GPIO_Init+0x354>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	f67f ae84 	bls.w	80011b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021800 	.word	0x40021800
 80014e0:	40021c00 	.word	0x40021c00
 80014e4:	40022000 	.word	0x40022000
 80014e8:	40022400 	.word	0x40022400
 80014ec:	40013c00 	.word	0x40013c00

080014f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e001      	b.n	8001512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6313      	str	r3, [r2, #48]	; 0x30
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 800159e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a2:	6413      	str	r3, [r2, #64]	; 0x40
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80015b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80015c2:	2307      	movs	r3, #7
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <HAL_UART_MspInit+0xa0>)
 80015ce:	f7ff fde3 	bl	8001198 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80015d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80015d8:	2307      	movs	r3, #7
 80015da:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4804      	ldr	r0, [pc, #16]	; (80015f4 <HAL_UART_MspInit+0xa0>)
 80015e4:	f7ff fdd8 	bl	8001198 <HAL_GPIO_Init>
}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020c00 	.word	0x40020c00

080015f8 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_PWREx_EnableOverDrive+0x90>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <HAL_PWREx_EnableOverDrive+0x90>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_PWREx_EnableOverDrive+0x90>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_PWREx_EnableOverDrive+0x94>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001634:	f7ff fc6e 	bl	8000f14 <HAL_GetTick>
 8001638:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800163a:	e009      	b.n	8001650 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800163c:	f7ff fc6a 	bl	8000f14 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800164a:	d901      	bls.n	8001650 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e01f      	b.n	8001690 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d1ee      	bne.n	800163c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001664:	f7ff fc56 	bl	8000f14 <HAL_GetTick>
 8001668:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800166a:	e009      	b.n	8001680 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800166c:	f7ff fc52 	bl	8000f14 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800167a:	d901      	bls.n	8001680 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e007      	b.n	8001690 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800168c:	d1ee      	bne.n	800166c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	420e0040 	.word	0x420e0040
 80016a0:	40007000 	.word	0x40007000
 80016a4:	420e0044 	.word	0x420e0044

080016a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e264      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d075      	beq.n	80017b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016c6:	4ba3      	ldr	r3, [pc, #652]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d00c      	beq.n	80016ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d2:	4ba0      	ldr	r3, [pc, #640]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d112      	bne.n	8001704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016de:	4b9d      	ldr	r3, [pc, #628]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ea:	d10b      	bne.n	8001704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	4b99      	ldr	r3, [pc, #612]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d05b      	beq.n	80017b0 <HAL_RCC_OscConfig+0x108>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d157      	bne.n	80017b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e23f      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170c:	d106      	bne.n	800171c <HAL_RCC_OscConfig+0x74>
 800170e:	4b91      	ldr	r3, [pc, #580]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a90      	ldr	r2, [pc, #576]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xb0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x98>
 8001726:	4b8b      	ldr	r3, [pc, #556]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a8a      	ldr	r2, [pc, #552]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b88      	ldr	r3, [pc, #544]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a87      	ldr	r2, [pc, #540]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xb0>
 8001740:	4b84      	ldr	r3, [pc, #528]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a83      	ldr	r2, [pc, #524]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b81      	ldr	r3, [pc, #516]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a80      	ldr	r2, [pc, #512]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fbd8 	bl	8000f14 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fbd4 	bl	8000f14 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e204      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b76      	ldr	r3, [pc, #472]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xc0>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fbc4 	bl	8000f14 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fbc0 	bl	8000f14 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1f0      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b6c      	ldr	r3, [pc, #432]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0xe8>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017be:	4b65      	ldr	r3, [pc, #404]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ca:	4b62      	ldr	r3, [pc, #392]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d6:	4b5f      	ldr	r3, [pc, #380]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b5c      	ldr	r3, [pc, #368]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x152>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1c4      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b56      	ldr	r3, [pc, #344]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4952      	ldr	r1, [pc, #328]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b4f      	ldr	r3, [pc, #316]	; (8001958 <HAL_RCC_OscConfig+0x2b0>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fb79 	bl	8000f14 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fb75 	bl	8000f14 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1a5      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b46      	ldr	r3, [pc, #280]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b43      	ldr	r3, [pc, #268]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4940      	ldr	r1, [pc, #256]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <HAL_RCC_OscConfig+0x2b0>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fb58 	bl	8000f14 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fb54 	bl	8000f14 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e184      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b36      	ldr	r3, [pc, #216]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d030      	beq.n	80018f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d016      	beq.n	80018c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_RCC_OscConfig+0x2b4>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff fb38 	bl	8000f14 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fb34 	bl	8000f14 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e164      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x200>
 80018c6:	e015      	b.n	80018f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_RCC_OscConfig+0x2b4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ce:	f7ff fb21 	bl	8000f14 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d6:	f7ff fb1d 	bl	8000f14 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e14d      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e8:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f0      	bne.n	80018d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80a0 	beq.w	8001a42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10f      	bne.n	8001932 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_RCC_OscConfig+0x2ac>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192e:	2301      	movs	r3, #1
 8001930:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_OscConfig+0x2b8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	2b00      	cmp	r3, #0
 800193c:	d121      	bne.n	8001982 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_RCC_OscConfig+0x2b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_RCC_OscConfig+0x2b8>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194a:	f7ff fae3 	bl	8000f14 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	e011      	b.n	8001976 <HAL_RCC_OscConfig+0x2ce>
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	42470000 	.word	0x42470000
 800195c:	42470e80 	.word	0x42470e80
 8001960:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001964:	f7ff fad6 	bl	8000f14 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e106      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b85      	ldr	r3, [pc, #532]	; (8001b8c <HAL_RCC_OscConfig+0x4e4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d106      	bne.n	8001998 <HAL_RCC_OscConfig+0x2f0>
 800198a:	4b81      	ldr	r3, [pc, #516]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a80      	ldr	r2, [pc, #512]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	e01c      	b.n	80019d2 <HAL_RCC_OscConfig+0x32a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b05      	cmp	r3, #5
 800199e:	d10c      	bne.n	80019ba <HAL_RCC_OscConfig+0x312>
 80019a0:	4b7b      	ldr	r3, [pc, #492]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a4:	4a7a      	ldr	r2, [pc, #488]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6713      	str	r3, [r2, #112]	; 0x70
 80019ac:	4b78      	ldr	r3, [pc, #480]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	4a77      	ldr	r2, [pc, #476]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6713      	str	r3, [r2, #112]	; 0x70
 80019b8:	e00b      	b.n	80019d2 <HAL_RCC_OscConfig+0x32a>
 80019ba:	4b75      	ldr	r3, [pc, #468]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019be:	4a74      	ldr	r2, [pc, #464]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	6713      	str	r3, [r2, #112]	; 0x70
 80019c6:	4b72      	ldr	r3, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	4a71      	ldr	r2, [pc, #452]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 80019cc:	f023 0304 	bic.w	r3, r3, #4
 80019d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d015      	beq.n	8001a06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fa9b 	bl	8000f14 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff fa97 	bl	8000f14 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0c5      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f8:	4b65      	ldr	r3, [pc, #404]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0ee      	beq.n	80019e2 <HAL_RCC_OscConfig+0x33a>
 8001a04:	e014      	b.n	8001a30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fa85 	bl	8000f14 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff fa81 	bl	8000f14 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0af      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	4b5a      	ldr	r3, [pc, #360]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d105      	bne.n	8001a42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a36:	4b56      	ldr	r3, [pc, #344]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a55      	ldr	r2, [pc, #340]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 8001a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 809b 	beq.w	8001b82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d05c      	beq.n	8001b12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d141      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a60:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <HAL_RCC_OscConfig+0x4ec>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff fa55 	bl	8000f14 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff fa51 	bl	8000f14 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e081      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a80:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69da      	ldr	r2, [r3, #28]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	019b      	lsls	r3, r3, #6
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	041b      	lsls	r3, r3, #16
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	061b      	lsls	r3, r3, #24
 8001ab0:	4937      	ldr	r1, [pc, #220]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab6:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <HAL_RCC_OscConfig+0x4ec>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fa2a 	bl	8000f14 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fa26 	bl	8000f14 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e056      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
 8001ae2:	e04e      	b.n	8001b82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_RCC_OscConfig+0x4ec>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff fa13 	bl	8000f14 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af2:	f7ff fa0f 	bl	8000f14 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e03f      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x44a>
 8001b10:	e037      	b.n	8001b82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e032      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_RCC_OscConfig+0x4e8>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d028      	beq.n	8001b7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d121      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d11a      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b4e:	4013      	ands	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d111      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	3b01      	subs	r3, #1
 8001b68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	42470060 	.word	0x42470060

08001b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0cc      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bac:	4b68      	ldr	r3, [pc, #416]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d90c      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b65      	ldr	r3, [pc, #404]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0b8      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d020      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bec:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4a52      	ldr	r2, [pc, #328]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	494d      	ldr	r1, [pc, #308]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d044      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d119      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e07f      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d003      	beq.n	8001c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c56:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06f      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c66:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e067      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c76:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f023 0203 	bic.w	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4934      	ldr	r1, [pc, #208]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c88:	f7ff f944 	bl	8000f14 <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c90:	f7ff f940 	bl	8000f14 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e04f      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 020c 	and.w	r2, r3, #12
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d1eb      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d20c      	bcs.n	8001ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e032      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4916      	ldr	r1, [pc, #88]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	490e      	ldr	r1, [pc, #56]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d1e:	f000 f821 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	490a      	ldr	r1, [pc, #40]	; (8001d58 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	5ccb      	ldrb	r3, [r1, r3]
 8001d32:	fa22 f303 	lsr.w	r3, r2, r3
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f8a4 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023c00 	.word	0x40023c00
 8001d54:	40023800 	.word	0x40023800
 8001d58:	08004da4 	.word	0x08004da4
 8001d5c:	20000010 	.word	0x20000010
 8001d60:	20000014 	.word	0x20000014

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	2300      	movs	r3, #0
 8001d76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7c:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d00d      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x40>
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	f200 80bd 	bhi.w	8001f08 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x34>
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d96:	e0b7      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d9a:	60bb      	str	r3, [r7, #8]
       break;
 8001d9c:	e0b7      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d9e:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001da0:	60bb      	str	r3, [r7, #8]
      break;
 8001da2:	e0b4      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da4:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dae:	4b5b      	ldr	r3, [pc, #364]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d04d      	beq.n	8001e56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dba:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dca:	f04f 0100 	mov.w	r1, #0
 8001dce:	ea02 0800 	and.w	r8, r2, r0
 8001dd2:	ea03 0901 	and.w	r9, r3, r1
 8001dd6:	4640      	mov	r0, r8
 8001dd8:	4649      	mov	r1, r9
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	014b      	lsls	r3, r1, #5
 8001de4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001de8:	0142      	lsls	r2, r0, #5
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	ebb0 0008 	subs.w	r0, r0, r8
 8001df2:	eb61 0109 	sbc.w	r1, r1, r9
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	018b      	lsls	r3, r1, #6
 8001e00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e04:	0182      	lsls	r2, r0, #6
 8001e06:	1a12      	subs	r2, r2, r0
 8001e08:	eb63 0301 	sbc.w	r3, r3, r1
 8001e0c:	f04f 0000 	mov.w	r0, #0
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	00d9      	lsls	r1, r3, #3
 8001e16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e1a:	00d0      	lsls	r0, r2, #3
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	eb12 0208 	adds.w	r2, r2, r8
 8001e24:	eb43 0309 	adc.w	r3, r3, r9
 8001e28:	f04f 0000 	mov.w	r0, #0
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	0259      	lsls	r1, r3, #9
 8001e32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e36:	0250      	lsls	r0, r2, #9
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	461a      	mov	r2, r3
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	f7fe fa3a 	bl	80002c0 <__aeabi_uldivmod>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4613      	mov	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e04a      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e56:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	099b      	lsrs	r3, r3, #6
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e66:	f04f 0100 	mov.w	r1, #0
 8001e6a:	ea02 0400 	and.w	r4, r2, r0
 8001e6e:	ea03 0501 	and.w	r5, r3, r1
 8001e72:	4620      	mov	r0, r4
 8001e74:	4629      	mov	r1, r5
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	014b      	lsls	r3, r1, #5
 8001e80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e84:	0142      	lsls	r2, r0, #5
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	1b00      	subs	r0, r0, r4
 8001e8c:	eb61 0105 	sbc.w	r1, r1, r5
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	018b      	lsls	r3, r1, #6
 8001e9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e9e:	0182      	lsls	r2, r0, #6
 8001ea0:	1a12      	subs	r2, r2, r0
 8001ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ea6:	f04f 0000 	mov.w	r0, #0
 8001eaa:	f04f 0100 	mov.w	r1, #0
 8001eae:	00d9      	lsls	r1, r3, #3
 8001eb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eb4:	00d0      	lsls	r0, r2, #3
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	1912      	adds	r2, r2, r4
 8001ebc:	eb45 0303 	adc.w	r3, r5, r3
 8001ec0:	f04f 0000 	mov.w	r0, #0
 8001ec4:	f04f 0100 	mov.w	r1, #0
 8001ec8:	0299      	lsls	r1, r3, #10
 8001eca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ece:	0290      	lsls	r0, r2, #10
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	f7fe f9ee 	bl	80002c0 <__aeabi_uldivmod>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	0c1b      	lsrs	r3, r3, #16
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f04:	60bb      	str	r3, [r7, #8]
      break;
 8001f06:	e002      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f0a:	60bb      	str	r3, [r7, #8]
      break;
 8001f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	00f42400 	.word	0x00f42400
 8001f24:	007a1200 	.word	0x007a1200

08001f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000010 	.word	0x20000010

08001f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f44:	f7ff fff0 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	0a9b      	lsrs	r3, r3, #10
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4903      	ldr	r1, [pc, #12]	; (8001f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	08004db4 	.word	0x08004db4

08001f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f6c:	f7ff ffdc 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0b5b      	lsrs	r3, r3, #13
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4903      	ldr	r1, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	08004db4 	.word	0x08004db4

08001f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e083      	b.n	80020aa <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d108      	bne.n	8001fbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fb2:	d009      	beq.n	8001fc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
 8001fba:	e005      	b.n	8001fc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d106      	bne.n	8001fe2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f868 	bl	80020b2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ff8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002046:	ea42 0103 	orr.w	r1, r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	f003 0104 	and.w	r1, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	f003 0210 	and.w	r2, r3, #16
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207c:	d105      	bne.n	800208a <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b292      	uxth	r2, r2
 8002088:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69da      	ldr	r2, [r3, #28]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002098:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b088      	sub	sp, #32
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	4613      	mov	r3, r2
 80020d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_SPI_Transmit+0x22>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e148      	b.n	800237a <HAL_SPI_Transmit+0x2b4>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020f0:	f7fe ff10 	bl	8000f14 <HAL_GetTick>
 80020f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d002      	beq.n	800210c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	77fb      	strb	r3, [r7, #31]
    goto error;
 800210a:	e12d      	b.n	8002368 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_SPI_Transmit+0x52>
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800211c:	e124      	b.n	8002368 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2203      	movs	r2, #3
 8002122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	88fa      	ldrh	r2, [r7, #6]
 8002136:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	88fa      	ldrh	r2, [r7, #6]
 800213c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002164:	d10f      	bne.n	8002186 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002174:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002184:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218e:	d10f      	bne.n	80021b0 <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ae:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	2b40      	cmp	r3, #64	; 0x40
 80021bc:	d007      	beq.n	80021ce <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021d6:	d14b      	bne.n	8002270 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_SPI_Transmit+0x120>
 80021e0:	8afb      	ldrh	r3, [r7, #22]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d13e      	bne.n	8002264 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	1c9a      	adds	r2, r3, #2
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800220a:	e02b      	b.n	8002264 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b02      	cmp	r3, #2
 8002218:	d112      	bne.n	8002240 <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	881a      	ldrh	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	1c9a      	adds	r2, r3, #2
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	86da      	strh	r2, [r3, #54]	; 0x36
 800223e:	e011      	b.n	8002264 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002240:	f7fe fe68 	bl	8000f14 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d803      	bhi.n	8002258 <HAL_SPI_Transmit+0x192>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002256:	d102      	bne.n	800225e <HAL_SPI_Transmit+0x198>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002262:	e081      	b.n	8002368 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1ce      	bne.n	800220c <HAL_SPI_Transmit+0x146>
 800226e:	e04c      	b.n	800230a <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_SPI_Transmit+0x1b8>
 8002278:	8afb      	ldrh	r3, [r7, #22]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d140      	bne.n	8002300 <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	330c      	adds	r3, #12
 8002288:	7812      	ldrb	r2, [r2, #0]
 800228a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022a4:	e02c      	b.n	8002300 <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d113      	bne.n	80022dc <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330c      	adds	r3, #12
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80022da:	e011      	b.n	8002300 <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022dc:	f7fe fe1a 	bl	8000f14 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d803      	bhi.n	80022f4 <HAL_SPI_Transmit+0x22e>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022f2:	d102      	bne.n	80022fa <HAL_SPI_Transmit+0x234>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022fe:	e033      	b.n	8002368 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1cd      	bne.n	80022a6 <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002312:	d107      	bne.n	8002324 <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002322:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	6839      	ldr	r1, [r7, #0]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fac5 	bl	80028b8 <SPI_EndRxTxTransaction>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10a      	bne.n	8002358 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	77fb      	strb	r3, [r7, #31]
 8002364:	e000      	b.n	8002368 <HAL_SPI_Transmit+0x2a2>
  }

error:
 8002366:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002378:	7ffb      	ldrb	r3, [r7, #31]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3720      	adds	r7, #32
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b08e      	sub	sp, #56	; 0x38
 8002386:	af02      	add	r7, sp, #8
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002394:	2301      	movs	r3, #1
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_SPI_TransmitReceive+0x2a>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e1f8      	b.n	800279e <HAL_SPI_TransmitReceive+0x41c>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023b4:	f7fe fdae 	bl	8000f14 <HAL_GetTick>
 80023b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d00f      	beq.n	80023f6 <HAL_SPI_TransmitReceive+0x74>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023dc:	d107      	bne.n	80023ee <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d103      	bne.n	80023ee <HAL_SPI_TransmitReceive+0x6c>
 80023e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d003      	beq.n	80023f6 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
 80023f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023f4:	e1c9      	b.n	800278a <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_SPI_TransmitReceive+0x86>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_SPI_TransmitReceive+0x86>
 8002402:	887b      	ldrh	r3, [r7, #2]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800240e:	e1bc      	b.n	800278a <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b04      	cmp	r3, #4
 800241a:	d003      	beq.n	8002424 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2205      	movs	r2, #5
 8002420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	887a      	ldrh	r2, [r7, #2]
 800243a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	887a      	ldrh	r2, [r7, #2]
 8002446:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002462:	d10f      	bne.n	8002484 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002482:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	d007      	beq.n	80024a2 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024aa:	f040 808b 	bne.w	80025c4 <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_SPI_TransmitReceive+0x13a>
 80024b6:	8b7b      	ldrh	r3, [r7, #26]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d178      	bne.n	80025ae <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	881a      	ldrh	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	1c9a      	adds	r2, r3, #2
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e0:	e065      	b.n	80025ae <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d12d      	bne.n	800254c <HAL_SPI_TransmitReceive+0x1ca>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d028      	beq.n	800254c <HAL_SPI_TransmitReceive+0x1ca>
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d125      	bne.n	800254c <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	881a      	ldrh	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	1c9a      	adds	r2, r3, #2
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10c      	bne.n	800254c <HAL_SPI_TransmitReceive+0x1ca>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253a:	d107      	bne.n	800254c <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800254a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d119      	bne.n	800258e <HAL_SPI_TransmitReceive+0x20c>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d014      	beq.n	800258e <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	b292      	uxth	r2, r2
 8002570:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	1c9a      	adds	r2, r3, #2
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800258a:	2301      	movs	r3, #1
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800258e:	f7fe fcc1 	bl	8000f14 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800259a:	429a      	cmp	r2, r3
 800259c:	d807      	bhi.n	80025ae <HAL_SPI_TransmitReceive+0x22c>
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a4:	d003      	beq.n	80025ae <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025ac:	e0ed      	b.n	800278a <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d194      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x160>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d18f      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x160>
 80025c2:	e08e      	b.n	80026e2 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_SPI_TransmitReceive+0x250>
 80025cc:	8b7b      	ldrh	r3, [r7, #26]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d17d      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	330c      	adds	r3, #12
 80025dc:	7812      	ldrb	r2, [r2, #0]
 80025de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f8:	e069      	b.n	80026ce <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b02      	cmp	r3, #2
 8002606:	d12e      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x2e4>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d029      	beq.n	8002666 <HAL_SPI_TransmitReceive+0x2e4>
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	2b01      	cmp	r3, #1
 8002616:	d126      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	330c      	adds	r3, #12
 8002622:	7812      	ldrb	r2, [r2, #0]
 8002624:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10c      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x2e4>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002654:	d107      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002664:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d119      	bne.n	80026a8 <HAL_SPI_TransmitReceive+0x326>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d014      	beq.n	80026a8 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026a4:	2301      	movs	r3, #1
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026a8:	f7fe fc34 	bl	8000f14 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d803      	bhi.n	80026c0 <HAL_SPI_TransmitReceive+0x33e>
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026be:	d102      	bne.n	80026c6 <HAL_SPI_TransmitReceive+0x344>
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026cc:	e05d      	b.n	800278a <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d190      	bne.n	80025fa <HAL_SPI_TransmitReceive+0x278>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d18b      	bne.n	80025fa <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ea:	d119      	bne.n	8002720 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f2:	2201      	movs	r2, #1
 80026f4:	2101      	movs	r1, #1
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f856 	bl	80027a8 <SPI_WaitFlagStateUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0202 	orr.w	r2, r3, #2
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8002714:	e039      	b.n	800278a <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 800271e:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d10d      	bne.n	800274a <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f043 0202 	orr.w	r2, r3, #2
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002742:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f8b2 	bl	80028b8 <SPI_EndRxTxTransaction>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002766:	e010      	b.n	800278a <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10b      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	e000      	b.n	800278a <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8002788:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800279a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3730      	adds	r7, #48	; 0x30
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027b8:	f7fe fbac 	bl	8000f14 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027c8:	f7fe fba4 	bl	8000f14 <HAL_GetTick>
 80027cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027ce:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	015b      	lsls	r3, r3, #5
 80027d4:	0d1b      	lsrs	r3, r3, #20
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027de:	e054      	b.n	800288a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e6:	d050      	beq.n	800288a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027e8:	f7fe fb94 	bl	8000f14 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d902      	bls.n	80027fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d13d      	bne.n	800287a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800280c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002816:	d111      	bne.n	800283c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002820:	d004      	beq.n	800282c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282a:	d107      	bne.n	800283c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002844:	d10f      	bne.n	8002866 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002864:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e017      	b.n	80028aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3b01      	subs	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4013      	ands	r3, r2
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	bf0c      	ite	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	2300      	movne	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d19b      	bne.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000010 	.word	0x20000010

080028b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <SPI_EndRxTxTransaction+0x7c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <SPI_EndRxTxTransaction+0x80>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	0d5b      	lsrs	r3, r3, #21
 80028d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028d4:	fb02 f303 	mul.w	r3, r2, r3
 80028d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e2:	d112      	bne.n	800290a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff ff5a 	bl	80027a8 <SPI_WaitFlagStateUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d016      	beq.n	8002928 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e00f      	b.n	800292a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3b01      	subs	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b80      	cmp	r3, #128	; 0x80
 8002922:	d0f2      	beq.n	800290a <SPI_EndRxTxTransaction+0x52>
 8002924:	e000      	b.n	8002928 <SPI_EndRxTxTransaction+0x70>
        break;
 8002926:	bf00      	nop
  }

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000010 	.word	0x20000010
 8002938:	165e9f81 	.word	0x165e9f81

0800293c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e03f      	b.n	80029ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fdf6 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800297e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f9cb 	bl	8002d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b08a      	sub	sp, #40	; 0x28
 80029da:	af02      	add	r7, sp, #8
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d17c      	bne.n	8002af0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_UART_Transmit+0x2c>
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e075      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Transmit+0x3e>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e06e      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2221      	movs	r2, #33	; 0x21
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a2a:	f7fe fa73 	bl	8000f14 <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a44:	d108      	bne.n	8002a58 <HAL_UART_Transmit+0x82>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d104      	bne.n	8002a58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e003      	b.n	8002a60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a68:	e02a      	b.n	8002ac0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f8e2 	bl	8002c3e <UART_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e036      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10b      	bne.n	8002aa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e007      	b.n	8002ab2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1cf      	bne.n	8002a6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2140      	movs	r1, #64	; 0x40
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f8b2 	bl	8002c3e <UART_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e006      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e000      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
  }
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b08a      	sub	sp, #40	; 0x28
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	f040 808c 	bne.w	8002c34 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_UART_Receive+0x2e>
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e084      	b.n	8002c36 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_UART_Receive+0x40>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e07d      	b.n	8002c36 <HAL_UART_Receive+0x13c>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2222      	movs	r2, #34	; 0x22
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b56:	f7fe f9dd 	bl	8000f14 <HAL_GetTick>
 8002b5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	88fa      	ldrh	r2, [r7, #6]
 8002b66:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b70:	d108      	bne.n	8002b84 <HAL_UART_Receive+0x8a>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d104      	bne.n	8002b84 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	e003      	b.n	8002b8c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b94:	e043      	b.n	8002c1e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f84c 	bl	8002c3e <UART_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e042      	b.n	8002c36 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	3302      	adds	r3, #2
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e01f      	b.n	8002c10 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd8:	d007      	beq.n	8002bea <HAL_UART_Receive+0xf0>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <HAL_UART_Receive+0xfe>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e008      	b.n	8002c0a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1b6      	bne.n	8002b96 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e000      	b.n	8002c36 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b090      	sub	sp, #64	; 0x40
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4e:	e050      	b.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c56:	d04c      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	f7fe f959 	bl	8000f14 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d241      	bcs.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8e:	637a      	str	r2, [r7, #52]	; 0x34
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e5      	bne.n	8002c6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3314      	adds	r3, #20
 8002ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3314      	adds	r3, #20
 8002cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc2:	623a      	str	r2, [r7, #32]
 8002cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	69f9      	ldr	r1, [r7, #28]
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e5      	bne.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e00f      	b.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d09f      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3740      	adds	r7, #64	; 0x40
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d20:	b09f      	sub	sp, #124	; 0x7c
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d32:	68d9      	ldr	r1, [r3, #12]
 8002d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	ea40 0301 	orr.w	r3, r0, r1
 8002d3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d60:	f021 010c 	bic.w	r1, r1, #12
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7a:	6999      	ldr	r1, [r3, #24]
 8002d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	ea40 0301 	orr.w	r3, r0, r1
 8002d84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4bc5      	ldr	r3, [pc, #788]	; (80030a0 <UART_SetConfig+0x384>)
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d004      	beq.n	8002d9a <UART_SetConfig+0x7e>
 8002d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4bc3      	ldr	r3, [pc, #780]	; (80030a4 <UART_SetConfig+0x388>)
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d103      	bne.n	8002da2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d9a:	f7ff f8e5 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8002d9e:	6778      	str	r0, [r7, #116]	; 0x74
 8002da0:	e002      	b.n	8002da8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002da2:	f7ff f8cd 	bl	8001f40 <HAL_RCC_GetPCLK1Freq>
 8002da6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db0:	f040 80b6 	bne.w	8002f20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db6:	461c      	mov	r4, r3
 8002db8:	f04f 0500 	mov.w	r5, #0
 8002dbc:	4622      	mov	r2, r4
 8002dbe:	462b      	mov	r3, r5
 8002dc0:	1891      	adds	r1, r2, r2
 8002dc2:	6439      	str	r1, [r7, #64]	; 0x40
 8002dc4:	415b      	adcs	r3, r3
 8002dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dcc:	1912      	adds	r2, r2, r4
 8002dce:	eb45 0303 	adc.w	r3, r5, r3
 8002dd2:	f04f 0000 	mov.w	r0, #0
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	00d9      	lsls	r1, r3, #3
 8002ddc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002de0:	00d0      	lsls	r0, r2, #3
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	1911      	adds	r1, r2, r4
 8002de8:	6639      	str	r1, [r7, #96]	; 0x60
 8002dea:	416b      	adcs	r3, r5
 8002dec:	667b      	str	r3, [r7, #100]	; 0x64
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	1891      	adds	r1, r2, r2
 8002dfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dfc:	415b      	adcs	r3, r3
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e08:	f7fd fa5a 	bl	80002c0 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4ba5      	ldr	r3, [pc, #660]	; (80030a8 <UART_SetConfig+0x38c>)
 8002e12:	fba3 2302 	umull	r2, r3, r3, r2
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	011e      	lsls	r6, r3, #4
 8002e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e1c:	461c      	mov	r4, r3
 8002e1e:	f04f 0500 	mov.w	r5, #0
 8002e22:	4622      	mov	r2, r4
 8002e24:	462b      	mov	r3, r5
 8002e26:	1891      	adds	r1, r2, r2
 8002e28:	6339      	str	r1, [r7, #48]	; 0x30
 8002e2a:	415b      	adcs	r3, r3
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e32:	1912      	adds	r2, r2, r4
 8002e34:	eb45 0303 	adc.w	r3, r5, r3
 8002e38:	f04f 0000 	mov.w	r0, #0
 8002e3c:	f04f 0100 	mov.w	r1, #0
 8002e40:	00d9      	lsls	r1, r3, #3
 8002e42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e46:	00d0      	lsls	r0, r2, #3
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	1911      	adds	r1, r2, r4
 8002e4e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e50:	416b      	adcs	r3, r5
 8002e52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	1891      	adds	r1, r2, r2
 8002e60:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e62:	415b      	adcs	r3, r3
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002e6e:	f7fd fa27 	bl	80002c0 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4b8c      	ldr	r3, [pc, #560]	; (80030a8 <UART_SetConfig+0x38c>)
 8002e78:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	2164      	movs	r1, #100	; 0x64
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	3332      	adds	r3, #50	; 0x32
 8002e8a:	4a87      	ldr	r2, [pc, #540]	; (80030a8 <UART_SetConfig+0x38c>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e98:	441e      	add	r6, r3
 8002e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f04f 0100 	mov.w	r1, #0
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	1894      	adds	r4, r2, r2
 8002ea8:	623c      	str	r4, [r7, #32]
 8002eaa:	415b      	adcs	r3, r3
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eb2:	1812      	adds	r2, r2, r0
 8002eb4:	eb41 0303 	adc.w	r3, r1, r3
 8002eb8:	f04f 0400 	mov.w	r4, #0
 8002ebc:	f04f 0500 	mov.w	r5, #0
 8002ec0:	00dd      	lsls	r5, r3, #3
 8002ec2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ec6:	00d4      	lsls	r4, r2, #3
 8002ec8:	4622      	mov	r2, r4
 8002eca:	462b      	mov	r3, r5
 8002ecc:	1814      	adds	r4, r2, r0
 8002ece:	653c      	str	r4, [r7, #80]	; 0x50
 8002ed0:	414b      	adcs	r3, r1
 8002ed2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	1891      	adds	r1, r2, r2
 8002ee0:	61b9      	str	r1, [r7, #24]
 8002ee2:	415b      	adcs	r3, r3
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002eee:	f7fd f9e7 	bl	80002c0 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4b6c      	ldr	r3, [pc, #432]	; (80030a8 <UART_SetConfig+0x38c>)
 8002ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	2164      	movs	r1, #100	; 0x64
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	3332      	adds	r3, #50	; 0x32
 8002f0a:	4a67      	ldr	r2, [pc, #412]	; (80030a8 <UART_SetConfig+0x38c>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	f003 0207 	and.w	r2, r3, #7
 8002f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4432      	add	r2, r6
 8002f1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f1e:	e0b9      	b.n	8003094 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f22:	461c      	mov	r4, r3
 8002f24:	f04f 0500 	mov.w	r5, #0
 8002f28:	4622      	mov	r2, r4
 8002f2a:	462b      	mov	r3, r5
 8002f2c:	1891      	adds	r1, r2, r2
 8002f2e:	6139      	str	r1, [r7, #16]
 8002f30:	415b      	adcs	r3, r3
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f38:	1912      	adds	r2, r2, r4
 8002f3a:	eb45 0303 	adc.w	r3, r5, r3
 8002f3e:	f04f 0000 	mov.w	r0, #0
 8002f42:	f04f 0100 	mov.w	r1, #0
 8002f46:	00d9      	lsls	r1, r3, #3
 8002f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f4c:	00d0      	lsls	r0, r2, #3
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	eb12 0804 	adds.w	r8, r2, r4
 8002f56:	eb43 0905 	adc.w	r9, r3, r5
 8002f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	008b      	lsls	r3, r1, #2
 8002f6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f72:	0082      	lsls	r2, r0, #2
 8002f74:	4640      	mov	r0, r8
 8002f76:	4649      	mov	r1, r9
 8002f78:	f7fd f9a2 	bl	80002c0 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4b49      	ldr	r3, [pc, #292]	; (80030a8 <UART_SetConfig+0x38c>)
 8002f82:	fba3 2302 	umull	r2, r3, r3, r2
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	011e      	lsls	r6, r3, #4
 8002f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f04f 0100 	mov.w	r1, #0
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	1894      	adds	r4, r2, r2
 8002f98:	60bc      	str	r4, [r7, #8]
 8002f9a:	415b      	adcs	r3, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fa2:	1812      	adds	r2, r2, r0
 8002fa4:	eb41 0303 	adc.w	r3, r1, r3
 8002fa8:	f04f 0400 	mov.w	r4, #0
 8002fac:	f04f 0500 	mov.w	r5, #0
 8002fb0:	00dd      	lsls	r5, r3, #3
 8002fb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fb6:	00d4      	lsls	r4, r2, #3
 8002fb8:	4622      	mov	r2, r4
 8002fba:	462b      	mov	r3, r5
 8002fbc:	1814      	adds	r4, r2, r0
 8002fbe:	64bc      	str	r4, [r7, #72]	; 0x48
 8002fc0:	414b      	adcs	r3, r1
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	008b      	lsls	r3, r1, #2
 8002fd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fdc:	0082      	lsls	r2, r0, #2
 8002fde:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002fe2:	f7fd f96d 	bl	80002c0 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <UART_SetConfig+0x38c>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2164      	movs	r1, #100	; 0x64
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	3332      	adds	r3, #50	; 0x32
 8002ffe:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <UART_SetConfig+0x38c>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800300a:	441e      	add	r6, r3
 800300c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800300e:	4618      	mov	r0, r3
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	1894      	adds	r4, r2, r2
 800301a:	603c      	str	r4, [r7, #0]
 800301c:	415b      	adcs	r3, r3
 800301e:	607b      	str	r3, [r7, #4]
 8003020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003024:	1812      	adds	r2, r2, r0
 8003026:	eb41 0303 	adc.w	r3, r1, r3
 800302a:	f04f 0400 	mov.w	r4, #0
 800302e:	f04f 0500 	mov.w	r5, #0
 8003032:	00dd      	lsls	r5, r3, #3
 8003034:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003038:	00d4      	lsls	r4, r2, #3
 800303a:	4622      	mov	r2, r4
 800303c:	462b      	mov	r3, r5
 800303e:	eb12 0a00 	adds.w	sl, r2, r0
 8003042:	eb43 0b01 	adc.w	fp, r3, r1
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4618      	mov	r0, r3
 800304c:	f04f 0100 	mov.w	r1, #0
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	008b      	lsls	r3, r1, #2
 800305a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800305e:	0082      	lsls	r2, r0, #2
 8003060:	4650      	mov	r0, sl
 8003062:	4659      	mov	r1, fp
 8003064:	f7fd f92c 	bl	80002c0 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <UART_SetConfig+0x38c>)
 800306e:	fba3 1302 	umull	r1, r3, r3, r2
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2164      	movs	r1, #100	; 0x64
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	3332      	adds	r3, #50	; 0x32
 8003080:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <UART_SetConfig+0x38c>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	f003 020f 	and.w	r2, r3, #15
 800308c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4432      	add	r2, r6
 8003092:	609a      	str	r2, [r3, #8]
}
 8003094:	bf00      	nop
 8003096:	377c      	adds	r7, #124	; 0x7c
 8003098:	46bd      	mov	sp, r7
 800309a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800309e:	bf00      	nop
 80030a0:	40011000 	.word	0x40011000
 80030a4:	40011400 	.word	0x40011400
 80030a8:	51eb851f 	.word	0x51eb851f

080030ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80030b0:	4904      	ldr	r1, [pc, #16]	; (80030c4 <MX_FATFS_Init+0x18>)
 80030b2:	4805      	ldr	r0, [pc, #20]	; (80030c8 <MX_FATFS_Init+0x1c>)
 80030b4:	f000 f8ae 	bl	8003214 <FATFS_LinkDriver>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <MX_FATFS_Init+0x20>)
 80030be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80030c0:	bf00      	nop
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20002394 	.word	0x20002394
 80030c8:	2000001c 	.word	0x2000001c
 80030cc:	20002398 	.word	0x20002398

080030d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	SD_disk_initialize (pdrv);
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fa5d 	bl	800359c <SD_disk_initialize>
	/* USER CODE END INIT */
}
 80030e2:	bf00      	nop
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	SD_disk_status (pdrv);
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fb35 	bl	8003768 <SD_disk_status>
  /* USER CODE END STATUS */
}
 80030fe:	bf00      	nop
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	4603      	mov	r3, r0
 8003116:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	SD_disk_read (pdrv,buff,sector,count);
 8003118:	7bf8      	ldrb	r0, [r7, #15]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	f000 fb38 	bl	8003794 <SD_disk_read>
  /* USER CODE END READ */
}
 8003124:	bf00      	nop
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4603      	mov	r3, r0
 800313c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	SD_disk_write (pdrv,buff,sector,count);
 800313e:	7bf8      	ldrb	r0, [r7, #15]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	f000 fb8f 	bl	8003868 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800314a:	bf00      	nop
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	603a      	str	r2, [r7, #0]
 800315e:	71fb      	strb	r3, [r7, #7]
 8003160:	460b      	mov	r3, r1
 8003162:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	SD_disk_ioctl (pdrv,cmd, buff);
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	79b9      	ldrb	r1, [r7, #6]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fc00 	bl	8003970 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8003170:	bf00      	nop
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800318a:	2301      	movs	r3, #1
 800318c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <FATFS_LinkDriverEx+0x94>)
 8003194:	7a5b      	ldrb	r3, [r3, #9]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d131      	bne.n	8003200 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <FATFS_LinkDriverEx+0x94>)
 800319e:	7a5b      	ldrb	r3, [r3, #9]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <FATFS_LinkDriverEx+0x94>)
 80031a6:	2100      	movs	r1, #0
 80031a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80031aa:	4b19      	ldr	r3, [pc, #100]	; (8003210 <FATFS_LinkDriverEx+0x94>)
 80031ac:	7a5b      	ldrb	r3, [r3, #9]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	4a17      	ldr	r2, [pc, #92]	; (8003210 <FATFS_LinkDriverEx+0x94>)
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <FATFS_LinkDriverEx+0x94>)
 80031bc:	7a5b      	ldrb	r3, [r3, #9]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <FATFS_LinkDriverEx+0x94>)
 80031c4:	4413      	add	r3, r2
 80031c6:	79fa      	ldrb	r2, [r7, #7]
 80031c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <FATFS_LinkDriverEx+0x94>)
 80031cc:	7a5b      	ldrb	r3, [r3, #9]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	b2d1      	uxtb	r1, r2
 80031d4:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <FATFS_LinkDriverEx+0x94>)
 80031d6:	7251      	strb	r1, [r2, #9]
 80031d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80031da:	7dbb      	ldrb	r3, [r7, #22]
 80031dc:	3330      	adds	r3, #48	; 0x30
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3301      	adds	r3, #1
 80031e8:	223a      	movs	r2, #58	; 0x3a
 80031ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3302      	adds	r3, #2
 80031f0:	222f      	movs	r2, #47	; 0x2f
 80031f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	3303      	adds	r3, #3
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003200:	7dfb      	ldrb	r3, [r7, #23]
}
 8003202:	4618      	mov	r0, r3
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	200000fc 	.word	0x200000fc

08003214 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	6839      	ldr	r1, [r7, #0]
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffaa 	bl	800317c <FATFS_LinkDriverEx>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003238:	2200      	movs	r2, #0
 800323a:	2110      	movs	r1, #16
 800323c:	4803      	ldr	r0, [pc, #12]	; (800324c <SELECT+0x18>)
 800323e:	f7fe f96f 	bl	8001520 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003242:	2001      	movs	r0, #1
 8003244:	f7fd fe72 	bl	8000f2c <HAL_Delay>
}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40020000 	.word	0x40020000

08003250 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003254:	2201      	movs	r2, #1
 8003256:	2110      	movs	r1, #16
 8003258:	4803      	ldr	r0, [pc, #12]	; (8003268 <DESELECT+0x18>)
 800325a:	f7fe f961 	bl	8001520 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800325e:	2001      	movs	r0, #1
 8003260:	f7fd fe64 	bl	8000f2c <HAL_Delay>
}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40020000 	.word	0x40020000

0800326c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003276:	bf00      	nop
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <SPI_TxByte+0x30>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b02      	cmp	r3, #2
 8003284:	d1f8      	bne.n	8003278 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003286:	1df9      	adds	r1, r7, #7
 8003288:	2364      	movs	r3, #100	; 0x64
 800328a:	2201      	movs	r2, #1
 800328c:	4803      	ldr	r0, [pc, #12]	; (800329c <SPI_TxByte+0x30>)
 800328e:	f7fe ff1a 	bl	80020c6 <HAL_SPI_Transmit>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20001304 	.word	0x20001304

080032a0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80032ac:	bf00      	nop
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <SPI_TxBuffer+0x30>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d1f8      	bne.n	80032ae <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80032bc:	887a      	ldrh	r2, [r7, #2]
 80032be:	2364      	movs	r3, #100	; 0x64
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4803      	ldr	r0, [pc, #12]	; (80032d0 <SPI_TxBuffer+0x30>)
 80032c4:	f7fe feff 	bl	80020c6 <HAL_SPI_Transmit>
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20001304 	.word	0x20001304

080032d4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80032da:	23ff      	movs	r3, #255	; 0xff
 80032dc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80032de:	bf00      	nop
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <SPI_RxByte+0x34>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d1f8      	bne.n	80032e0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80032ee:	1dba      	adds	r2, r7, #6
 80032f0:	1df9      	adds	r1, r7, #7
 80032f2:	2364      	movs	r3, #100	; 0x64
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2301      	movs	r3, #1
 80032f8:	4803      	ldr	r0, [pc, #12]	; (8003308 <SPI_RxByte+0x34>)
 80032fa:	f7ff f842 	bl	8002382 <HAL_SPI_TransmitReceive>

	return data;
 80032fe:	79bb      	ldrb	r3, [r7, #6]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20001304 	.word	0x20001304

0800330c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003314:	f7ff ffde 	bl	80032d4 <SPI_RxByte>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	701a      	strb	r2, [r3, #0]
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <SD_ReadyWait+0x30>)
 8003330:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003334:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003336:	f7ff ffcd 	bl	80032d4 <SPI_RxByte>
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	2bff      	cmp	r3, #255	; 0xff
 8003342:	d003      	beq.n	800334c <SD_ReadyWait+0x24>
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <SD_ReadyWait+0x30>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f4      	bne.n	8003336 <SD_ReadyWait+0xe>

	return res;
 800334c:	79fb      	ldrb	r3, [r7, #7]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20004404 	.word	0x20004404

0800335c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8003362:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003366:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8003368:	f7ff ff72 	bl	8003250 <DESELECT>
	for(int i = 0; i < 10; i++)
 800336c:	2300      	movs	r3, #0
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	e005      	b.n	800337e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8003372:	20ff      	movs	r0, #255	; 0xff
 8003374:	f7ff ff7a 	bl	800326c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	3301      	adds	r3, #1
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b09      	cmp	r3, #9
 8003382:	ddf6      	ble.n	8003372 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8003384:	f7ff ff56 	bl	8003234 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8003388:	2340      	movs	r3, #64	; 0x40
 800338a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800339c:	2395      	movs	r3, #149	; 0x95
 800339e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80033a0:	463b      	mov	r3, r7
 80033a2:	2106      	movs	r1, #6
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff7b 	bl	80032a0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80033aa:	e002      	b.n	80033b2 <SD_PowerOn+0x56>
	{
		cnt--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80033b2:	f7ff ff8f 	bl	80032d4 <SPI_RxByte>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d002      	beq.n	80033c2 <SD_PowerOn+0x66>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f4      	bne.n	80033ac <SD_PowerOn+0x50>
	}

	DESELECT();
 80033c2:	f7ff ff45 	bl	8003250 <DESELECT>
	SPI_TxByte(0XFF);
 80033c6:	20ff      	movs	r0, #255	; 0xff
 80033c8:	f7ff ff50 	bl	800326c <SPI_TxByte>

	PowerFlag = 1;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <SD_PowerOn+0x80>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000109 	.word	0x20000109

080033e0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <SD_PowerOff+0x14>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	20000109 	.word	0x20000109

080033f8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
	return PowerFlag;
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <SD_CheckPower+0x14>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000109 	.word	0x20000109

08003410 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <SD_RxDataBlock+0x58>)
 800341c:	22c8      	movs	r2, #200	; 0xc8
 800341e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003420:	f7ff ff58 	bl	80032d4 <SPI_RxByte>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2bff      	cmp	r3, #255	; 0xff
 800342c:	d103      	bne.n	8003436 <SD_RxDataBlock+0x26>
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <SD_RxDataBlock+0x58>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f4      	bne.n	8003420 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	2bfe      	cmp	r3, #254	; 0xfe
 800343a:	d001      	beq.n	8003440 <SD_RxDataBlock+0x30>
 800343c:	2300      	movs	r3, #0
 800343e:	e00f      	b.n	8003460 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ff60 	bl	800330c <SPI_RxBytePtr>
	} while(len--);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	1e5a      	subs	r2, r3, #1
 8003450:	603a      	str	r2, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f4      	bne.n	8003440 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8003456:	f7ff ff3d 	bl	80032d4 <SPI_RxByte>
	SPI_RxByte();
 800345a:	f7ff ff3b 	bl	80032d4 <SPI_RxByte>

	return TRUE;
 800345e:	2301      	movs	r3, #1
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20004406 	.word	0x20004406

0800346c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800347c:	f7ff ff54 	bl	8003328 <SD_ReadyWait>
 8003480:	4603      	mov	r3, r0
 8003482:	2bff      	cmp	r3, #255	; 0xff
 8003484:	d001      	beq.n	800348a <SD_TxDataBlock+0x1e>
 8003486:	2300      	movs	r3, #0
 8003488:	e02f      	b.n	80034ea <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff feed 	bl	800326c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	2bfd      	cmp	r3, #253	; 0xfd
 8003496:	d020      	beq.n	80034da <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff feff 	bl	80032a0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80034a2:	f7ff ff17 	bl	80032d4 <SPI_RxByte>
		SPI_RxByte();
 80034a6:	f7ff ff15 	bl	80032d4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80034aa:	e00b      	b.n	80034c4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80034ac:	f7ff ff12 	bl	80032d4 <SPI_RxByte>
 80034b0:	4603      	mov	r3, r0
 80034b2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d006      	beq.n	80034cc <SD_TxDataBlock+0x60>
			i++;
 80034be:	7bbb      	ldrb	r3, [r7, #14]
 80034c0:	3301      	adds	r3, #1
 80034c2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80034c4:	7bbb      	ldrb	r3, [r7, #14]
 80034c6:	2b40      	cmp	r3, #64	; 0x40
 80034c8:	d9f0      	bls.n	80034ac <SD_TxDataBlock+0x40>
 80034ca:	e000      	b.n	80034ce <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80034cc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80034ce:	bf00      	nop
 80034d0:	f7ff ff00 	bl	80032d4 <SPI_RxByte>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0fa      	beq.n	80034d0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d101      	bne.n	80034e8 <SD_TxDataBlock+0x7c>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <SD_TxDataBlock+0x7e>

	return FALSE;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	6039      	str	r1, [r7, #0]
 80034fc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80034fe:	f7ff ff13 	bl	8003328 <SD_ReadyWait>
 8003502:	4603      	mov	r3, r0
 8003504:	2bff      	cmp	r3, #255	; 0xff
 8003506:	d001      	beq.n	800350c <SD_SendCmd+0x1a>
 8003508:	23ff      	movs	r3, #255	; 0xff
 800350a:	e042      	b.n	8003592 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff feac 	bl	800326c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	0e1b      	lsrs	r3, r3, #24
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fea6 	bl	800326c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	0c1b      	lsrs	r3, r3, #16
 8003524:	b2db      	uxtb	r3, r3
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fea0 	bl	800326c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	b2db      	uxtb	r3, r3
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fe9a 	bl	800326c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fe95 	bl	800326c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d102      	bne.n	800354e <SD_SendCmd+0x5c>
 8003548:	2395      	movs	r3, #149	; 0x95
 800354a:	73fb      	strb	r3, [r7, #15]
 800354c:	e007      	b.n	800355e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	2b48      	cmp	r3, #72	; 0x48
 8003552:	d102      	bne.n	800355a <SD_SendCmd+0x68>
 8003554:	2387      	movs	r3, #135	; 0x87
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e001      	b.n	800355e <SD_SendCmd+0x6c>
	else crc = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fe83 	bl	800326c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	2b4c      	cmp	r3, #76	; 0x4c
 800356a:	d101      	bne.n	8003570 <SD_SendCmd+0x7e>
 800356c:	f7ff feb2 	bl	80032d4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003570:	230a      	movs	r3, #10
 8003572:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8003574:	f7ff feae 	bl	80032d4 <SPI_RxByte>
 8003578:	4603      	mov	r3, r0
 800357a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800357c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003580:	2b00      	cmp	r3, #0
 8003582:	da05      	bge.n	8003590 <SD_SendCmd+0x9e>
 8003584:	7bbb      	ldrb	r3, [r7, #14]
 8003586:	3b01      	subs	r3, #1
 8003588:	73bb      	strb	r3, [r7, #14]
 800358a:	7bbb      	ldrb	r3, [r7, #14]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f1      	bne.n	8003574 <SD_SendCmd+0x82>

	return res;
 8003590:	7b7b      	ldrb	r3, [r7, #13]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <SD_disk_initialize+0x14>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0d1      	b.n	8003754 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80035b0:	4b6a      	ldr	r3, [pc, #424]	; (800375c <SD_disk_initialize+0x1c0>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <SD_disk_initialize+0x2a>
 80035be:	4b67      	ldr	r3, [pc, #412]	; (800375c <SD_disk_initialize+0x1c0>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e0c6      	b.n	8003754 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80035c6:	f7ff fec9 	bl	800335c <SD_PowerOn>

	/* slave select */
	SELECT();
 80035ca:	f7ff fe33 	bl	8003234 <SELECT>

	/* check disk type */
	type = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80035d2:	2100      	movs	r1, #0
 80035d4:	2040      	movs	r0, #64	; 0x40
 80035d6:	f7ff ff8c 	bl	80034f2 <SD_SendCmd>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b01      	cmp	r3, #1
 80035de:	f040 80a1 	bne.w	8003724 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80035e2:	4b5f      	ldr	r3, [pc, #380]	; (8003760 <SD_disk_initialize+0x1c4>)
 80035e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035e8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80035ea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80035ee:	2048      	movs	r0, #72	; 0x48
 80035f0:	f7ff ff7f 	bl	80034f2 <SD_SendCmd>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d155      	bne.n	80036a6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e00c      	b.n	800361a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003600:	7bfc      	ldrb	r4, [r7, #15]
 8003602:	f7ff fe67 	bl	80032d4 <SPI_RxByte>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	f107 0310 	add.w	r3, r7, #16
 800360e:	4423      	add	r3, r4
 8003610:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	3301      	adds	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d9ef      	bls.n	8003600 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003620:	7abb      	ldrb	r3, [r7, #10]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d17e      	bne.n	8003724 <SD_disk_initialize+0x188>
 8003626:	7afb      	ldrb	r3, [r7, #11]
 8003628:	2baa      	cmp	r3, #170	; 0xaa
 800362a:	d17b      	bne.n	8003724 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800362c:	2100      	movs	r1, #0
 800362e:	2077      	movs	r0, #119	; 0x77
 8003630:	f7ff ff5f 	bl	80034f2 <SD_SendCmd>
 8003634:	4603      	mov	r3, r0
 8003636:	2b01      	cmp	r3, #1
 8003638:	d807      	bhi.n	800364a <SD_disk_initialize+0xae>
 800363a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800363e:	2069      	movs	r0, #105	; 0x69
 8003640:	f7ff ff57 	bl	80034f2 <SD_SendCmd>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800364a:	4b45      	ldr	r3, [pc, #276]	; (8003760 <SD_disk_initialize+0x1c4>)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1ec      	bne.n	800362c <SD_disk_initialize+0x90>
 8003652:	e000      	b.n	8003656 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003654:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003656:	4b42      	ldr	r3, [pc, #264]	; (8003760 <SD_disk_initialize+0x1c4>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d062      	beq.n	8003724 <SD_disk_initialize+0x188>
 800365e:	2100      	movs	r1, #0
 8003660:	207a      	movs	r0, #122	; 0x7a
 8003662:	f7ff ff46 	bl	80034f2 <SD_SendCmd>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d15b      	bne.n	8003724 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e00c      	b.n	800368c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8003672:	7bfc      	ldrb	r4, [r7, #15]
 8003674:	f7ff fe2e 	bl	80032d4 <SPI_RxByte>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	f107 0310 	add.w	r3, r7, #16
 8003680:	4423      	add	r3, r4
 8003682:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	3301      	adds	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b03      	cmp	r3, #3
 8003690:	d9ef      	bls.n	8003672 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003692:	7a3b      	ldrb	r3, [r7, #8]
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <SD_disk_initialize+0x104>
 800369c:	230c      	movs	r3, #12
 800369e:	e000      	b.n	80036a2 <SD_disk_initialize+0x106>
 80036a0:	2304      	movs	r3, #4
 80036a2:	73bb      	strb	r3, [r7, #14]
 80036a4:	e03e      	b.n	8003724 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80036a6:	2100      	movs	r1, #0
 80036a8:	2077      	movs	r0, #119	; 0x77
 80036aa:	f7ff ff22 	bl	80034f2 <SD_SendCmd>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d808      	bhi.n	80036c6 <SD_disk_initialize+0x12a>
 80036b4:	2100      	movs	r1, #0
 80036b6:	2069      	movs	r0, #105	; 0x69
 80036b8:	f7ff ff1b 	bl	80034f2 <SD_SendCmd>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d801      	bhi.n	80036c6 <SD_disk_initialize+0x12a>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e000      	b.n	80036c8 <SD_disk_initialize+0x12c>
 80036c6:	2301      	movs	r3, #1
 80036c8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80036ca:	7bbb      	ldrb	r3, [r7, #14]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d10e      	bne.n	80036ee <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80036d0:	2100      	movs	r1, #0
 80036d2:	2077      	movs	r0, #119	; 0x77
 80036d4:	f7ff ff0d 	bl	80034f2 <SD_SendCmd>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d80e      	bhi.n	80036fc <SD_disk_initialize+0x160>
 80036de:	2100      	movs	r1, #0
 80036e0:	2069      	movs	r0, #105	; 0x69
 80036e2:	f7ff ff06 	bl	80034f2 <SD_SendCmd>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d107      	bne.n	80036fc <SD_disk_initialize+0x160>
 80036ec:	e00c      	b.n	8003708 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80036ee:	2100      	movs	r1, #0
 80036f0:	2041      	movs	r0, #65	; 0x41
 80036f2:	f7ff fefe 	bl	80034f2 <SD_SendCmd>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80036fc:	4b18      	ldr	r3, [pc, #96]	; (8003760 <SD_disk_initialize+0x1c4>)
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e2      	bne.n	80036ca <SD_disk_initialize+0x12e>
 8003704:	e000      	b.n	8003708 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003706:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <SD_disk_initialize+0x1c4>)
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <SD_disk_initialize+0x184>
 8003710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003714:	2050      	movs	r0, #80	; 0x50
 8003716:	f7ff feec 	bl	80034f2 <SD_SendCmd>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <SD_disk_initialize+0x188>
 8003720:	2300      	movs	r3, #0
 8003722:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8003724:	4a0f      	ldr	r2, [pc, #60]	; (8003764 <SD_disk_initialize+0x1c8>)
 8003726:	7bbb      	ldrb	r3, [r7, #14]
 8003728:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800372a:	f7ff fd91 	bl	8003250 <DESELECT>
	SPI_RxByte();
 800372e:	f7ff fdd1 	bl	80032d4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8003732:	7bbb      	ldrb	r3, [r7, #14]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <SD_disk_initialize+0x1c0>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	b2da      	uxtb	r2, r3
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <SD_disk_initialize+0x1c0>)
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e001      	b.n	800374e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800374a:	f7ff fe49 	bl	80033e0 <SD_PowerOff>
	}

	return Stat;
 800374e:	4b03      	ldr	r3, [pc, #12]	; (800375c <SD_disk_initialize+0x1c0>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	b2db      	uxtb	r3, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	bd90      	pop	{r4, r7, pc}
 800375c:	20000030 	.word	0x20000030
 8003760:	20004406 	.word	0x20004406
 8003764:	20000108 	.word	0x20000108

08003768 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <SD_disk_status+0x14>
 8003778:	2301      	movs	r3, #1
 800377a:	e002      	b.n	8003782 <SD_disk_status+0x1a>
	return Stat;
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <SD_disk_status+0x28>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b2db      	uxtb	r3, r3
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000030 	.word	0x20000030

08003794 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	4603      	mov	r3, r0
 80037a2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <SD_disk_read+0x1c>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <SD_disk_read+0x20>
 80037b0:	2304      	movs	r3, #4
 80037b2:	e051      	b.n	8003858 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <SD_disk_read+0xcc>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <SD_disk_read+0x32>
 80037c2:	2303      	movs	r3, #3
 80037c4:	e048      	b.n	8003858 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <SD_disk_read+0xd0>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <SD_disk_read+0x44>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	025b      	lsls	r3, r3, #9
 80037d6:	607b      	str	r3, [r7, #4]

	SELECT();
 80037d8:	f7ff fd2c 	bl	8003234 <SELECT>

	if (count == 1)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d111      	bne.n	8003806 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	2051      	movs	r0, #81	; 0x51
 80037e6:	f7ff fe84 	bl	80034f2 <SD_SendCmd>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d129      	bne.n	8003844 <SD_disk_read+0xb0>
 80037f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037f4:	68b8      	ldr	r0, [r7, #8]
 80037f6:	f7ff fe0b 	bl	8003410 <SD_RxDataBlock>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d021      	beq.n	8003844 <SD_disk_read+0xb0>
 8003800:	2300      	movs	r3, #0
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	e01e      	b.n	8003844 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	2052      	movs	r0, #82	; 0x52
 800380a:	f7ff fe72 	bl	80034f2 <SD_SendCmd>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d117      	bne.n	8003844 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003818:	68b8      	ldr	r0, [r7, #8]
 800381a:	f7ff fdf9 	bl	8003410 <SD_RxDataBlock>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <SD_disk_read+0xa6>
				buff += 512;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800382a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	3b01      	subs	r3, #1
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ed      	bne.n	8003814 <SD_disk_read+0x80>
 8003838:	e000      	b.n	800383c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800383a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800383c:	2100      	movs	r1, #0
 800383e:	204c      	movs	r0, #76	; 0x4c
 8003840:	f7ff fe57 	bl	80034f2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003844:	f7ff fd04 	bl	8003250 <DESELECT>
	SPI_RxByte();
 8003848:	f7ff fd44 	bl	80032d4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf14      	ite	ne
 8003852:	2301      	movne	r3, #1
 8003854:	2300      	moveq	r3, #0
 8003856:	b2db      	uxtb	r3, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000030 	.word	0x20000030
 8003864:	20000108 	.word	0x20000108

08003868 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	4603      	mov	r3, r0
 8003876:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <SD_disk_write+0x1c>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <SD_disk_write+0x20>
 8003884:	2304      	movs	r3, #4
 8003886:	e06b      	b.n	8003960 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003888:	4b37      	ldr	r3, [pc, #220]	; (8003968 <SD_disk_write+0x100>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <SD_disk_write+0x32>
 8003896:	2303      	movs	r3, #3
 8003898:	e062      	b.n	8003960 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800389a:	4b33      	ldr	r3, [pc, #204]	; (8003968 <SD_disk_write+0x100>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <SD_disk_write+0x44>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e059      	b.n	8003960 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80038ac:	4b2f      	ldr	r3, [pc, #188]	; (800396c <SD_disk_write+0x104>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <SD_disk_write+0x56>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	025b      	lsls	r3, r3, #9
 80038bc:	607b      	str	r3, [r7, #4]

	SELECT();
 80038be:	f7ff fcb9 	bl	8003234 <SELECT>

	if (count == 1)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d110      	bne.n	80038ea <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	2058      	movs	r0, #88	; 0x58
 80038cc:	f7ff fe11 	bl	80034f2 <SD_SendCmd>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d13a      	bne.n	800394c <SD_disk_write+0xe4>
 80038d6:	21fe      	movs	r1, #254	; 0xfe
 80038d8:	68b8      	ldr	r0, [r7, #8]
 80038da:	f7ff fdc7 	bl	800346c <SD_TxDataBlock>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d033      	beq.n	800394c <SD_disk_write+0xe4>
			count = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	e030      	b.n	800394c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80038ea:	4b20      	ldr	r3, [pc, #128]	; (800396c <SD_disk_write+0x104>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80038f6:	2100      	movs	r1, #0
 80038f8:	2077      	movs	r0, #119	; 0x77
 80038fa:	f7ff fdfa 	bl	80034f2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80038fe:	6839      	ldr	r1, [r7, #0]
 8003900:	2057      	movs	r0, #87	; 0x57
 8003902:	f7ff fdf6 	bl	80034f2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	2059      	movs	r0, #89	; 0x59
 800390a:	f7ff fdf2 	bl	80034f2 <SD_SendCmd>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11b      	bne.n	800394c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003914:	21fc      	movs	r1, #252	; 0xfc
 8003916:	68b8      	ldr	r0, [r7, #8]
 8003918:	f7ff fda8 	bl	800346c <SD_TxDataBlock>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <SD_disk_write+0xd0>
				buff += 512;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003928:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	3b01      	subs	r3, #1
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1ee      	bne.n	8003914 <SD_disk_write+0xac>
 8003936:	e000      	b.n	800393a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003938:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800393a:	21fd      	movs	r1, #253	; 0xfd
 800393c:	2000      	movs	r0, #0
 800393e:	f7ff fd95 	bl	800346c <SD_TxDataBlock>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <SD_disk_write+0xe4>
			{
				count = 1;
 8003948:	2301      	movs	r3, #1
 800394a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800394c:	f7ff fc80 	bl	8003250 <DESELECT>
	SPI_RxByte();
 8003950:	f7ff fcc0 	bl	80032d4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf14      	ite	ne
 800395a:	2301      	movne	r3, #1
 800395c:	2300      	moveq	r3, #0
 800395e:	b2db      	uxtb	r3, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000030 	.word	0x20000030
 800396c:	20000108 	.word	0x20000108

08003970 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003970:	b590      	push	{r4, r7, lr}
 8003972:	b08b      	sub	sp, #44	; 0x2c
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	603a      	str	r2, [r7, #0]
 800397a:	71fb      	strb	r3, [r7, #7]
 800397c:	460b      	mov	r3, r1
 800397e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <SD_disk_ioctl+0x1e>
 800398a:	2304      	movs	r3, #4
 800398c:	e115      	b.n	8003bba <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8003994:	79bb      	ldrb	r3, [r7, #6]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d124      	bne.n	80039e4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d012      	beq.n	80039c8 <SD_disk_ioctl+0x58>
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	dc1a      	bgt.n	80039dc <SD_disk_ioctl+0x6c>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <SD_disk_ioctl+0x40>
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d006      	beq.n	80039bc <SD_disk_ioctl+0x4c>
 80039ae:	e015      	b.n	80039dc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80039b0:	f7ff fd16 	bl	80033e0 <SD_PowerOff>
			res = RES_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80039ba:	e0fc      	b.n	8003bb6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80039bc:	f7ff fcce 	bl	800335c <SD_PowerOn>
			res = RES_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80039c6:	e0f6      	b.n	8003bb6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	1c5c      	adds	r4, r3, #1
 80039cc:	f7ff fd14 	bl	80033f8 <SD_CheckPower>
 80039d0:	4603      	mov	r3, r0
 80039d2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80039da:	e0ec      	b.n	8003bb6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80039dc:	2304      	movs	r3, #4
 80039de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039e2:	e0e8      	b.n	8003bb6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80039e4:	4b77      	ldr	r3, [pc, #476]	; (8003bc4 <SD_disk_ioctl+0x254>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <SD_disk_ioctl+0x86>
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0e1      	b.n	8003bba <SD_disk_ioctl+0x24a>

		SELECT();
 80039f6:	f7ff fc1d 	bl	8003234 <SELECT>

		switch (ctrl)
 80039fa:	79bb      	ldrb	r3, [r7, #6]
 80039fc:	2b0d      	cmp	r3, #13
 80039fe:	f200 80cb 	bhi.w	8003b98 <SD_disk_ioctl+0x228>
 8003a02:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <SD_disk_ioctl+0x98>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003b03 	.word	0x08003b03
 8003a0c:	08003a41 	.word	0x08003a41
 8003a10:	08003af3 	.word	0x08003af3
 8003a14:	08003b99 	.word	0x08003b99
 8003a18:	08003b99 	.word	0x08003b99
 8003a1c:	08003b99 	.word	0x08003b99
 8003a20:	08003b99 	.word	0x08003b99
 8003a24:	08003b99 	.word	0x08003b99
 8003a28:	08003b99 	.word	0x08003b99
 8003a2c:	08003b99 	.word	0x08003b99
 8003a30:	08003b99 	.word	0x08003b99
 8003a34:	08003b15 	.word	0x08003b15
 8003a38:	08003b39 	.word	0x08003b39
 8003a3c:	08003b5d 	.word	0x08003b5d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003a40:	2100      	movs	r1, #0
 8003a42:	2049      	movs	r0, #73	; 0x49
 8003a44:	f7ff fd55 	bl	80034f2 <SD_SendCmd>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f040 80a8 	bne.w	8003ba0 <SD_disk_ioctl+0x230>
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	2110      	movs	r1, #16
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fcda 	bl	8003410 <SD_RxDataBlock>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 809e 	beq.w	8003ba0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8003a64:	7b3b      	ldrb	r3, [r7, #12]
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d10e      	bne.n	8003a8c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003a6e:	7d7b      	ldrb	r3, [r7, #21]
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	7d3b      	ldrb	r3, [r7, #20]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003a82:	8bfb      	ldrh	r3, [r7, #30]
 8003a84:	029a      	lsls	r2, r3, #10
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e02e      	b.n	8003aea <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003a8c:	7c7b      	ldrb	r3, [r7, #17]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	7dbb      	ldrb	r3, [r7, #22]
 8003a96:	09db      	lsrs	r3, r3, #7
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	7d7b      	ldrb	r3, [r7, #21]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 0306 	and.w	r3, r3, #6
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	3302      	adds	r3, #2
 8003ab0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003ab4:	7d3b      	ldrb	r3, [r7, #20]
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	7cbb      	ldrb	r3, [r7, #18]
 8003aca:	029b      	lsls	r3, r3, #10
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003adc:	8bfa      	ldrh	r2, [r7, #30]
 8003ade:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ae2:	3b09      	subs	r3, #9
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8003af0:	e056      	b.n	8003ba0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003b00:	e055      	b.n	8003bae <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003b02:	f7ff fc11 	bl	8003328 <SD_ReadyWait>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2bff      	cmp	r3, #255	; 0xff
 8003b0a:	d14b      	bne.n	8003ba4 <SD_disk_ioctl+0x234>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003b12:	e047      	b.n	8003ba4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003b14:	2100      	movs	r1, #0
 8003b16:	2049      	movs	r0, #73	; 0x49
 8003b18:	f7ff fceb 	bl	80034f2 <SD_SendCmd>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d142      	bne.n	8003ba8 <SD_disk_ioctl+0x238>
 8003b22:	2110      	movs	r1, #16
 8003b24:	6a38      	ldr	r0, [r7, #32]
 8003b26:	f7ff fc73 	bl	8003410 <SD_RxDataBlock>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d03b      	beq.n	8003ba8 <SD_disk_ioctl+0x238>
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003b36:	e037      	b.n	8003ba8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003b38:	2100      	movs	r1, #0
 8003b3a:	204a      	movs	r0, #74	; 0x4a
 8003b3c:	f7ff fcd9 	bl	80034f2 <SD_SendCmd>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d132      	bne.n	8003bac <SD_disk_ioctl+0x23c>
 8003b46:	2110      	movs	r1, #16
 8003b48:	6a38      	ldr	r0, [r7, #32]
 8003b4a:	f7ff fc61 	bl	8003410 <SD_RxDataBlock>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d02b      	beq.n	8003bac <SD_disk_ioctl+0x23c>
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003b5a:	e027      	b.n	8003bac <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	207a      	movs	r0, #122	; 0x7a
 8003b60:	f7ff fcc7 	bl	80034f2 <SD_SendCmd>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d116      	bne.n	8003b98 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003b70:	e00b      	b.n	8003b8a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8003b72:	6a3c      	ldr	r4, [r7, #32]
 8003b74:	1c63      	adds	r3, r4, #1
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	f7ff fbac 	bl	80032d4 <SPI_RxByte>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003b80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b84:	3301      	adds	r3, #1
 8003b86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003b8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d9ef      	bls.n	8003b72 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8003b98:	2304      	movs	r3, #4
 8003b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b9e:	e006      	b.n	8003bae <SD_disk_ioctl+0x23e>
			break;
 8003ba0:	bf00      	nop
 8003ba2:	e004      	b.n	8003bae <SD_disk_ioctl+0x23e>
			break;
 8003ba4:	bf00      	nop
 8003ba6:	e002      	b.n	8003bae <SD_disk_ioctl+0x23e>
			break;
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <SD_disk_ioctl+0x23e>
			break;
 8003bac:	bf00      	nop
		}

		DESELECT();
 8003bae:	f7ff fb4f 	bl	8003250 <DESELECT>
		SPI_RxByte();
 8003bb2:	f7ff fb8f 	bl	80032d4 <SPI_RxByte>
	}

	return res;
 8003bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	372c      	adds	r7, #44	; 0x2c
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd90      	pop	{r4, r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000030 	.word	0x20000030

08003bc8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
	HAL_Init();
 8003bcc:	f7fd f942 	bl	8000e54 <HAL_Init>
	SystemClock_Config();
 8003bd0:	f000 f810 	bl	8003bf4 <SystemClock_Config>
	Uart_Init();
 8003bd4:	f7fc fea4 	bl	8000920 <Uart_Init>
	ledInit();
 8003bd8:	f7fc fcee 	bl	80005b8 <ledInit>
	debounceInit();
 8003bdc:	f7fc fdd6 	bl	800078c <debounceInit>
	mefInit();
 8003be0:	f7fc fd0c 	bl	80005fc <mefInit>

	MX_SPI1_Init();
 8003be4:	f7fc fd96 	bl	8000714 <MX_SPI1_Init>
	MX_FATFS_Init();
 8003be8:	f7ff fa60 	bl	80030ac <MX_FATFS_Init>

	/* Infinite loop */
	while (1)
	{
		debounceUpdate();
 8003bec:	f7fc fde2 	bl	80007b4 <debounceUpdate>
 8003bf0:	e7fc      	b.n	8003bec <main+0x24>
	...

08003bf4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b094      	sub	sp, #80	; 0x50
 8003bf8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <SystemClock_Config+0xbc>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	4a2b      	ldr	r2, [pc, #172]	; (8003cb0 <SystemClock_Config+0xbc>)
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c08:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0a:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <SystemClock_Config+0xbc>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c16:	2300      	movs	r3, #0
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <SystemClock_Config+0xc0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a25      	ldr	r2, [pc, #148]	; (8003cb4 <SystemClock_Config+0xc0>)
 8003c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <SystemClock_Config+0xc0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c32:	2301      	movs	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003c36:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003c3a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c46:	2308      	movs	r3, #8
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8003c4a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c50:	2302      	movs	r3, #2
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c54:	2307      	movs	r3, #7
 8003c56:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c58:	f107 030c 	add.w	r3, r7, #12
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd fd23 	bl	80016a8 <HAL_RCC_OscConfig>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8003c68:	f000 f826 	bl	8003cb8 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003c6c:	f7fd fccc 	bl	8001608 <HAL_PWREx_EnableOverDrive>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8003c76:	f000 f81f 	bl	8003cb8 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003c7a:	230f      	movs	r3, #15
 8003c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c82:	2300      	movs	r3, #0
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8003c86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8003c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c96:	2105      	movs	r1, #5
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fd ff7d 	bl	8001b98 <HAL_RCC_ClockConfig>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8003ca4:	f000 f808 	bl	8003cb8 <Error_Handler>
  }
}
 8003ca8:	bf00      	nop
 8003caa:	3750      	adds	r7, #80	; 0x50
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40007000 	.word	0x40007000

08003cb8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	f7fc ff3b 	bl	8000b38 <BSP_LED_On>
  while (1)
 8003cc2:	e7fe      	b.n	8003cc2 <Error_Handler+0xa>

08003cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cfc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003cc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003cca:	e003      	b.n	8003cd4 <LoopCopyDataInit>

08003ccc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003cce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003cd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003cd2:	3104      	adds	r1, #4

08003cd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003cd4:	480b      	ldr	r0, [pc, #44]	; (8003d04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003cd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003cda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003cdc:	d3f6      	bcc.n	8003ccc <CopyDataInit>
  ldr  r2, =_sbss
 8003cde:	4a0b      	ldr	r2, [pc, #44]	; (8003d0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ce0:	e002      	b.n	8003ce8 <LoopFillZerobss>

08003ce2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ce2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ce4:	f842 3b04 	str.w	r3, [r2], #4

08003ce8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003cea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cec:	d3f9      	bcc.n	8003ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cee:	f7fc ffa9 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cf2:	f000 f817 	bl	8003d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cf6:	f7ff ff67 	bl	8003bc8 <main>
  bx  lr    
 8003cfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003cfc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003d00:	08004e64 	.word	0x08004e64
  ldr  r0, =_sdata
 8003d04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d08:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8003d0c:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8003d10:	20004418 	.word	0x20004418

08003d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d14:	e7fe      	b.n	8003d14 <ADC_IRQHandler>
	...

08003d18 <__errno>:
 8003d18:	4b01      	ldr	r3, [pc, #4]	; (8003d20 <__errno+0x8>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000034 	.word	0x20000034

08003d24 <__libc_init_array>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	4d0d      	ldr	r5, [pc, #52]	; (8003d5c <__libc_init_array+0x38>)
 8003d28:	4c0d      	ldr	r4, [pc, #52]	; (8003d60 <__libc_init_array+0x3c>)
 8003d2a:	1b64      	subs	r4, r4, r5
 8003d2c:	10a4      	asrs	r4, r4, #2
 8003d2e:	2600      	movs	r6, #0
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	d109      	bne.n	8003d48 <__libc_init_array+0x24>
 8003d34:	4d0b      	ldr	r5, [pc, #44]	; (8003d64 <__libc_init_array+0x40>)
 8003d36:	4c0c      	ldr	r4, [pc, #48]	; (8003d68 <__libc_init_array+0x44>)
 8003d38:	f000 ff76 	bl	8004c28 <_init>
 8003d3c:	1b64      	subs	r4, r4, r5
 8003d3e:	10a4      	asrs	r4, r4, #2
 8003d40:	2600      	movs	r6, #0
 8003d42:	42a6      	cmp	r6, r4
 8003d44:	d105      	bne.n	8003d52 <__libc_init_array+0x2e>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4c:	4798      	blx	r3
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7ee      	b.n	8003d30 <__libc_init_array+0xc>
 8003d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d56:	4798      	blx	r3
 8003d58:	3601      	adds	r6, #1
 8003d5a:	e7f2      	b.n	8003d42 <__libc_init_array+0x1e>
 8003d5c:	08004e5c 	.word	0x08004e5c
 8003d60:	08004e5c 	.word	0x08004e5c
 8003d64:	08004e5c 	.word	0x08004e5c
 8003d68:	08004e60 	.word	0x08004e60

08003d6c <memset>:
 8003d6c:	4402      	add	r2, r0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d100      	bne.n	8003d76 <memset+0xa>
 8003d74:	4770      	bx	lr
 8003d76:	f803 1b01 	strb.w	r1, [r3], #1
 8003d7a:	e7f9      	b.n	8003d70 <memset+0x4>

08003d7c <iprintf>:
 8003d7c:	b40f      	push	{r0, r1, r2, r3}
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <iprintf+0x2c>)
 8003d80:	b513      	push	{r0, r1, r4, lr}
 8003d82:	681c      	ldr	r4, [r3, #0]
 8003d84:	b124      	cbz	r4, 8003d90 <iprintf+0x14>
 8003d86:	69a3      	ldr	r3, [r4, #24]
 8003d88:	b913      	cbnz	r3, 8003d90 <iprintf+0x14>
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f000 f866 	bl	8003e5c <__sinit>
 8003d90:	ab05      	add	r3, sp, #20
 8003d92:	9a04      	ldr	r2, [sp, #16]
 8003d94:	68a1      	ldr	r1, [r4, #8]
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f000 f983 	bl	80040a4 <_vfiprintf_r>
 8003d9e:	b002      	add	sp, #8
 8003da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da4:	b004      	add	sp, #16
 8003da6:	4770      	bx	lr
 8003da8:	20000034 	.word	0x20000034

08003dac <std>:
 8003dac:	2300      	movs	r3, #0
 8003dae:	b510      	push	{r4, lr}
 8003db0:	4604      	mov	r4, r0
 8003db2:	e9c0 3300 	strd	r3, r3, [r0]
 8003db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dba:	6083      	str	r3, [r0, #8]
 8003dbc:	8181      	strh	r1, [r0, #12]
 8003dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8003dc0:	81c2      	strh	r2, [r0, #14]
 8003dc2:	6183      	str	r3, [r0, #24]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	305c      	adds	r0, #92	; 0x5c
 8003dca:	f7ff ffcf 	bl	8003d6c <memset>
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <std+0x38>)
 8003dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <std+0x3c>)
 8003dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <std+0x40>)
 8003dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <std+0x44>)
 8003ddc:	6224      	str	r4, [r4, #32]
 8003dde:	6323      	str	r3, [r4, #48]	; 0x30
 8003de0:	bd10      	pop	{r4, pc}
 8003de2:	bf00      	nop
 8003de4:	0800464d 	.word	0x0800464d
 8003de8:	0800466f 	.word	0x0800466f
 8003dec:	080046a7 	.word	0x080046a7
 8003df0:	080046cb 	.word	0x080046cb

08003df4 <_cleanup_r>:
 8003df4:	4901      	ldr	r1, [pc, #4]	; (8003dfc <_cleanup_r+0x8>)
 8003df6:	f000 b8af 	b.w	8003f58 <_fwalk_reent>
 8003dfa:	bf00      	nop
 8003dfc:	080049a5 	.word	0x080049a5

08003e00 <__sfmoreglue>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	1e4a      	subs	r2, r1, #1
 8003e04:	2568      	movs	r5, #104	; 0x68
 8003e06:	4355      	muls	r5, r2
 8003e08:	460e      	mov	r6, r1
 8003e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e0e:	f000 f8c5 	bl	8003f9c <_malloc_r>
 8003e12:	4604      	mov	r4, r0
 8003e14:	b140      	cbz	r0, 8003e28 <__sfmoreglue+0x28>
 8003e16:	2100      	movs	r1, #0
 8003e18:	e9c0 1600 	strd	r1, r6, [r0]
 8003e1c:	300c      	adds	r0, #12
 8003e1e:	60a0      	str	r0, [r4, #8]
 8003e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e24:	f7ff ffa2 	bl	8003d6c <memset>
 8003e28:	4620      	mov	r0, r4
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}

08003e2c <__sfp_lock_acquire>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	; (8003e34 <__sfp_lock_acquire+0x8>)
 8003e2e:	f000 b8b3 	b.w	8003f98 <__retarget_lock_acquire_recursive>
 8003e32:	bf00      	nop
 8003e34:	20004410 	.word	0x20004410

08003e38 <__sfp_lock_release>:
 8003e38:	4801      	ldr	r0, [pc, #4]	; (8003e40 <__sfp_lock_release+0x8>)
 8003e3a:	f000 b8ae 	b.w	8003f9a <__retarget_lock_release_recursive>
 8003e3e:	bf00      	nop
 8003e40:	20004410 	.word	0x20004410

08003e44 <__sinit_lock_acquire>:
 8003e44:	4801      	ldr	r0, [pc, #4]	; (8003e4c <__sinit_lock_acquire+0x8>)
 8003e46:	f000 b8a7 	b.w	8003f98 <__retarget_lock_acquire_recursive>
 8003e4a:	bf00      	nop
 8003e4c:	2000440b 	.word	0x2000440b

08003e50 <__sinit_lock_release>:
 8003e50:	4801      	ldr	r0, [pc, #4]	; (8003e58 <__sinit_lock_release+0x8>)
 8003e52:	f000 b8a2 	b.w	8003f9a <__retarget_lock_release_recursive>
 8003e56:	bf00      	nop
 8003e58:	2000440b 	.word	0x2000440b

08003e5c <__sinit>:
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	4604      	mov	r4, r0
 8003e60:	f7ff fff0 	bl	8003e44 <__sinit_lock_acquire>
 8003e64:	69a3      	ldr	r3, [r4, #24]
 8003e66:	b11b      	cbz	r3, 8003e70 <__sinit+0x14>
 8003e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e6c:	f7ff bff0 	b.w	8003e50 <__sinit_lock_release>
 8003e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e74:	6523      	str	r3, [r4, #80]	; 0x50
 8003e76:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <__sinit+0x68>)
 8003e78:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <__sinit+0x6c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e7e:	42a3      	cmp	r3, r4
 8003e80:	bf04      	itt	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	61a3      	streq	r3, [r4, #24]
 8003e86:	4620      	mov	r0, r4
 8003e88:	f000 f820 	bl	8003ecc <__sfp>
 8003e8c:	6060      	str	r0, [r4, #4]
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f000 f81c 	bl	8003ecc <__sfp>
 8003e94:	60a0      	str	r0, [r4, #8]
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 f818 	bl	8003ecc <__sfp>
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	60e0      	str	r0, [r4, #12]
 8003ea0:	2104      	movs	r1, #4
 8003ea2:	6860      	ldr	r0, [r4, #4]
 8003ea4:	f7ff ff82 	bl	8003dac <std>
 8003ea8:	68a0      	ldr	r0, [r4, #8]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2109      	movs	r1, #9
 8003eae:	f7ff ff7d 	bl	8003dac <std>
 8003eb2:	68e0      	ldr	r0, [r4, #12]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	2112      	movs	r1, #18
 8003eb8:	f7ff ff78 	bl	8003dac <std>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	61a3      	str	r3, [r4, #24]
 8003ec0:	e7d2      	b.n	8003e68 <__sinit+0xc>
 8003ec2:	bf00      	nop
 8003ec4:	08004dbc 	.word	0x08004dbc
 8003ec8:	08003df5 	.word	0x08003df5

08003ecc <__sfp>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	4607      	mov	r7, r0
 8003ed0:	f7ff ffac 	bl	8003e2c <__sfp_lock_acquire>
 8003ed4:	4b1e      	ldr	r3, [pc, #120]	; (8003f50 <__sfp+0x84>)
 8003ed6:	681e      	ldr	r6, [r3, #0]
 8003ed8:	69b3      	ldr	r3, [r6, #24]
 8003eda:	b913      	cbnz	r3, 8003ee2 <__sfp+0x16>
 8003edc:	4630      	mov	r0, r6
 8003ede:	f7ff ffbd 	bl	8003e5c <__sinit>
 8003ee2:	3648      	adds	r6, #72	; 0x48
 8003ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	d503      	bpl.n	8003ef4 <__sfp+0x28>
 8003eec:	6833      	ldr	r3, [r6, #0]
 8003eee:	b30b      	cbz	r3, 8003f34 <__sfp+0x68>
 8003ef0:	6836      	ldr	r6, [r6, #0]
 8003ef2:	e7f7      	b.n	8003ee4 <__sfp+0x18>
 8003ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ef8:	b9d5      	cbnz	r5, 8003f30 <__sfp+0x64>
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <__sfp+0x88>)
 8003efc:	60e3      	str	r3, [r4, #12]
 8003efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f02:	6665      	str	r5, [r4, #100]	; 0x64
 8003f04:	f000 f847 	bl	8003f96 <__retarget_lock_init_recursive>
 8003f08:	f7ff ff96 	bl	8003e38 <__sfp_lock_release>
 8003f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f14:	6025      	str	r5, [r4, #0]
 8003f16:	61a5      	str	r5, [r4, #24]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f20:	f7ff ff24 	bl	8003d6c <memset>
 8003f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f30:	3468      	adds	r4, #104	; 0x68
 8003f32:	e7d9      	b.n	8003ee8 <__sfp+0x1c>
 8003f34:	2104      	movs	r1, #4
 8003f36:	4638      	mov	r0, r7
 8003f38:	f7ff ff62 	bl	8003e00 <__sfmoreglue>
 8003f3c:	4604      	mov	r4, r0
 8003f3e:	6030      	str	r0, [r6, #0]
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d1d5      	bne.n	8003ef0 <__sfp+0x24>
 8003f44:	f7ff ff78 	bl	8003e38 <__sfp_lock_release>
 8003f48:	230c      	movs	r3, #12
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	e7ee      	b.n	8003f2c <__sfp+0x60>
 8003f4e:	bf00      	nop
 8003f50:	08004dbc 	.word	0x08004dbc
 8003f54:	ffff0001 	.word	0xffff0001

08003f58 <_fwalk_reent>:
 8003f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	4688      	mov	r8, r1
 8003f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f64:	2700      	movs	r7, #0
 8003f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8003f6e:	d505      	bpl.n	8003f7c <_fwalk_reent+0x24>
 8003f70:	6824      	ldr	r4, [r4, #0]
 8003f72:	2c00      	cmp	r4, #0
 8003f74:	d1f7      	bne.n	8003f66 <_fwalk_reent+0xe>
 8003f76:	4638      	mov	r0, r7
 8003f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f7c:	89ab      	ldrh	r3, [r5, #12]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d907      	bls.n	8003f92 <_fwalk_reent+0x3a>
 8003f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f86:	3301      	adds	r3, #1
 8003f88:	d003      	beq.n	8003f92 <_fwalk_reent+0x3a>
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	47c0      	blx	r8
 8003f90:	4307      	orrs	r7, r0
 8003f92:	3568      	adds	r5, #104	; 0x68
 8003f94:	e7e9      	b.n	8003f6a <_fwalk_reent+0x12>

08003f96 <__retarget_lock_init_recursive>:
 8003f96:	4770      	bx	lr

08003f98 <__retarget_lock_acquire_recursive>:
 8003f98:	4770      	bx	lr

08003f9a <__retarget_lock_release_recursive>:
 8003f9a:	4770      	bx	lr

08003f9c <_malloc_r>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	1ccd      	adds	r5, r1, #3
 8003fa0:	f025 0503 	bic.w	r5, r5, #3
 8003fa4:	3508      	adds	r5, #8
 8003fa6:	2d0c      	cmp	r5, #12
 8003fa8:	bf38      	it	cc
 8003faa:	250c      	movcc	r5, #12
 8003fac:	2d00      	cmp	r5, #0
 8003fae:	4606      	mov	r6, r0
 8003fb0:	db01      	blt.n	8003fb6 <_malloc_r+0x1a>
 8003fb2:	42a9      	cmp	r1, r5
 8003fb4:	d903      	bls.n	8003fbe <_malloc_r+0x22>
 8003fb6:	230c      	movs	r3, #12
 8003fb8:	6033      	str	r3, [r6, #0]
 8003fba:	2000      	movs	r0, #0
 8003fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fbe:	f000 fda3 	bl	8004b08 <__malloc_lock>
 8003fc2:	4921      	ldr	r1, [pc, #132]	; (8004048 <_malloc_r+0xac>)
 8003fc4:	680a      	ldr	r2, [r1, #0]
 8003fc6:	4614      	mov	r4, r2
 8003fc8:	b99c      	cbnz	r4, 8003ff2 <_malloc_r+0x56>
 8003fca:	4f20      	ldr	r7, [pc, #128]	; (800404c <_malloc_r+0xb0>)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	b923      	cbnz	r3, 8003fda <_malloc_r+0x3e>
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	f000 fb2a 	bl	800462c <_sbrk_r>
 8003fd8:	6038      	str	r0, [r7, #0]
 8003fda:	4629      	mov	r1, r5
 8003fdc:	4630      	mov	r0, r6
 8003fde:	f000 fb25 	bl	800462c <_sbrk_r>
 8003fe2:	1c43      	adds	r3, r0, #1
 8003fe4:	d123      	bne.n	800402e <_malloc_r+0x92>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	6033      	str	r3, [r6, #0]
 8003fea:	4630      	mov	r0, r6
 8003fec:	f000 fd92 	bl	8004b14 <__malloc_unlock>
 8003ff0:	e7e3      	b.n	8003fba <_malloc_r+0x1e>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	1b5b      	subs	r3, r3, r5
 8003ff6:	d417      	bmi.n	8004028 <_malloc_r+0x8c>
 8003ff8:	2b0b      	cmp	r3, #11
 8003ffa:	d903      	bls.n	8004004 <_malloc_r+0x68>
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	441c      	add	r4, r3
 8004000:	6025      	str	r5, [r4, #0]
 8004002:	e004      	b.n	800400e <_malloc_r+0x72>
 8004004:	6863      	ldr	r3, [r4, #4]
 8004006:	42a2      	cmp	r2, r4
 8004008:	bf0c      	ite	eq
 800400a:	600b      	streq	r3, [r1, #0]
 800400c:	6053      	strne	r3, [r2, #4]
 800400e:	4630      	mov	r0, r6
 8004010:	f000 fd80 	bl	8004b14 <__malloc_unlock>
 8004014:	f104 000b 	add.w	r0, r4, #11
 8004018:	1d23      	adds	r3, r4, #4
 800401a:	f020 0007 	bic.w	r0, r0, #7
 800401e:	1ac2      	subs	r2, r0, r3
 8004020:	d0cc      	beq.n	8003fbc <_malloc_r+0x20>
 8004022:	1a1b      	subs	r3, r3, r0
 8004024:	50a3      	str	r3, [r4, r2]
 8004026:	e7c9      	b.n	8003fbc <_malloc_r+0x20>
 8004028:	4622      	mov	r2, r4
 800402a:	6864      	ldr	r4, [r4, #4]
 800402c:	e7cc      	b.n	8003fc8 <_malloc_r+0x2c>
 800402e:	1cc4      	adds	r4, r0, #3
 8004030:	f024 0403 	bic.w	r4, r4, #3
 8004034:	42a0      	cmp	r0, r4
 8004036:	d0e3      	beq.n	8004000 <_malloc_r+0x64>
 8004038:	1a21      	subs	r1, r4, r0
 800403a:	4630      	mov	r0, r6
 800403c:	f000 faf6 	bl	800462c <_sbrk_r>
 8004040:	3001      	adds	r0, #1
 8004042:	d1dd      	bne.n	8004000 <_malloc_r+0x64>
 8004044:	e7cf      	b.n	8003fe6 <_malloc_r+0x4a>
 8004046:	bf00      	nop
 8004048:	2000010c 	.word	0x2000010c
 800404c:	20000110 	.word	0x20000110

08004050 <__sfputc_r>:
 8004050:	6893      	ldr	r3, [r2, #8]
 8004052:	3b01      	subs	r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	b410      	push	{r4}
 8004058:	6093      	str	r3, [r2, #8]
 800405a:	da08      	bge.n	800406e <__sfputc_r+0x1e>
 800405c:	6994      	ldr	r4, [r2, #24]
 800405e:	42a3      	cmp	r3, r4
 8004060:	db01      	blt.n	8004066 <__sfputc_r+0x16>
 8004062:	290a      	cmp	r1, #10
 8004064:	d103      	bne.n	800406e <__sfputc_r+0x1e>
 8004066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800406a:	f000 bb33 	b.w	80046d4 <__swbuf_r>
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	1c58      	adds	r0, r3, #1
 8004072:	6010      	str	r0, [r2, #0]
 8004074:	7019      	strb	r1, [r3, #0]
 8004076:	4608      	mov	r0, r1
 8004078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800407c:	4770      	bx	lr

0800407e <__sfputs_r>:
 800407e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004080:	4606      	mov	r6, r0
 8004082:	460f      	mov	r7, r1
 8004084:	4614      	mov	r4, r2
 8004086:	18d5      	adds	r5, r2, r3
 8004088:	42ac      	cmp	r4, r5
 800408a:	d101      	bne.n	8004090 <__sfputs_r+0x12>
 800408c:	2000      	movs	r0, #0
 800408e:	e007      	b.n	80040a0 <__sfputs_r+0x22>
 8004090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004094:	463a      	mov	r2, r7
 8004096:	4630      	mov	r0, r6
 8004098:	f7ff ffda 	bl	8004050 <__sfputc_r>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d1f3      	bne.n	8004088 <__sfputs_r+0xa>
 80040a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040a4 <_vfiprintf_r>:
 80040a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a8:	460d      	mov	r5, r1
 80040aa:	b09d      	sub	sp, #116	; 0x74
 80040ac:	4614      	mov	r4, r2
 80040ae:	4698      	mov	r8, r3
 80040b0:	4606      	mov	r6, r0
 80040b2:	b118      	cbz	r0, 80040bc <_vfiprintf_r+0x18>
 80040b4:	6983      	ldr	r3, [r0, #24]
 80040b6:	b90b      	cbnz	r3, 80040bc <_vfiprintf_r+0x18>
 80040b8:	f7ff fed0 	bl	8003e5c <__sinit>
 80040bc:	4b89      	ldr	r3, [pc, #548]	; (80042e4 <_vfiprintf_r+0x240>)
 80040be:	429d      	cmp	r5, r3
 80040c0:	d11b      	bne.n	80040fa <_vfiprintf_r+0x56>
 80040c2:	6875      	ldr	r5, [r6, #4]
 80040c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040c6:	07d9      	lsls	r1, r3, #31
 80040c8:	d405      	bmi.n	80040d6 <_vfiprintf_r+0x32>
 80040ca:	89ab      	ldrh	r3, [r5, #12]
 80040cc:	059a      	lsls	r2, r3, #22
 80040ce:	d402      	bmi.n	80040d6 <_vfiprintf_r+0x32>
 80040d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040d2:	f7ff ff61 	bl	8003f98 <__retarget_lock_acquire_recursive>
 80040d6:	89ab      	ldrh	r3, [r5, #12]
 80040d8:	071b      	lsls	r3, r3, #28
 80040da:	d501      	bpl.n	80040e0 <_vfiprintf_r+0x3c>
 80040dc:	692b      	ldr	r3, [r5, #16]
 80040de:	b9eb      	cbnz	r3, 800411c <_vfiprintf_r+0x78>
 80040e0:	4629      	mov	r1, r5
 80040e2:	4630      	mov	r0, r6
 80040e4:	f000 fb5a 	bl	800479c <__swsetup_r>
 80040e8:	b1c0      	cbz	r0, 800411c <_vfiprintf_r+0x78>
 80040ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040ec:	07dc      	lsls	r4, r3, #31
 80040ee:	d50e      	bpl.n	800410e <_vfiprintf_r+0x6a>
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040f4:	b01d      	add	sp, #116	; 0x74
 80040f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fa:	4b7b      	ldr	r3, [pc, #492]	; (80042e8 <_vfiprintf_r+0x244>)
 80040fc:	429d      	cmp	r5, r3
 80040fe:	d101      	bne.n	8004104 <_vfiprintf_r+0x60>
 8004100:	68b5      	ldr	r5, [r6, #8]
 8004102:	e7df      	b.n	80040c4 <_vfiprintf_r+0x20>
 8004104:	4b79      	ldr	r3, [pc, #484]	; (80042ec <_vfiprintf_r+0x248>)
 8004106:	429d      	cmp	r5, r3
 8004108:	bf08      	it	eq
 800410a:	68f5      	ldreq	r5, [r6, #12]
 800410c:	e7da      	b.n	80040c4 <_vfiprintf_r+0x20>
 800410e:	89ab      	ldrh	r3, [r5, #12]
 8004110:	0598      	lsls	r0, r3, #22
 8004112:	d4ed      	bmi.n	80040f0 <_vfiprintf_r+0x4c>
 8004114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004116:	f7ff ff40 	bl	8003f9a <__retarget_lock_release_recursive>
 800411a:	e7e9      	b.n	80040f0 <_vfiprintf_r+0x4c>
 800411c:	2300      	movs	r3, #0
 800411e:	9309      	str	r3, [sp, #36]	; 0x24
 8004120:	2320      	movs	r3, #32
 8004122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004126:	f8cd 800c 	str.w	r8, [sp, #12]
 800412a:	2330      	movs	r3, #48	; 0x30
 800412c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042f0 <_vfiprintf_r+0x24c>
 8004130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004134:	f04f 0901 	mov.w	r9, #1
 8004138:	4623      	mov	r3, r4
 800413a:	469a      	mov	sl, r3
 800413c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004140:	b10a      	cbz	r2, 8004146 <_vfiprintf_r+0xa2>
 8004142:	2a25      	cmp	r2, #37	; 0x25
 8004144:	d1f9      	bne.n	800413a <_vfiprintf_r+0x96>
 8004146:	ebba 0b04 	subs.w	fp, sl, r4
 800414a:	d00b      	beq.n	8004164 <_vfiprintf_r+0xc0>
 800414c:	465b      	mov	r3, fp
 800414e:	4622      	mov	r2, r4
 8004150:	4629      	mov	r1, r5
 8004152:	4630      	mov	r0, r6
 8004154:	f7ff ff93 	bl	800407e <__sfputs_r>
 8004158:	3001      	adds	r0, #1
 800415a:	f000 80aa 	beq.w	80042b2 <_vfiprintf_r+0x20e>
 800415e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004160:	445a      	add	r2, fp
 8004162:	9209      	str	r2, [sp, #36]	; 0x24
 8004164:	f89a 3000 	ldrb.w	r3, [sl]
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80a2 	beq.w	80042b2 <_vfiprintf_r+0x20e>
 800416e:	2300      	movs	r3, #0
 8004170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004178:	f10a 0a01 	add.w	sl, sl, #1
 800417c:	9304      	str	r3, [sp, #16]
 800417e:	9307      	str	r3, [sp, #28]
 8004180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004184:	931a      	str	r3, [sp, #104]	; 0x68
 8004186:	4654      	mov	r4, sl
 8004188:	2205      	movs	r2, #5
 800418a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800418e:	4858      	ldr	r0, [pc, #352]	; (80042f0 <_vfiprintf_r+0x24c>)
 8004190:	f7fc f846 	bl	8000220 <memchr>
 8004194:	9a04      	ldr	r2, [sp, #16]
 8004196:	b9d8      	cbnz	r0, 80041d0 <_vfiprintf_r+0x12c>
 8004198:	06d1      	lsls	r1, r2, #27
 800419a:	bf44      	itt	mi
 800419c:	2320      	movmi	r3, #32
 800419e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041a2:	0713      	lsls	r3, r2, #28
 80041a4:	bf44      	itt	mi
 80041a6:	232b      	movmi	r3, #43	; 0x2b
 80041a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041ac:	f89a 3000 	ldrb.w	r3, [sl]
 80041b0:	2b2a      	cmp	r3, #42	; 0x2a
 80041b2:	d015      	beq.n	80041e0 <_vfiprintf_r+0x13c>
 80041b4:	9a07      	ldr	r2, [sp, #28]
 80041b6:	4654      	mov	r4, sl
 80041b8:	2000      	movs	r0, #0
 80041ba:	f04f 0c0a 	mov.w	ip, #10
 80041be:	4621      	mov	r1, r4
 80041c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041c4:	3b30      	subs	r3, #48	; 0x30
 80041c6:	2b09      	cmp	r3, #9
 80041c8:	d94e      	bls.n	8004268 <_vfiprintf_r+0x1c4>
 80041ca:	b1b0      	cbz	r0, 80041fa <_vfiprintf_r+0x156>
 80041cc:	9207      	str	r2, [sp, #28]
 80041ce:	e014      	b.n	80041fa <_vfiprintf_r+0x156>
 80041d0:	eba0 0308 	sub.w	r3, r0, r8
 80041d4:	fa09 f303 	lsl.w	r3, r9, r3
 80041d8:	4313      	orrs	r3, r2
 80041da:	9304      	str	r3, [sp, #16]
 80041dc:	46a2      	mov	sl, r4
 80041de:	e7d2      	b.n	8004186 <_vfiprintf_r+0xe2>
 80041e0:	9b03      	ldr	r3, [sp, #12]
 80041e2:	1d19      	adds	r1, r3, #4
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	9103      	str	r1, [sp, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bfbb      	ittet	lt
 80041ec:	425b      	neglt	r3, r3
 80041ee:	f042 0202 	orrlt.w	r2, r2, #2
 80041f2:	9307      	strge	r3, [sp, #28]
 80041f4:	9307      	strlt	r3, [sp, #28]
 80041f6:	bfb8      	it	lt
 80041f8:	9204      	strlt	r2, [sp, #16]
 80041fa:	7823      	ldrb	r3, [r4, #0]
 80041fc:	2b2e      	cmp	r3, #46	; 0x2e
 80041fe:	d10c      	bne.n	800421a <_vfiprintf_r+0x176>
 8004200:	7863      	ldrb	r3, [r4, #1]
 8004202:	2b2a      	cmp	r3, #42	; 0x2a
 8004204:	d135      	bne.n	8004272 <_vfiprintf_r+0x1ce>
 8004206:	9b03      	ldr	r3, [sp, #12]
 8004208:	1d1a      	adds	r2, r3, #4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	9203      	str	r2, [sp, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	bfb8      	it	lt
 8004212:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004216:	3402      	adds	r4, #2
 8004218:	9305      	str	r3, [sp, #20]
 800421a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004300 <_vfiprintf_r+0x25c>
 800421e:	7821      	ldrb	r1, [r4, #0]
 8004220:	2203      	movs	r2, #3
 8004222:	4650      	mov	r0, sl
 8004224:	f7fb fffc 	bl	8000220 <memchr>
 8004228:	b140      	cbz	r0, 800423c <_vfiprintf_r+0x198>
 800422a:	2340      	movs	r3, #64	; 0x40
 800422c:	eba0 000a 	sub.w	r0, r0, sl
 8004230:	fa03 f000 	lsl.w	r0, r3, r0
 8004234:	9b04      	ldr	r3, [sp, #16]
 8004236:	4303      	orrs	r3, r0
 8004238:	3401      	adds	r4, #1
 800423a:	9304      	str	r3, [sp, #16]
 800423c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004240:	482c      	ldr	r0, [pc, #176]	; (80042f4 <_vfiprintf_r+0x250>)
 8004242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004246:	2206      	movs	r2, #6
 8004248:	f7fb ffea 	bl	8000220 <memchr>
 800424c:	2800      	cmp	r0, #0
 800424e:	d03f      	beq.n	80042d0 <_vfiprintf_r+0x22c>
 8004250:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <_vfiprintf_r+0x254>)
 8004252:	bb1b      	cbnz	r3, 800429c <_vfiprintf_r+0x1f8>
 8004254:	9b03      	ldr	r3, [sp, #12]
 8004256:	3307      	adds	r3, #7
 8004258:	f023 0307 	bic.w	r3, r3, #7
 800425c:	3308      	adds	r3, #8
 800425e:	9303      	str	r3, [sp, #12]
 8004260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004262:	443b      	add	r3, r7
 8004264:	9309      	str	r3, [sp, #36]	; 0x24
 8004266:	e767      	b.n	8004138 <_vfiprintf_r+0x94>
 8004268:	fb0c 3202 	mla	r2, ip, r2, r3
 800426c:	460c      	mov	r4, r1
 800426e:	2001      	movs	r0, #1
 8004270:	e7a5      	b.n	80041be <_vfiprintf_r+0x11a>
 8004272:	2300      	movs	r3, #0
 8004274:	3401      	adds	r4, #1
 8004276:	9305      	str	r3, [sp, #20]
 8004278:	4619      	mov	r1, r3
 800427a:	f04f 0c0a 	mov.w	ip, #10
 800427e:	4620      	mov	r0, r4
 8004280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004284:	3a30      	subs	r2, #48	; 0x30
 8004286:	2a09      	cmp	r2, #9
 8004288:	d903      	bls.n	8004292 <_vfiprintf_r+0x1ee>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0c5      	beq.n	800421a <_vfiprintf_r+0x176>
 800428e:	9105      	str	r1, [sp, #20]
 8004290:	e7c3      	b.n	800421a <_vfiprintf_r+0x176>
 8004292:	fb0c 2101 	mla	r1, ip, r1, r2
 8004296:	4604      	mov	r4, r0
 8004298:	2301      	movs	r3, #1
 800429a:	e7f0      	b.n	800427e <_vfiprintf_r+0x1da>
 800429c:	ab03      	add	r3, sp, #12
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	462a      	mov	r2, r5
 80042a2:	4b16      	ldr	r3, [pc, #88]	; (80042fc <_vfiprintf_r+0x258>)
 80042a4:	a904      	add	r1, sp, #16
 80042a6:	4630      	mov	r0, r6
 80042a8:	f3af 8000 	nop.w
 80042ac:	4607      	mov	r7, r0
 80042ae:	1c78      	adds	r0, r7, #1
 80042b0:	d1d6      	bne.n	8004260 <_vfiprintf_r+0x1bc>
 80042b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042b4:	07d9      	lsls	r1, r3, #31
 80042b6:	d405      	bmi.n	80042c4 <_vfiprintf_r+0x220>
 80042b8:	89ab      	ldrh	r3, [r5, #12]
 80042ba:	059a      	lsls	r2, r3, #22
 80042bc:	d402      	bmi.n	80042c4 <_vfiprintf_r+0x220>
 80042be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042c0:	f7ff fe6b 	bl	8003f9a <__retarget_lock_release_recursive>
 80042c4:	89ab      	ldrh	r3, [r5, #12]
 80042c6:	065b      	lsls	r3, r3, #25
 80042c8:	f53f af12 	bmi.w	80040f0 <_vfiprintf_r+0x4c>
 80042cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042ce:	e711      	b.n	80040f4 <_vfiprintf_r+0x50>
 80042d0:	ab03      	add	r3, sp, #12
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	462a      	mov	r2, r5
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <_vfiprintf_r+0x258>)
 80042d8:	a904      	add	r1, sp, #16
 80042da:	4630      	mov	r0, r6
 80042dc:	f000 f880 	bl	80043e0 <_printf_i>
 80042e0:	e7e4      	b.n	80042ac <_vfiprintf_r+0x208>
 80042e2:	bf00      	nop
 80042e4:	08004de0 	.word	0x08004de0
 80042e8:	08004e00 	.word	0x08004e00
 80042ec:	08004dc0 	.word	0x08004dc0
 80042f0:	08004e20 	.word	0x08004e20
 80042f4:	08004e2a 	.word	0x08004e2a
 80042f8:	00000000 	.word	0x00000000
 80042fc:	0800407f 	.word	0x0800407f
 8004300:	08004e26 	.word	0x08004e26

08004304 <_printf_common>:
 8004304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004308:	4616      	mov	r6, r2
 800430a:	4699      	mov	r9, r3
 800430c:	688a      	ldr	r2, [r1, #8]
 800430e:	690b      	ldr	r3, [r1, #16]
 8004310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004314:	4293      	cmp	r3, r2
 8004316:	bfb8      	it	lt
 8004318:	4613      	movlt	r3, r2
 800431a:	6033      	str	r3, [r6, #0]
 800431c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004320:	4607      	mov	r7, r0
 8004322:	460c      	mov	r4, r1
 8004324:	b10a      	cbz	r2, 800432a <_printf_common+0x26>
 8004326:	3301      	adds	r3, #1
 8004328:	6033      	str	r3, [r6, #0]
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	0699      	lsls	r1, r3, #26
 800432e:	bf42      	ittt	mi
 8004330:	6833      	ldrmi	r3, [r6, #0]
 8004332:	3302      	addmi	r3, #2
 8004334:	6033      	strmi	r3, [r6, #0]
 8004336:	6825      	ldr	r5, [r4, #0]
 8004338:	f015 0506 	ands.w	r5, r5, #6
 800433c:	d106      	bne.n	800434c <_printf_common+0x48>
 800433e:	f104 0a19 	add.w	sl, r4, #25
 8004342:	68e3      	ldr	r3, [r4, #12]
 8004344:	6832      	ldr	r2, [r6, #0]
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	42ab      	cmp	r3, r5
 800434a:	dc26      	bgt.n	800439a <_printf_common+0x96>
 800434c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004350:	1e13      	subs	r3, r2, #0
 8004352:	6822      	ldr	r2, [r4, #0]
 8004354:	bf18      	it	ne
 8004356:	2301      	movne	r3, #1
 8004358:	0692      	lsls	r2, r2, #26
 800435a:	d42b      	bmi.n	80043b4 <_printf_common+0xb0>
 800435c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004360:	4649      	mov	r1, r9
 8004362:	4638      	mov	r0, r7
 8004364:	47c0      	blx	r8
 8004366:	3001      	adds	r0, #1
 8004368:	d01e      	beq.n	80043a8 <_printf_common+0xa4>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	68e5      	ldr	r5, [r4, #12]
 800436e:	6832      	ldr	r2, [r6, #0]
 8004370:	f003 0306 	and.w	r3, r3, #6
 8004374:	2b04      	cmp	r3, #4
 8004376:	bf08      	it	eq
 8004378:	1aad      	subeq	r5, r5, r2
 800437a:	68a3      	ldr	r3, [r4, #8]
 800437c:	6922      	ldr	r2, [r4, #16]
 800437e:	bf0c      	ite	eq
 8004380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004384:	2500      	movne	r5, #0
 8004386:	4293      	cmp	r3, r2
 8004388:	bfc4      	itt	gt
 800438a:	1a9b      	subgt	r3, r3, r2
 800438c:	18ed      	addgt	r5, r5, r3
 800438e:	2600      	movs	r6, #0
 8004390:	341a      	adds	r4, #26
 8004392:	42b5      	cmp	r5, r6
 8004394:	d11a      	bne.n	80043cc <_printf_common+0xc8>
 8004396:	2000      	movs	r0, #0
 8004398:	e008      	b.n	80043ac <_printf_common+0xa8>
 800439a:	2301      	movs	r3, #1
 800439c:	4652      	mov	r2, sl
 800439e:	4649      	mov	r1, r9
 80043a0:	4638      	mov	r0, r7
 80043a2:	47c0      	blx	r8
 80043a4:	3001      	adds	r0, #1
 80043a6:	d103      	bne.n	80043b0 <_printf_common+0xac>
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b0:	3501      	adds	r5, #1
 80043b2:	e7c6      	b.n	8004342 <_printf_common+0x3e>
 80043b4:	18e1      	adds	r1, r4, r3
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	2030      	movs	r0, #48	; 0x30
 80043ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043be:	4422      	add	r2, r4
 80043c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043c8:	3302      	adds	r3, #2
 80043ca:	e7c7      	b.n	800435c <_printf_common+0x58>
 80043cc:	2301      	movs	r3, #1
 80043ce:	4622      	mov	r2, r4
 80043d0:	4649      	mov	r1, r9
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c0      	blx	r8
 80043d6:	3001      	adds	r0, #1
 80043d8:	d0e6      	beq.n	80043a8 <_printf_common+0xa4>
 80043da:	3601      	adds	r6, #1
 80043dc:	e7d9      	b.n	8004392 <_printf_common+0x8e>
	...

080043e0 <_printf_i>:
 80043e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043e4:	460c      	mov	r4, r1
 80043e6:	4691      	mov	r9, r2
 80043e8:	7e27      	ldrb	r7, [r4, #24]
 80043ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043ec:	2f78      	cmp	r7, #120	; 0x78
 80043ee:	4680      	mov	r8, r0
 80043f0:	469a      	mov	sl, r3
 80043f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043f6:	d807      	bhi.n	8004408 <_printf_i+0x28>
 80043f8:	2f62      	cmp	r7, #98	; 0x62
 80043fa:	d80a      	bhi.n	8004412 <_printf_i+0x32>
 80043fc:	2f00      	cmp	r7, #0
 80043fe:	f000 80d8 	beq.w	80045b2 <_printf_i+0x1d2>
 8004402:	2f58      	cmp	r7, #88	; 0x58
 8004404:	f000 80a3 	beq.w	800454e <_printf_i+0x16e>
 8004408:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800440c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004410:	e03a      	b.n	8004488 <_printf_i+0xa8>
 8004412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004416:	2b15      	cmp	r3, #21
 8004418:	d8f6      	bhi.n	8004408 <_printf_i+0x28>
 800441a:	a001      	add	r0, pc, #4	; (adr r0, 8004420 <_printf_i+0x40>)
 800441c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004420:	08004479 	.word	0x08004479
 8004424:	0800448d 	.word	0x0800448d
 8004428:	08004409 	.word	0x08004409
 800442c:	08004409 	.word	0x08004409
 8004430:	08004409 	.word	0x08004409
 8004434:	08004409 	.word	0x08004409
 8004438:	0800448d 	.word	0x0800448d
 800443c:	08004409 	.word	0x08004409
 8004440:	08004409 	.word	0x08004409
 8004444:	08004409 	.word	0x08004409
 8004448:	08004409 	.word	0x08004409
 800444c:	08004599 	.word	0x08004599
 8004450:	080044bd 	.word	0x080044bd
 8004454:	0800457b 	.word	0x0800457b
 8004458:	08004409 	.word	0x08004409
 800445c:	08004409 	.word	0x08004409
 8004460:	080045bb 	.word	0x080045bb
 8004464:	08004409 	.word	0x08004409
 8004468:	080044bd 	.word	0x080044bd
 800446c:	08004409 	.word	0x08004409
 8004470:	08004409 	.word	0x08004409
 8004474:	08004583 	.word	0x08004583
 8004478:	680b      	ldr	r3, [r1, #0]
 800447a:	1d1a      	adds	r2, r3, #4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	600a      	str	r2, [r1, #0]
 8004480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004488:	2301      	movs	r3, #1
 800448a:	e0a3      	b.n	80045d4 <_printf_i+0x1f4>
 800448c:	6825      	ldr	r5, [r4, #0]
 800448e:	6808      	ldr	r0, [r1, #0]
 8004490:	062e      	lsls	r6, r5, #24
 8004492:	f100 0304 	add.w	r3, r0, #4
 8004496:	d50a      	bpl.n	80044ae <_printf_i+0xce>
 8004498:	6805      	ldr	r5, [r0, #0]
 800449a:	600b      	str	r3, [r1, #0]
 800449c:	2d00      	cmp	r5, #0
 800449e:	da03      	bge.n	80044a8 <_printf_i+0xc8>
 80044a0:	232d      	movs	r3, #45	; 0x2d
 80044a2:	426d      	negs	r5, r5
 80044a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a8:	485e      	ldr	r0, [pc, #376]	; (8004624 <_printf_i+0x244>)
 80044aa:	230a      	movs	r3, #10
 80044ac:	e019      	b.n	80044e2 <_printf_i+0x102>
 80044ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80044b2:	6805      	ldr	r5, [r0, #0]
 80044b4:	600b      	str	r3, [r1, #0]
 80044b6:	bf18      	it	ne
 80044b8:	b22d      	sxthne	r5, r5
 80044ba:	e7ef      	b.n	800449c <_printf_i+0xbc>
 80044bc:	680b      	ldr	r3, [r1, #0]
 80044be:	6825      	ldr	r5, [r4, #0]
 80044c0:	1d18      	adds	r0, r3, #4
 80044c2:	6008      	str	r0, [r1, #0]
 80044c4:	0628      	lsls	r0, r5, #24
 80044c6:	d501      	bpl.n	80044cc <_printf_i+0xec>
 80044c8:	681d      	ldr	r5, [r3, #0]
 80044ca:	e002      	b.n	80044d2 <_printf_i+0xf2>
 80044cc:	0669      	lsls	r1, r5, #25
 80044ce:	d5fb      	bpl.n	80044c8 <_printf_i+0xe8>
 80044d0:	881d      	ldrh	r5, [r3, #0]
 80044d2:	4854      	ldr	r0, [pc, #336]	; (8004624 <_printf_i+0x244>)
 80044d4:	2f6f      	cmp	r7, #111	; 0x6f
 80044d6:	bf0c      	ite	eq
 80044d8:	2308      	moveq	r3, #8
 80044da:	230a      	movne	r3, #10
 80044dc:	2100      	movs	r1, #0
 80044de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044e2:	6866      	ldr	r6, [r4, #4]
 80044e4:	60a6      	str	r6, [r4, #8]
 80044e6:	2e00      	cmp	r6, #0
 80044e8:	bfa2      	ittt	ge
 80044ea:	6821      	ldrge	r1, [r4, #0]
 80044ec:	f021 0104 	bicge.w	r1, r1, #4
 80044f0:	6021      	strge	r1, [r4, #0]
 80044f2:	b90d      	cbnz	r5, 80044f8 <_printf_i+0x118>
 80044f4:	2e00      	cmp	r6, #0
 80044f6:	d04d      	beq.n	8004594 <_printf_i+0x1b4>
 80044f8:	4616      	mov	r6, r2
 80044fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80044fe:	fb03 5711 	mls	r7, r3, r1, r5
 8004502:	5dc7      	ldrb	r7, [r0, r7]
 8004504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004508:	462f      	mov	r7, r5
 800450a:	42bb      	cmp	r3, r7
 800450c:	460d      	mov	r5, r1
 800450e:	d9f4      	bls.n	80044fa <_printf_i+0x11a>
 8004510:	2b08      	cmp	r3, #8
 8004512:	d10b      	bne.n	800452c <_printf_i+0x14c>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	07df      	lsls	r7, r3, #31
 8004518:	d508      	bpl.n	800452c <_printf_i+0x14c>
 800451a:	6923      	ldr	r3, [r4, #16]
 800451c:	6861      	ldr	r1, [r4, #4]
 800451e:	4299      	cmp	r1, r3
 8004520:	bfde      	ittt	le
 8004522:	2330      	movle	r3, #48	; 0x30
 8004524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004528:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800452c:	1b92      	subs	r2, r2, r6
 800452e:	6122      	str	r2, [r4, #16]
 8004530:	f8cd a000 	str.w	sl, [sp]
 8004534:	464b      	mov	r3, r9
 8004536:	aa03      	add	r2, sp, #12
 8004538:	4621      	mov	r1, r4
 800453a:	4640      	mov	r0, r8
 800453c:	f7ff fee2 	bl	8004304 <_printf_common>
 8004540:	3001      	adds	r0, #1
 8004542:	d14c      	bne.n	80045de <_printf_i+0x1fe>
 8004544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004548:	b004      	add	sp, #16
 800454a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454e:	4835      	ldr	r0, [pc, #212]	; (8004624 <_printf_i+0x244>)
 8004550:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	680e      	ldr	r6, [r1, #0]
 8004558:	061f      	lsls	r7, r3, #24
 800455a:	f856 5b04 	ldr.w	r5, [r6], #4
 800455e:	600e      	str	r6, [r1, #0]
 8004560:	d514      	bpl.n	800458c <_printf_i+0x1ac>
 8004562:	07d9      	lsls	r1, r3, #31
 8004564:	bf44      	itt	mi
 8004566:	f043 0320 	orrmi.w	r3, r3, #32
 800456a:	6023      	strmi	r3, [r4, #0]
 800456c:	b91d      	cbnz	r5, 8004576 <_printf_i+0x196>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	f023 0320 	bic.w	r3, r3, #32
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	2310      	movs	r3, #16
 8004578:	e7b0      	b.n	80044dc <_printf_i+0xfc>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	f043 0320 	orr.w	r3, r3, #32
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	2378      	movs	r3, #120	; 0x78
 8004584:	4828      	ldr	r0, [pc, #160]	; (8004628 <_printf_i+0x248>)
 8004586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800458a:	e7e3      	b.n	8004554 <_printf_i+0x174>
 800458c:	065e      	lsls	r6, r3, #25
 800458e:	bf48      	it	mi
 8004590:	b2ad      	uxthmi	r5, r5
 8004592:	e7e6      	b.n	8004562 <_printf_i+0x182>
 8004594:	4616      	mov	r6, r2
 8004596:	e7bb      	b.n	8004510 <_printf_i+0x130>
 8004598:	680b      	ldr	r3, [r1, #0]
 800459a:	6826      	ldr	r6, [r4, #0]
 800459c:	6960      	ldr	r0, [r4, #20]
 800459e:	1d1d      	adds	r5, r3, #4
 80045a0:	600d      	str	r5, [r1, #0]
 80045a2:	0635      	lsls	r5, r6, #24
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	d501      	bpl.n	80045ac <_printf_i+0x1cc>
 80045a8:	6018      	str	r0, [r3, #0]
 80045aa:	e002      	b.n	80045b2 <_printf_i+0x1d2>
 80045ac:	0671      	lsls	r1, r6, #25
 80045ae:	d5fb      	bpl.n	80045a8 <_printf_i+0x1c8>
 80045b0:	8018      	strh	r0, [r3, #0]
 80045b2:	2300      	movs	r3, #0
 80045b4:	6123      	str	r3, [r4, #16]
 80045b6:	4616      	mov	r6, r2
 80045b8:	e7ba      	b.n	8004530 <_printf_i+0x150>
 80045ba:	680b      	ldr	r3, [r1, #0]
 80045bc:	1d1a      	adds	r2, r3, #4
 80045be:	600a      	str	r2, [r1, #0]
 80045c0:	681e      	ldr	r6, [r3, #0]
 80045c2:	6862      	ldr	r2, [r4, #4]
 80045c4:	2100      	movs	r1, #0
 80045c6:	4630      	mov	r0, r6
 80045c8:	f7fb fe2a 	bl	8000220 <memchr>
 80045cc:	b108      	cbz	r0, 80045d2 <_printf_i+0x1f2>
 80045ce:	1b80      	subs	r0, r0, r6
 80045d0:	6060      	str	r0, [r4, #4]
 80045d2:	6863      	ldr	r3, [r4, #4]
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	2300      	movs	r3, #0
 80045d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045dc:	e7a8      	b.n	8004530 <_printf_i+0x150>
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	4632      	mov	r2, r6
 80045e2:	4649      	mov	r1, r9
 80045e4:	4640      	mov	r0, r8
 80045e6:	47d0      	blx	sl
 80045e8:	3001      	adds	r0, #1
 80045ea:	d0ab      	beq.n	8004544 <_printf_i+0x164>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	079b      	lsls	r3, r3, #30
 80045f0:	d413      	bmi.n	800461a <_printf_i+0x23a>
 80045f2:	68e0      	ldr	r0, [r4, #12]
 80045f4:	9b03      	ldr	r3, [sp, #12]
 80045f6:	4298      	cmp	r0, r3
 80045f8:	bfb8      	it	lt
 80045fa:	4618      	movlt	r0, r3
 80045fc:	e7a4      	b.n	8004548 <_printf_i+0x168>
 80045fe:	2301      	movs	r3, #1
 8004600:	4632      	mov	r2, r6
 8004602:	4649      	mov	r1, r9
 8004604:	4640      	mov	r0, r8
 8004606:	47d0      	blx	sl
 8004608:	3001      	adds	r0, #1
 800460a:	d09b      	beq.n	8004544 <_printf_i+0x164>
 800460c:	3501      	adds	r5, #1
 800460e:	68e3      	ldr	r3, [r4, #12]
 8004610:	9903      	ldr	r1, [sp, #12]
 8004612:	1a5b      	subs	r3, r3, r1
 8004614:	42ab      	cmp	r3, r5
 8004616:	dcf2      	bgt.n	80045fe <_printf_i+0x21e>
 8004618:	e7eb      	b.n	80045f2 <_printf_i+0x212>
 800461a:	2500      	movs	r5, #0
 800461c:	f104 0619 	add.w	r6, r4, #25
 8004620:	e7f5      	b.n	800460e <_printf_i+0x22e>
 8004622:	bf00      	nop
 8004624:	08004e31 	.word	0x08004e31
 8004628:	08004e42 	.word	0x08004e42

0800462c <_sbrk_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4d06      	ldr	r5, [pc, #24]	; (8004648 <_sbrk_r+0x1c>)
 8004630:	2300      	movs	r3, #0
 8004632:	4604      	mov	r4, r0
 8004634:	4608      	mov	r0, r1
 8004636:	602b      	str	r3, [r5, #0]
 8004638:	f7fc fbd6 	bl	8000de8 <_sbrk>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d102      	bne.n	8004646 <_sbrk_r+0x1a>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	b103      	cbz	r3, 8004646 <_sbrk_r+0x1a>
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	20004414 	.word	0x20004414

0800464c <__sread>:
 800464c:	b510      	push	{r4, lr}
 800464e:	460c      	mov	r4, r1
 8004650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004654:	f000 fab4 	bl	8004bc0 <_read_r>
 8004658:	2800      	cmp	r0, #0
 800465a:	bfab      	itete	ge
 800465c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800465e:	89a3      	ldrhlt	r3, [r4, #12]
 8004660:	181b      	addge	r3, r3, r0
 8004662:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004666:	bfac      	ite	ge
 8004668:	6563      	strge	r3, [r4, #84]	; 0x54
 800466a:	81a3      	strhlt	r3, [r4, #12]
 800466c:	bd10      	pop	{r4, pc}

0800466e <__swrite>:
 800466e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004672:	461f      	mov	r7, r3
 8004674:	898b      	ldrh	r3, [r1, #12]
 8004676:	05db      	lsls	r3, r3, #23
 8004678:	4605      	mov	r5, r0
 800467a:	460c      	mov	r4, r1
 800467c:	4616      	mov	r6, r2
 800467e:	d505      	bpl.n	800468c <__swrite+0x1e>
 8004680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004684:	2302      	movs	r3, #2
 8004686:	2200      	movs	r2, #0
 8004688:	f000 f9c8 	bl	8004a1c <_lseek_r>
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004696:	81a3      	strh	r3, [r4, #12]
 8004698:	4632      	mov	r2, r6
 800469a:	463b      	mov	r3, r7
 800469c:	4628      	mov	r0, r5
 800469e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046a2:	f000 b869 	b.w	8004778 <_write_r>

080046a6 <__sseek>:
 80046a6:	b510      	push	{r4, lr}
 80046a8:	460c      	mov	r4, r1
 80046aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ae:	f000 f9b5 	bl	8004a1c <_lseek_r>
 80046b2:	1c43      	adds	r3, r0, #1
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	bf15      	itete	ne
 80046b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80046ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046c2:	81a3      	strheq	r3, [r4, #12]
 80046c4:	bf18      	it	ne
 80046c6:	81a3      	strhne	r3, [r4, #12]
 80046c8:	bd10      	pop	{r4, pc}

080046ca <__sclose>:
 80046ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ce:	f000 b8d3 	b.w	8004878 <_close_r>
	...

080046d4 <__swbuf_r>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	460e      	mov	r6, r1
 80046d8:	4614      	mov	r4, r2
 80046da:	4605      	mov	r5, r0
 80046dc:	b118      	cbz	r0, 80046e6 <__swbuf_r+0x12>
 80046de:	6983      	ldr	r3, [r0, #24]
 80046e0:	b90b      	cbnz	r3, 80046e6 <__swbuf_r+0x12>
 80046e2:	f7ff fbbb 	bl	8003e5c <__sinit>
 80046e6:	4b21      	ldr	r3, [pc, #132]	; (800476c <__swbuf_r+0x98>)
 80046e8:	429c      	cmp	r4, r3
 80046ea:	d12b      	bne.n	8004744 <__swbuf_r+0x70>
 80046ec:	686c      	ldr	r4, [r5, #4]
 80046ee:	69a3      	ldr	r3, [r4, #24]
 80046f0:	60a3      	str	r3, [r4, #8]
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	071a      	lsls	r2, r3, #28
 80046f6:	d52f      	bpl.n	8004758 <__swbuf_r+0x84>
 80046f8:	6923      	ldr	r3, [r4, #16]
 80046fa:	b36b      	cbz	r3, 8004758 <__swbuf_r+0x84>
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	1ac0      	subs	r0, r0, r3
 8004702:	6963      	ldr	r3, [r4, #20]
 8004704:	b2f6      	uxtb	r6, r6
 8004706:	4283      	cmp	r3, r0
 8004708:	4637      	mov	r7, r6
 800470a:	dc04      	bgt.n	8004716 <__swbuf_r+0x42>
 800470c:	4621      	mov	r1, r4
 800470e:	4628      	mov	r0, r5
 8004710:	f000 f948 	bl	80049a4 <_fflush_r>
 8004714:	bb30      	cbnz	r0, 8004764 <__swbuf_r+0x90>
 8004716:	68a3      	ldr	r3, [r4, #8]
 8004718:	3b01      	subs	r3, #1
 800471a:	60a3      	str	r3, [r4, #8]
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	6022      	str	r2, [r4, #0]
 8004722:	701e      	strb	r6, [r3, #0]
 8004724:	6963      	ldr	r3, [r4, #20]
 8004726:	3001      	adds	r0, #1
 8004728:	4283      	cmp	r3, r0
 800472a:	d004      	beq.n	8004736 <__swbuf_r+0x62>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	07db      	lsls	r3, r3, #31
 8004730:	d506      	bpl.n	8004740 <__swbuf_r+0x6c>
 8004732:	2e0a      	cmp	r6, #10
 8004734:	d104      	bne.n	8004740 <__swbuf_r+0x6c>
 8004736:	4621      	mov	r1, r4
 8004738:	4628      	mov	r0, r5
 800473a:	f000 f933 	bl	80049a4 <_fflush_r>
 800473e:	b988      	cbnz	r0, 8004764 <__swbuf_r+0x90>
 8004740:	4638      	mov	r0, r7
 8004742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <__swbuf_r+0x9c>)
 8004746:	429c      	cmp	r4, r3
 8004748:	d101      	bne.n	800474e <__swbuf_r+0x7a>
 800474a:	68ac      	ldr	r4, [r5, #8]
 800474c:	e7cf      	b.n	80046ee <__swbuf_r+0x1a>
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <__swbuf_r+0xa0>)
 8004750:	429c      	cmp	r4, r3
 8004752:	bf08      	it	eq
 8004754:	68ec      	ldreq	r4, [r5, #12]
 8004756:	e7ca      	b.n	80046ee <__swbuf_r+0x1a>
 8004758:	4621      	mov	r1, r4
 800475a:	4628      	mov	r0, r5
 800475c:	f000 f81e 	bl	800479c <__swsetup_r>
 8004760:	2800      	cmp	r0, #0
 8004762:	d0cb      	beq.n	80046fc <__swbuf_r+0x28>
 8004764:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004768:	e7ea      	b.n	8004740 <__swbuf_r+0x6c>
 800476a:	bf00      	nop
 800476c:	08004de0 	.word	0x08004de0
 8004770:	08004e00 	.word	0x08004e00
 8004774:	08004dc0 	.word	0x08004dc0

08004778 <_write_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4d07      	ldr	r5, [pc, #28]	; (8004798 <_write_r+0x20>)
 800477c:	4604      	mov	r4, r0
 800477e:	4608      	mov	r0, r1
 8004780:	4611      	mov	r1, r2
 8004782:	2200      	movs	r2, #0
 8004784:	602a      	str	r2, [r5, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	f7fc fadd 	bl	8000d46 <_write>
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d102      	bne.n	8004796 <_write_r+0x1e>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	b103      	cbz	r3, 8004796 <_write_r+0x1e>
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	bd38      	pop	{r3, r4, r5, pc}
 8004798:	20004414 	.word	0x20004414

0800479c <__swsetup_r>:
 800479c:	4b32      	ldr	r3, [pc, #200]	; (8004868 <__swsetup_r+0xcc>)
 800479e:	b570      	push	{r4, r5, r6, lr}
 80047a0:	681d      	ldr	r5, [r3, #0]
 80047a2:	4606      	mov	r6, r0
 80047a4:	460c      	mov	r4, r1
 80047a6:	b125      	cbz	r5, 80047b2 <__swsetup_r+0x16>
 80047a8:	69ab      	ldr	r3, [r5, #24]
 80047aa:	b913      	cbnz	r3, 80047b2 <__swsetup_r+0x16>
 80047ac:	4628      	mov	r0, r5
 80047ae:	f7ff fb55 	bl	8003e5c <__sinit>
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <__swsetup_r+0xd0>)
 80047b4:	429c      	cmp	r4, r3
 80047b6:	d10f      	bne.n	80047d8 <__swsetup_r+0x3c>
 80047b8:	686c      	ldr	r4, [r5, #4]
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047c0:	0719      	lsls	r1, r3, #28
 80047c2:	d42c      	bmi.n	800481e <__swsetup_r+0x82>
 80047c4:	06dd      	lsls	r5, r3, #27
 80047c6:	d411      	bmi.n	80047ec <__swsetup_r+0x50>
 80047c8:	2309      	movs	r3, #9
 80047ca:	6033      	str	r3, [r6, #0]
 80047cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047d6:	e03e      	b.n	8004856 <__swsetup_r+0xba>
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <__swsetup_r+0xd4>)
 80047da:	429c      	cmp	r4, r3
 80047dc:	d101      	bne.n	80047e2 <__swsetup_r+0x46>
 80047de:	68ac      	ldr	r4, [r5, #8]
 80047e0:	e7eb      	b.n	80047ba <__swsetup_r+0x1e>
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <__swsetup_r+0xd8>)
 80047e4:	429c      	cmp	r4, r3
 80047e6:	bf08      	it	eq
 80047e8:	68ec      	ldreq	r4, [r5, #12]
 80047ea:	e7e6      	b.n	80047ba <__swsetup_r+0x1e>
 80047ec:	0758      	lsls	r0, r3, #29
 80047ee:	d512      	bpl.n	8004816 <__swsetup_r+0x7a>
 80047f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047f2:	b141      	cbz	r1, 8004806 <__swsetup_r+0x6a>
 80047f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047f8:	4299      	cmp	r1, r3
 80047fa:	d002      	beq.n	8004802 <__swsetup_r+0x66>
 80047fc:	4630      	mov	r0, r6
 80047fe:	f000 f98f 	bl	8004b20 <_free_r>
 8004802:	2300      	movs	r3, #0
 8004804:	6363      	str	r3, [r4, #52]	; 0x34
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800480c:	81a3      	strh	r3, [r4, #12]
 800480e:	2300      	movs	r3, #0
 8004810:	6063      	str	r3, [r4, #4]
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f043 0308 	orr.w	r3, r3, #8
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	6923      	ldr	r3, [r4, #16]
 8004820:	b94b      	cbnz	r3, 8004836 <__swsetup_r+0x9a>
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482c:	d003      	beq.n	8004836 <__swsetup_r+0x9a>
 800482e:	4621      	mov	r1, r4
 8004830:	4630      	mov	r0, r6
 8004832:	f000 f929 	bl	8004a88 <__smakebuf_r>
 8004836:	89a0      	ldrh	r0, [r4, #12]
 8004838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800483c:	f010 0301 	ands.w	r3, r0, #1
 8004840:	d00a      	beq.n	8004858 <__swsetup_r+0xbc>
 8004842:	2300      	movs	r3, #0
 8004844:	60a3      	str	r3, [r4, #8]
 8004846:	6963      	ldr	r3, [r4, #20]
 8004848:	425b      	negs	r3, r3
 800484a:	61a3      	str	r3, [r4, #24]
 800484c:	6923      	ldr	r3, [r4, #16]
 800484e:	b943      	cbnz	r3, 8004862 <__swsetup_r+0xc6>
 8004850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004854:	d1ba      	bne.n	80047cc <__swsetup_r+0x30>
 8004856:	bd70      	pop	{r4, r5, r6, pc}
 8004858:	0781      	lsls	r1, r0, #30
 800485a:	bf58      	it	pl
 800485c:	6963      	ldrpl	r3, [r4, #20]
 800485e:	60a3      	str	r3, [r4, #8]
 8004860:	e7f4      	b.n	800484c <__swsetup_r+0xb0>
 8004862:	2000      	movs	r0, #0
 8004864:	e7f7      	b.n	8004856 <__swsetup_r+0xba>
 8004866:	bf00      	nop
 8004868:	20000034 	.word	0x20000034
 800486c:	08004de0 	.word	0x08004de0
 8004870:	08004e00 	.word	0x08004e00
 8004874:	08004dc0 	.word	0x08004dc0

08004878 <_close_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4d06      	ldr	r5, [pc, #24]	; (8004894 <_close_r+0x1c>)
 800487c:	2300      	movs	r3, #0
 800487e:	4604      	mov	r4, r0
 8004880:	4608      	mov	r0, r1
 8004882:	602b      	str	r3, [r5, #0]
 8004884:	f7fc fa7b 	bl	8000d7e <_close>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_close_r+0x1a>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_close_r+0x1a>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	20004414 	.word	0x20004414

08004898 <__sflush_r>:
 8004898:	898a      	ldrh	r2, [r1, #12]
 800489a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800489e:	4605      	mov	r5, r0
 80048a0:	0710      	lsls	r0, r2, #28
 80048a2:	460c      	mov	r4, r1
 80048a4:	d458      	bmi.n	8004958 <__sflush_r+0xc0>
 80048a6:	684b      	ldr	r3, [r1, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dc05      	bgt.n	80048b8 <__sflush_r+0x20>
 80048ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dc02      	bgt.n	80048b8 <__sflush_r+0x20>
 80048b2:	2000      	movs	r0, #0
 80048b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ba:	2e00      	cmp	r6, #0
 80048bc:	d0f9      	beq.n	80048b2 <__sflush_r+0x1a>
 80048be:	2300      	movs	r3, #0
 80048c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048c4:	682f      	ldr	r7, [r5, #0]
 80048c6:	602b      	str	r3, [r5, #0]
 80048c8:	d032      	beq.n	8004930 <__sflush_r+0x98>
 80048ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	075a      	lsls	r2, r3, #29
 80048d0:	d505      	bpl.n	80048de <__sflush_r+0x46>
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	1ac0      	subs	r0, r0, r3
 80048d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048d8:	b10b      	cbz	r3, 80048de <__sflush_r+0x46>
 80048da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048dc:	1ac0      	subs	r0, r0, r3
 80048de:	2300      	movs	r3, #0
 80048e0:	4602      	mov	r2, r0
 80048e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048e4:	6a21      	ldr	r1, [r4, #32]
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b0      	blx	r6
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	d106      	bne.n	80048fe <__sflush_r+0x66>
 80048f0:	6829      	ldr	r1, [r5, #0]
 80048f2:	291d      	cmp	r1, #29
 80048f4:	d82c      	bhi.n	8004950 <__sflush_r+0xb8>
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <__sflush_r+0x108>)
 80048f8:	40ca      	lsrs	r2, r1
 80048fa:	07d6      	lsls	r6, r2, #31
 80048fc:	d528      	bpl.n	8004950 <__sflush_r+0xb8>
 80048fe:	2200      	movs	r2, #0
 8004900:	6062      	str	r2, [r4, #4]
 8004902:	04d9      	lsls	r1, r3, #19
 8004904:	6922      	ldr	r2, [r4, #16]
 8004906:	6022      	str	r2, [r4, #0]
 8004908:	d504      	bpl.n	8004914 <__sflush_r+0x7c>
 800490a:	1c42      	adds	r2, r0, #1
 800490c:	d101      	bne.n	8004912 <__sflush_r+0x7a>
 800490e:	682b      	ldr	r3, [r5, #0]
 8004910:	b903      	cbnz	r3, 8004914 <__sflush_r+0x7c>
 8004912:	6560      	str	r0, [r4, #84]	; 0x54
 8004914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004916:	602f      	str	r7, [r5, #0]
 8004918:	2900      	cmp	r1, #0
 800491a:	d0ca      	beq.n	80048b2 <__sflush_r+0x1a>
 800491c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004920:	4299      	cmp	r1, r3
 8004922:	d002      	beq.n	800492a <__sflush_r+0x92>
 8004924:	4628      	mov	r0, r5
 8004926:	f000 f8fb 	bl	8004b20 <_free_r>
 800492a:	2000      	movs	r0, #0
 800492c:	6360      	str	r0, [r4, #52]	; 0x34
 800492e:	e7c1      	b.n	80048b4 <__sflush_r+0x1c>
 8004930:	6a21      	ldr	r1, [r4, #32]
 8004932:	2301      	movs	r3, #1
 8004934:	4628      	mov	r0, r5
 8004936:	47b0      	blx	r6
 8004938:	1c41      	adds	r1, r0, #1
 800493a:	d1c7      	bne.n	80048cc <__sflush_r+0x34>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0c4      	beq.n	80048cc <__sflush_r+0x34>
 8004942:	2b1d      	cmp	r3, #29
 8004944:	d001      	beq.n	800494a <__sflush_r+0xb2>
 8004946:	2b16      	cmp	r3, #22
 8004948:	d101      	bne.n	800494e <__sflush_r+0xb6>
 800494a:	602f      	str	r7, [r5, #0]
 800494c:	e7b1      	b.n	80048b2 <__sflush_r+0x1a>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	e7ad      	b.n	80048b4 <__sflush_r+0x1c>
 8004958:	690f      	ldr	r7, [r1, #16]
 800495a:	2f00      	cmp	r7, #0
 800495c:	d0a9      	beq.n	80048b2 <__sflush_r+0x1a>
 800495e:	0793      	lsls	r3, r2, #30
 8004960:	680e      	ldr	r6, [r1, #0]
 8004962:	bf08      	it	eq
 8004964:	694b      	ldreq	r3, [r1, #20]
 8004966:	600f      	str	r7, [r1, #0]
 8004968:	bf18      	it	ne
 800496a:	2300      	movne	r3, #0
 800496c:	eba6 0807 	sub.w	r8, r6, r7
 8004970:	608b      	str	r3, [r1, #8]
 8004972:	f1b8 0f00 	cmp.w	r8, #0
 8004976:	dd9c      	ble.n	80048b2 <__sflush_r+0x1a>
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800497c:	4643      	mov	r3, r8
 800497e:	463a      	mov	r2, r7
 8004980:	4628      	mov	r0, r5
 8004982:	47b0      	blx	r6
 8004984:	2800      	cmp	r0, #0
 8004986:	dc06      	bgt.n	8004996 <__sflush_r+0xfe>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004994:	e78e      	b.n	80048b4 <__sflush_r+0x1c>
 8004996:	4407      	add	r7, r0
 8004998:	eba8 0800 	sub.w	r8, r8, r0
 800499c:	e7e9      	b.n	8004972 <__sflush_r+0xda>
 800499e:	bf00      	nop
 80049a0:	20400001 	.word	0x20400001

080049a4 <_fflush_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	690b      	ldr	r3, [r1, #16]
 80049a8:	4605      	mov	r5, r0
 80049aa:	460c      	mov	r4, r1
 80049ac:	b913      	cbnz	r3, 80049b4 <_fflush_r+0x10>
 80049ae:	2500      	movs	r5, #0
 80049b0:	4628      	mov	r0, r5
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	b118      	cbz	r0, 80049be <_fflush_r+0x1a>
 80049b6:	6983      	ldr	r3, [r0, #24]
 80049b8:	b90b      	cbnz	r3, 80049be <_fflush_r+0x1a>
 80049ba:	f7ff fa4f 	bl	8003e5c <__sinit>
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <_fflush_r+0x6c>)
 80049c0:	429c      	cmp	r4, r3
 80049c2:	d11b      	bne.n	80049fc <_fflush_r+0x58>
 80049c4:	686c      	ldr	r4, [r5, #4]
 80049c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ef      	beq.n	80049ae <_fflush_r+0xa>
 80049ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d0:	07d0      	lsls	r0, r2, #31
 80049d2:	d404      	bmi.n	80049de <_fflush_r+0x3a>
 80049d4:	0599      	lsls	r1, r3, #22
 80049d6:	d402      	bmi.n	80049de <_fflush_r+0x3a>
 80049d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049da:	f7ff fadd 	bl	8003f98 <__retarget_lock_acquire_recursive>
 80049de:	4628      	mov	r0, r5
 80049e0:	4621      	mov	r1, r4
 80049e2:	f7ff ff59 	bl	8004898 <__sflush_r>
 80049e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e8:	07da      	lsls	r2, r3, #31
 80049ea:	4605      	mov	r5, r0
 80049ec:	d4e0      	bmi.n	80049b0 <_fflush_r+0xc>
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	059b      	lsls	r3, r3, #22
 80049f2:	d4dd      	bmi.n	80049b0 <_fflush_r+0xc>
 80049f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f6:	f7ff fad0 	bl	8003f9a <__retarget_lock_release_recursive>
 80049fa:	e7d9      	b.n	80049b0 <_fflush_r+0xc>
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <_fflush_r+0x70>)
 80049fe:	429c      	cmp	r4, r3
 8004a00:	d101      	bne.n	8004a06 <_fflush_r+0x62>
 8004a02:	68ac      	ldr	r4, [r5, #8]
 8004a04:	e7df      	b.n	80049c6 <_fflush_r+0x22>
 8004a06:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <_fflush_r+0x74>)
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	bf08      	it	eq
 8004a0c:	68ec      	ldreq	r4, [r5, #12]
 8004a0e:	e7da      	b.n	80049c6 <_fflush_r+0x22>
 8004a10:	08004de0 	.word	0x08004de0
 8004a14:	08004e00 	.word	0x08004e00
 8004a18:	08004dc0 	.word	0x08004dc0

08004a1c <_lseek_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4d07      	ldr	r5, [pc, #28]	; (8004a3c <_lseek_r+0x20>)
 8004a20:	4604      	mov	r4, r0
 8004a22:	4608      	mov	r0, r1
 8004a24:	4611      	mov	r1, r2
 8004a26:	2200      	movs	r2, #0
 8004a28:	602a      	str	r2, [r5, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f7fc f9ce 	bl	8000dcc <_lseek>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_lseek_r+0x1e>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_lseek_r+0x1e>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	20004414 	.word	0x20004414

08004a40 <__swhatbuf_r>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	460e      	mov	r6, r1
 8004a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	b096      	sub	sp, #88	; 0x58
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	461d      	mov	r5, r3
 8004a50:	da07      	bge.n	8004a62 <__swhatbuf_r+0x22>
 8004a52:	2300      	movs	r3, #0
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	89b3      	ldrh	r3, [r6, #12]
 8004a58:	061a      	lsls	r2, r3, #24
 8004a5a:	d410      	bmi.n	8004a7e <__swhatbuf_r+0x3e>
 8004a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a60:	e00e      	b.n	8004a80 <__swhatbuf_r+0x40>
 8004a62:	466a      	mov	r2, sp
 8004a64:	f000 f8be 	bl	8004be4 <_fstat_r>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	dbf2      	blt.n	8004a52 <__swhatbuf_r+0x12>
 8004a6c:	9a01      	ldr	r2, [sp, #4]
 8004a6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a76:	425a      	negs	r2, r3
 8004a78:	415a      	adcs	r2, r3
 8004a7a:	602a      	str	r2, [r5, #0]
 8004a7c:	e7ee      	b.n	8004a5c <__swhatbuf_r+0x1c>
 8004a7e:	2340      	movs	r3, #64	; 0x40
 8004a80:	2000      	movs	r0, #0
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	b016      	add	sp, #88	; 0x58
 8004a86:	bd70      	pop	{r4, r5, r6, pc}

08004a88 <__smakebuf_r>:
 8004a88:	898b      	ldrh	r3, [r1, #12]
 8004a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a8c:	079d      	lsls	r5, r3, #30
 8004a8e:	4606      	mov	r6, r0
 8004a90:	460c      	mov	r4, r1
 8004a92:	d507      	bpl.n	8004aa4 <__smakebuf_r+0x1c>
 8004a94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	6123      	str	r3, [r4, #16]
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	6163      	str	r3, [r4, #20]
 8004aa0:	b002      	add	sp, #8
 8004aa2:	bd70      	pop	{r4, r5, r6, pc}
 8004aa4:	ab01      	add	r3, sp, #4
 8004aa6:	466a      	mov	r2, sp
 8004aa8:	f7ff ffca 	bl	8004a40 <__swhatbuf_r>
 8004aac:	9900      	ldr	r1, [sp, #0]
 8004aae:	4605      	mov	r5, r0
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f7ff fa73 	bl	8003f9c <_malloc_r>
 8004ab6:	b948      	cbnz	r0, 8004acc <__smakebuf_r+0x44>
 8004ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004abc:	059a      	lsls	r2, r3, #22
 8004abe:	d4ef      	bmi.n	8004aa0 <__smakebuf_r+0x18>
 8004ac0:	f023 0303 	bic.w	r3, r3, #3
 8004ac4:	f043 0302 	orr.w	r3, r3, #2
 8004ac8:	81a3      	strh	r3, [r4, #12]
 8004aca:	e7e3      	b.n	8004a94 <__smakebuf_r+0xc>
 8004acc:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <__smakebuf_r+0x7c>)
 8004ace:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	6020      	str	r0, [r4, #0]
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad8:	81a3      	strh	r3, [r4, #12]
 8004ada:	9b00      	ldr	r3, [sp, #0]
 8004adc:	6163      	str	r3, [r4, #20]
 8004ade:	9b01      	ldr	r3, [sp, #4]
 8004ae0:	6120      	str	r0, [r4, #16]
 8004ae2:	b15b      	cbz	r3, 8004afc <__smakebuf_r+0x74>
 8004ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ae8:	4630      	mov	r0, r6
 8004aea:	f000 f88d 	bl	8004c08 <_isatty_r>
 8004aee:	b128      	cbz	r0, 8004afc <__smakebuf_r+0x74>
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	f023 0303 	bic.w	r3, r3, #3
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	89a0      	ldrh	r0, [r4, #12]
 8004afe:	4305      	orrs	r5, r0
 8004b00:	81a5      	strh	r5, [r4, #12]
 8004b02:	e7cd      	b.n	8004aa0 <__smakebuf_r+0x18>
 8004b04:	08003df5 	.word	0x08003df5

08004b08 <__malloc_lock>:
 8004b08:	4801      	ldr	r0, [pc, #4]	; (8004b10 <__malloc_lock+0x8>)
 8004b0a:	f7ff ba45 	b.w	8003f98 <__retarget_lock_acquire_recursive>
 8004b0e:	bf00      	nop
 8004b10:	2000440c 	.word	0x2000440c

08004b14 <__malloc_unlock>:
 8004b14:	4801      	ldr	r0, [pc, #4]	; (8004b1c <__malloc_unlock+0x8>)
 8004b16:	f7ff ba40 	b.w	8003f9a <__retarget_lock_release_recursive>
 8004b1a:	bf00      	nop
 8004b1c:	2000440c 	.word	0x2000440c

08004b20 <_free_r>:
 8004b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b22:	2900      	cmp	r1, #0
 8004b24:	d048      	beq.n	8004bb8 <_free_r+0x98>
 8004b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2a:	9001      	str	r0, [sp, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b32:	bfb8      	it	lt
 8004b34:	18e4      	addlt	r4, r4, r3
 8004b36:	f7ff ffe7 	bl	8004b08 <__malloc_lock>
 8004b3a:	4a20      	ldr	r2, [pc, #128]	; (8004bbc <_free_r+0x9c>)
 8004b3c:	9801      	ldr	r0, [sp, #4]
 8004b3e:	6813      	ldr	r3, [r2, #0]
 8004b40:	4615      	mov	r5, r2
 8004b42:	b933      	cbnz	r3, 8004b52 <_free_r+0x32>
 8004b44:	6063      	str	r3, [r4, #4]
 8004b46:	6014      	str	r4, [r2, #0]
 8004b48:	b003      	add	sp, #12
 8004b4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b4e:	f7ff bfe1 	b.w	8004b14 <__malloc_unlock>
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	d90b      	bls.n	8004b6e <_free_r+0x4e>
 8004b56:	6821      	ldr	r1, [r4, #0]
 8004b58:	1862      	adds	r2, r4, r1
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	bf04      	itt	eq
 8004b5e:	681a      	ldreq	r2, [r3, #0]
 8004b60:	685b      	ldreq	r3, [r3, #4]
 8004b62:	6063      	str	r3, [r4, #4]
 8004b64:	bf04      	itt	eq
 8004b66:	1852      	addeq	r2, r2, r1
 8004b68:	6022      	streq	r2, [r4, #0]
 8004b6a:	602c      	str	r4, [r5, #0]
 8004b6c:	e7ec      	b.n	8004b48 <_free_r+0x28>
 8004b6e:	461a      	mov	r2, r3
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	b10b      	cbz	r3, 8004b78 <_free_r+0x58>
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	d9fa      	bls.n	8004b6e <_free_r+0x4e>
 8004b78:	6811      	ldr	r1, [r2, #0]
 8004b7a:	1855      	adds	r5, r2, r1
 8004b7c:	42a5      	cmp	r5, r4
 8004b7e:	d10b      	bne.n	8004b98 <_free_r+0x78>
 8004b80:	6824      	ldr	r4, [r4, #0]
 8004b82:	4421      	add	r1, r4
 8004b84:	1854      	adds	r4, r2, r1
 8004b86:	42a3      	cmp	r3, r4
 8004b88:	6011      	str	r1, [r2, #0]
 8004b8a:	d1dd      	bne.n	8004b48 <_free_r+0x28>
 8004b8c:	681c      	ldr	r4, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	6053      	str	r3, [r2, #4]
 8004b92:	4421      	add	r1, r4
 8004b94:	6011      	str	r1, [r2, #0]
 8004b96:	e7d7      	b.n	8004b48 <_free_r+0x28>
 8004b98:	d902      	bls.n	8004ba0 <_free_r+0x80>
 8004b9a:	230c      	movs	r3, #12
 8004b9c:	6003      	str	r3, [r0, #0]
 8004b9e:	e7d3      	b.n	8004b48 <_free_r+0x28>
 8004ba0:	6825      	ldr	r5, [r4, #0]
 8004ba2:	1961      	adds	r1, r4, r5
 8004ba4:	428b      	cmp	r3, r1
 8004ba6:	bf04      	itt	eq
 8004ba8:	6819      	ldreq	r1, [r3, #0]
 8004baa:	685b      	ldreq	r3, [r3, #4]
 8004bac:	6063      	str	r3, [r4, #4]
 8004bae:	bf04      	itt	eq
 8004bb0:	1949      	addeq	r1, r1, r5
 8004bb2:	6021      	streq	r1, [r4, #0]
 8004bb4:	6054      	str	r4, [r2, #4]
 8004bb6:	e7c7      	b.n	8004b48 <_free_r+0x28>
 8004bb8:	b003      	add	sp, #12
 8004bba:	bd30      	pop	{r4, r5, pc}
 8004bbc:	2000010c 	.word	0x2000010c

08004bc0 <_read_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4d07      	ldr	r5, [pc, #28]	; (8004be0 <_read_r+0x20>)
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	4608      	mov	r0, r1
 8004bc8:	4611      	mov	r1, r2
 8004bca:	2200      	movs	r2, #0
 8004bcc:	602a      	str	r2, [r5, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f7fc f89c 	bl	8000d0c <_read>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_read_r+0x1e>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_read_r+0x1e>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	20004414 	.word	0x20004414

08004be4 <_fstat_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4d07      	ldr	r5, [pc, #28]	; (8004c04 <_fstat_r+0x20>)
 8004be8:	2300      	movs	r3, #0
 8004bea:	4604      	mov	r4, r0
 8004bec:	4608      	mov	r0, r1
 8004bee:	4611      	mov	r1, r2
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	f7fc f8d0 	bl	8000d96 <_fstat>
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	d102      	bne.n	8004c00 <_fstat_r+0x1c>
 8004bfa:	682b      	ldr	r3, [r5, #0]
 8004bfc:	b103      	cbz	r3, 8004c00 <_fstat_r+0x1c>
 8004bfe:	6023      	str	r3, [r4, #0]
 8004c00:	bd38      	pop	{r3, r4, r5, pc}
 8004c02:	bf00      	nop
 8004c04:	20004414 	.word	0x20004414

08004c08 <_isatty_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4d06      	ldr	r5, [pc, #24]	; (8004c24 <_isatty_r+0x1c>)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4604      	mov	r4, r0
 8004c10:	4608      	mov	r0, r1
 8004c12:	602b      	str	r3, [r5, #0]
 8004c14:	f7fc f8cf 	bl	8000db6 <_isatty>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_isatty_r+0x1a>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_isatty_r+0x1a>
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	20004414 	.word	0x20004414

08004c28 <_init>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	bf00      	nop
 8004c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2e:	bc08      	pop	{r3}
 8004c30:	469e      	mov	lr, r3
 8004c32:	4770      	bx	lr

08004c34 <_fini>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	bf00      	nop
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr
