
TP_AndreaGarcia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800393c  0800393c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003944  08003944  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800394c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          000000bc  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000015c  2000015c  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea14  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024b2  00000000  00000000  0002eae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a8  00000000  00000000  00031838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e47  00000000  00000000  00031fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc33  00000000  00000000  00058e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e362a  00000000  00000000  00066a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014a084  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002788  00000000  00000000  0014a0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003754 	.word	0x08003754

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	08003754 	.word	0x08003754

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <debounceInit>:
void leds();

#define DELAY_TIME 40

bool_t debounceInit()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	debounceState = BUTTON_UP;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <debounceInit+0x20>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
	delayInit(&delay, DELAY_TIME);
 8000592:	2128      	movs	r1, #40	; 0x28
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <debounceInit+0x24>)
 8000596:	f000 f909 	bl	80007ac <delayInit>

	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800059a:	2100      	movs	r1, #0
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fad3 	bl	8000b48 <BSP_PB_Init>


	return true;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000bc 	.word	0x200000bc
 80005ac:	200000c0 	.word	0x200000c0

080005b0 <ledInit>:

bool_t ledInit()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED1);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fa29 	bl	8000a0c <BSP_LED_Init>
	BSP_LED_Init(LED2);
 80005ba:	2001      	movs	r0, #1
 80005bc:	f000 fa26 	bl	8000a0c <BSP_LED_Init>
	BSP_LED_Init(LED3);
 80005c0:	2002      	movs	r0, #2
 80005c2:	f000 fa23 	bl	8000a0c <BSP_LED_Init>

	delayInit (&led1Delay, 100);
 80005c6:	2164      	movs	r1, #100	; 0x64
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <ledInit+0x38>)
 80005ca:	f000 f8ef 	bl	80007ac <delayInit>
	delayInit (&led2Delay, 500);
 80005ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <ledInit+0x3c>)
 80005d4:	f000 f8ea 	bl	80007ac <delayInit>
	delayInit (&led3Delay, 1000);
 80005d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <ledInit+0x40>)
 80005de:	f000 f8e5 	bl	80007ac <delayInit>

	return true;
 80005e2:	2301      	movs	r3, #1
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000cc 	.word	0x200000cc
 80005ec:	200000d8 	.word	0x200000d8
 80005f0:	200000e4 	.word	0x200000e4

080005f4 <debounceUpdate>:

void debounceUpdate()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	switch(debounceState)
 80005f8:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <debounceUpdate+0xc4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d856      	bhi.n	80006ae <debounceUpdate+0xba>
 8000600:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <debounceUpdate+0x14>)
 8000602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000606:	bf00      	nop
 8000608:	08000619 	.word	0x08000619
 800060c:	08000633 	.word	0x08000633
 8000610:	0800065f 	.word	0x0800065f
 8000614:	08000679 	.word	0x08000679
	{
		case BUTTON_UP:
			if(BSP_PB_GetState(BUTTON_USER))
 8000618:	2000      	movs	r0, #0
 800061a:	f000 faeb 	bl	8000bf4 <BSP_PB_GetState>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d03d      	beq.n	80006a0 <debounceUpdate+0xac>
			{
				delayRead(&delay);
 8000624:	4825      	ldr	r0, [pc, #148]	; (80006bc <debounceUpdate+0xc8>)
 8000626:	f000 f8db 	bl	80007e0 <delayRead>
				debounceState = BUTTON_FALLING;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <debounceUpdate+0xc4>)
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000630:	e036      	b.n	80006a0 <debounceUpdate+0xac>
		case BUTTON_FALLING:
			if(delayRead(&delay))
 8000632:	4822      	ldr	r0, [pc, #136]	; (80006bc <debounceUpdate+0xc8>)
 8000634:	f000 f8d4 	bl	80007e0 <delayRead>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d032      	beq.n	80006a4 <debounceUpdate+0xb0>
			{
				if(BSP_PB_GetState(BUTTON_USER))
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fad8 	bl	8000bf4 <BSP_PB_GetState>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d005      	beq.n	8000656 <debounceUpdate+0x62>
				{
					buttonPressed();
 800064a:	f000 f839 	bl	80006c0 <buttonPressed>
					debounceState = BUTTON_DOWN;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <debounceUpdate+0xc4>)
 8000650:	2202      	movs	r2, #2
 8000652:	701a      	strb	r2, [r3, #0]
				else
				{
					debounceState = BUTTON_UP;
				}
			}
			break;
 8000654:	e026      	b.n	80006a4 <debounceUpdate+0xb0>
					debounceState = BUTTON_UP;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <debounceUpdate+0xc4>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
			break;
 800065c:	e022      	b.n	80006a4 <debounceUpdate+0xb0>
		case BUTTON_DOWN:
			if(!BSP_PB_GetState(BUTTON_USER))
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fac8 	bl	8000bf4 <BSP_PB_GetState>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d11e      	bne.n	80006a8 <debounceUpdate+0xb4>
			{
				delayRead(&delay);
 800066a:	4814      	ldr	r0, [pc, #80]	; (80006bc <debounceUpdate+0xc8>)
 800066c:	f000 f8b8 	bl	80007e0 <delayRead>
				debounceState = BUTTON_RAISING;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <debounceUpdate+0xc4>)
 8000672:	2203      	movs	r2, #3
 8000674:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000676:	e017      	b.n	80006a8 <debounceUpdate+0xb4>
		case BUTTON_RAISING:
			if(delayRead(&delay))
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <debounceUpdate+0xc8>)
 800067a:	f000 f8b1 	bl	80007e0 <delayRead>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d013      	beq.n	80006ac <debounceUpdate+0xb8>
			{
				if(!BSP_PB_GetState(BUTTON_USER))
 8000684:	2000      	movs	r0, #0
 8000686:	f000 fab5 	bl	8000bf4 <BSP_PB_GetState>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d103      	bne.n	8000698 <debounceUpdate+0xa4>
				{
					debounceState = BUTTON_UP;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <debounceUpdate+0xc4>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
				else
				{
					debounceState = BUTTON_DOWN;
				}
			}
			break;
 8000696:	e009      	b.n	80006ac <debounceUpdate+0xb8>
					debounceState = BUTTON_DOWN;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <debounceUpdate+0xc4>)
 800069a:	2202      	movs	r2, #2
 800069c:	701a      	strb	r2, [r3, #0]
			break;
 800069e:	e005      	b.n	80006ac <debounceUpdate+0xb8>
			break;
 80006a0:	bf00      	nop
 80006a2:	e004      	b.n	80006ae <debounceUpdate+0xba>
			break;
 80006a4:	bf00      	nop
 80006a6:	e002      	b.n	80006ae <debounceUpdate+0xba>
			break;
 80006a8:	bf00      	nop
 80006aa:	e000      	b.n	80006ae <debounceUpdate+0xba>
			break;
 80006ac:	bf00      	nop
	}
	leds();
 80006ae:	f000 f857 	bl	8000760 <leds>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000bc 	.word	0x200000bc
 80006bc:	200000c0 	.word	0x200000c0

080006c0 <buttonPressed>:

void buttonPressed()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	mefUpdate();
 80006c4:	f000 f8bc 	bl	8000840 <mefUpdate>
	pbFlag = !pbFlag;
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <buttonPressed+0x90>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf14      	ite	ne
 80006d0:	2301      	movne	r3, #1
 80006d2:	2300      	moveq	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	f083 0301 	eor.w	r3, r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <buttonPressed+0x90>)
 80006e4:	701a      	strb	r2, [r3, #0]
	if(pbFlag == true)
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <buttonPressed+0x90>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d018      	beq.n	8000720 <buttonPressed+0x60>
		{
			BSP_LED_Off(LED1);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f9f6 	bl	8000ae0 <BSP_LED_Off>
			BSP_LED_Off(LED2);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 f9f3 	bl	8000ae0 <BSP_LED_Off>
			BSP_LED_Off(LED3);
 80006fa:	2002      	movs	r0, #2
 80006fc:	f000 f9f0 	bl	8000ae0 <BSP_LED_Off>
			delayInit(&led1Delay,500);
 8000700:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000704:	4813      	ldr	r0, [pc, #76]	; (8000754 <buttonPressed+0x94>)
 8000706:	f000 f851 	bl	80007ac <delayInit>
			delayInit(&led2Delay,500);
 800070a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800070e:	4812      	ldr	r0, [pc, #72]	; (8000758 <buttonPressed+0x98>)
 8000710:	f000 f84c 	bl	80007ac <delayInit>
			delayInit(&led3Delay,500);
 8000714:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <buttonPressed+0x9c>)
 800071a:	f000 f847 	bl	80007ac <delayInit>
		{
			delayInit(&led1Delay,100);
			delayInit(&led2Delay,500);
			delayInit(&led3Delay,1000);
		}
}
 800071e:	e014      	b.n	800074a <buttonPressed+0x8a>
	else if (pbFlag == false)
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <buttonPressed+0x90>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	f083 0301 	eor.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00d      	beq.n	800074a <buttonPressed+0x8a>
			delayInit(&led1Delay,100);
 800072e:	2164      	movs	r1, #100	; 0x64
 8000730:	4808      	ldr	r0, [pc, #32]	; (8000754 <buttonPressed+0x94>)
 8000732:	f000 f83b 	bl	80007ac <delayInit>
			delayInit(&led2Delay,500);
 8000736:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800073a:	4807      	ldr	r0, [pc, #28]	; (8000758 <buttonPressed+0x98>)
 800073c:	f000 f836 	bl	80007ac <delayInit>
			delayInit(&led3Delay,1000);
 8000740:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <buttonPressed+0x9c>)
 8000746:	f000 f831 	bl	80007ac <delayInit>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000f0 	.word	0x200000f0
 8000754:	200000cc 	.word	0x200000cc
 8000758:	200000d8 	.word	0x200000d8
 800075c:	200000e4 	.word	0x200000e4

08000760 <leds>:

void leds()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	if (delayRead(&led1Delay))
 8000764:	480e      	ldr	r0, [pc, #56]	; (80007a0 <leds+0x40>)
 8000766:	f000 f83b 	bl	80007e0 <delayRead>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <leds+0x16>
	{
		BSP_LED_Toggle(LED1);
 8000770:	2000      	movs	r0, #0
 8000772:	f000 f9cf 	bl	8000b14 <BSP_LED_Toggle>
	}
	if (delayRead(&led2Delay))
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <leds+0x44>)
 8000778:	f000 f832 	bl	80007e0 <delayRead>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <leds+0x28>
	{
		BSP_LED_Toggle(LED2);
 8000782:	2001      	movs	r0, #1
 8000784:	f000 f9c6 	bl	8000b14 <BSP_LED_Toggle>
	}
	if (delayRead(&led3Delay))
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <leds+0x48>)
 800078a:	f000 f829 	bl	80007e0 <delayRead>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <leds+0x3a>
	{
		BSP_LED_Toggle(LED3);
 8000794:	2002      	movs	r0, #2
 8000796:	f000 f9bd 	bl	8000b14 <BSP_LED_Toggle>
	}
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000cc 	.word	0x200000cc
 80007a4:	200000d8 	.word	0x200000d8
 80007a8:	200000e4 	.word	0x200000e4

080007ac <delayInit>:
 */

#include "API_delay.h"

void delayInit ( delay_t * delay, tick_t duration)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	if(delay == 0 || duration < 0 || duration > MAX_DELAY) //Puntero no sea cero
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d004      	beq.n	80007c6 <delayInit+0x1a>
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	f242 7210 	movw	r2, #10000	; 0x2710
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d900      	bls.n	80007c8 <delayInit+0x1c>
		while(1);
 80007c6:	e7fe      	b.n	80007c6 <delayInit+0x1a>
	delay->duration = duration;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	605a      	str	r2, [r3, #4]
	delay->running = 0;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	721a      	strb	r2, [r3, #8]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <delayRead>:

bool_t delayRead ( delay_t * delay)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	bool_t isDurationOver = false;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]

	if (delay==0)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d100      	bne.n	80007f4 <delayRead+0x14>
		while(1);
 80007f2:	e7fe      	b.n	80007f2 <delayRead+0x12>

	if (!delay->running)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7a1b      	ldrb	r3, [r3, #8]
 80007f8:	f083 0301 	eor.w	r3, r3, #1
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d009      	beq.n	8000816 <delayRead+0x36>
	{
		delay->startTime = HAL_GetTick();
 8000802:	f000 fb75 	bl	8000ef0 <HAL_GetTick>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
		delay->running = true;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2201      	movs	r2, #1
 8000812:	721a      	strb	r2, [r3, #8]
 8000814:	e00f      	b.n	8000836 <delayRead+0x56>
	}
	else
	{
		if (((tick_t)HAL_GetTick() - delay->startTime) >= delay->duration)
 8000816:	f000 fb6b 	bl	8000ef0 <HAL_GetTick>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	1ad2      	subs	r2, r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	d304      	bcc.n	8000836 <delayRead+0x56>
		{
			isDurationOver = true;
 800082c:	2301      	movs	r3, #1
 800082e:	73fb      	strb	r3, [r7, #15]
			delay->running = 0;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	721a      	strb	r2, [r3, #8]
		}
	}
	return isDurationOver;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <mefUpdate>:
	return true;
}


void mefUpdate()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	switch(demoState)
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <mefUpdate+0x88>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b05      	cmp	r3, #5
 800084a:	d838      	bhi.n	80008be <mefUpdate+0x7e>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <mefUpdate+0x14>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	0800086d 	.word	0x0800086d
 8000858:	08000883 	.word	0x08000883
 800085c:	0800088f 	.word	0x0800088f
 8000860:	0800089b 	.word	0x0800089b
 8000864:	080008a7 	.word	0x080008a7
 8000868:	080008b3 	.word	0x080008b3
	{
	case UART_stt:
		uartSendMsg((uint8_t *)stringMsg);
 800086c:	4817      	ldr	r0, [pc, #92]	; (80008cc <mefUpdate+0x8c>)
 800086e:	f000 f88f 	bl	8000990 <uartSendMsg>
		uartReadMsg();
 8000872:	f000 f8b1 	bl	80009d8 <uartReadMsg>
		//		scsFlag = !scsFlag;
		scsFlag = true;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <mefUpdate+0x90>)
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
		demoState = IO_stt;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <mefUpdate+0x88>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
	case IO_stt:
		uartSendMsg((uint8_t *)("\r Entradas y salidas verificadas \n\r"));
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <mefUpdate+0x94>)
 8000884:	f000 f884 	bl	8000990 <uartSendMsg>
		demoState = SD_stt;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <mefUpdate+0x88>)
 800088a:	2202      	movs	r2, #2
 800088c:	701a      	strb	r2, [r3, #0]
	case SD_stt:
		uartSendMsg((uint8_t *)("\r Micro SD verificada \n\r"));
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <mefUpdate+0x98>)
 8000890:	f000 f87e 	bl	8000990 <uartSendMsg>
		demoState = WIFI_stt;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <mefUpdate+0x88>)
 8000896:	2203      	movs	r2, #3
 8000898:	701a      	strb	r2, [r3, #0]
	case WIFI_stt:
		uartSendMsg((uint8_t *)("\r WiFi verificado \n\r"));
 800089a:	4810      	ldr	r0, [pc, #64]	; (80008dc <mefUpdate+0x9c>)
 800089c:	f000 f878 	bl	8000990 <uartSendMsg>
		demoState = BLE_stt;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <mefUpdate+0x88>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	701a      	strb	r2, [r3, #0]
	case BLE_stt:
		uartSendMsg((uint8_t *)("\r BLE verificado \n\r"));
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <mefUpdate+0xa0>)
 80008a8:	f000 f872 	bl	8000990 <uartSendMsg>
		demoState = ETH_stt;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <mefUpdate+0x88>)
 80008ae:	2205      	movs	r2, #5
 80008b0:	701a      	strb	r2, [r3, #0]
	case ETH_stt:
		uartSendMsg((uint8_t *)("\r Ethernet verificado \n\r"));
 80008b2:	480c      	ldr	r0, [pc, #48]	; (80008e4 <mefUpdate+0xa4>)
 80008b4:	f000 f86c 	bl	8000990 <uartSendMsg>
		demoState = UART_stt;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <mefUpdate+0x88>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
	}
	leds();
 80008be:	f7ff ff4f 	bl	8000760 <leds>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000f1 	.word	0x200000f1
 80008cc:	20000000 	.word	0x20000000
 80008d0:	200000f2 	.word	0x200000f2
 80008d4:	0800376c 	.word	0x0800376c
 80008d8:	08003790 	.word	0x08003790
 80008dc:	080037ac 	.word	0x080037ac
 80008e0:	080037c4 	.word	0x080037c4
 80008e4:	080037d8 	.word	0x080037d8

080008e8 <uartPrintConfig>:

UART_HandleTypeDef UartHandle;
static char answ[];

static void uartPrintConfig(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	printf("Velocidad serial: %lu baudios.\n\r",UartHandle.Init.BaudRate);
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <uartPrintConfig+0x38>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4619      	mov	r1, r3
 80008f2:	480c      	ldr	r0, [pc, #48]	; (8000924 <uartPrintConfig+0x3c>)
 80008f4:	f001 ffd8 	bl	80028a8 <iprintf>
	printf("Max longitud de caracteres: %lu .\n\r",UartHandle.Init.WordLength);
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <uartPrintConfig+0x38>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	4619      	mov	r1, r3
 80008fe:	480a      	ldr	r0, [pc, #40]	; (8000928 <uartPrintConfig+0x40>)
 8000900:	f001 ffd2 	bl	80028a8 <iprintf>
	printf("Bits de parada: %lu .\n\r",UartHandle.Init.StopBits);
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <uartPrintConfig+0x38>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	4619      	mov	r1, r3
 800090a:	4808      	ldr	r0, [pc, #32]	; (800092c <uartPrintConfig+0x44>)
 800090c:	f001 ffcc 	bl	80028a8 <iprintf>
	printf("Bit de paridad: %lu .\n\r",UartHandle.Init.Parity);
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <uartPrintConfig+0x38>)
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <uartPrintConfig+0x48>)
 8000918:	f001 ffc6 	bl	80028a8 <iprintf>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000104 	.word	0x20000104
 8000924:	0800380c 	.word	0x0800380c
 8000928:	08003830 	.word	0x08003830
 800092c:	08003854 	.word	0x08003854
 8000930:	0800386c 	.word	0x0800386c

08000934 <uartInit>:

bool uartInit()
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	UartHandle.Instance        = USARTx;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <uartInit+0x54>)
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <uartInit+0x58>)
 800093c:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 9600;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <uartInit+0x54>)
 8000940:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000944:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <uartInit+0x54>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <uartInit+0x54>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <uartInit+0x54>)
 8000954:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000958:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <uartInit+0x54>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <uartInit+0x54>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <uartInit+0x54>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <uartInit+0x54>)
 800096e:	f001 faf3 	bl	8001f58 <HAL_UART_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <uartInit+0x48>
	{
		return false;
 8000978:	2300      	movs	r3, #0
 800097a:	e002      	b.n	8000982 <uartInit+0x4e>
	}
	uartPrintConfig();
 800097c:	f7ff ffb4 	bl	80008e8 <uartPrintConfig>
	return true;
 8000980:	2301      	movs	r3, #1
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000104 	.word	0x20000104
 800098c:	40004800 	.word	0x40004800

08000990 <uartSendMsg>:

void uartSendMsg(uint8_t *pstring)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	uint8_t i, count = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	73bb      	strb	r3, [r7, #14]
	for(i=0; *(pstring + i) !=0; i++)
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
 80009a0:	e005      	b.n	80009ae <uartSendMsg+0x1e>
	{
		count++;
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	3301      	adds	r3, #1
 80009a6:	73bb      	strb	r3, [r7, #14]
	for(i=0; *(pstring + i) !=0; i++)
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	3301      	adds	r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	4413      	add	r3, r2
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1f3      	bne.n	80009a2 <uartSendMsg+0x12>
	}
	HAL_UART_Transmit(&UartHandle, pstring, count, 0xFFFF);
 80009ba:	7bbb      	ldrb	r3, [r7, #14]
 80009bc:	b29a      	uxth	r2, r3
 80009be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <uartSendMsg+0x44>)
 80009c6:	f001 fb14 	bl	8001ff2 <HAL_UART_Transmit>
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000104 	.word	0x20000104

080009d8 <uartReadMsg>:

void uartReadMsg()
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

	if (__HAL_UART_GET_FLAG(&UartHandle, UART_FLAG_RXNE)!=0)
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <uartReadMsg+0x2c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f003 0320 	and.w	r3, r3, #32
 80009e6:	2b20      	cmp	r3, #32
 80009e8:	d109      	bne.n	80009fe <uartReadMsg+0x26>
	{
		HAL_UART_Receive(&UartHandle, (uint8_t *)answ, 0xFF, 0xFFFF);
 80009ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ee:	22ff      	movs	r2, #255	; 0xff
 80009f0:	4905      	ldr	r1, [pc, #20]	; (8000a08 <uartReadMsg+0x30>)
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <uartReadMsg+0x2c>)
 80009f4:	f001 fb8f 	bl	8002116 <HAL_UART_Receive>
		uartSendMsg((uint8_t *)answ);
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <uartReadMsg+0x30>)
 80009fa:	f7ff ffc9 	bl	8000990 <uartSendMsg>
	}
//	*answ = 0;
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000104 	.word	0x20000104
 8000a08:	200000f4 	.word	0x200000f4

08000a0c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d10e      	bne.n	8000a3a <BSP_LED_Init+0x2e>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <BSP_LED_Init+0x94>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <BSP_LED_Init+0x94>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <BSP_LED_Init+0x94>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	e00d      	b.n	8000a56 <BSP_LED_Init+0x4a>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <BSP_LED_Init+0x94>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <BSP_LED_Init+0x94>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <BSP_LED_Init+0x94>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <BSP_LED_Init+0x98>)
 8000a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <BSP_LED_Init+0x9c>)
 8000a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a74:	f107 0214 	add.w	r2, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fb56 	bl	800112c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <BSP_LED_Init+0x9c>)
 8000a84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <BSP_LED_Init+0x98>)
 8000a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a90:	2200      	movs	r2, #0
 8000a92:	4619      	mov	r1, r3
 8000a94:	f000 fd0e 	bl	80014b4 <HAL_GPIO_WritePin>
}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	08003884 	.word	0x08003884
 8000aa8:	20000020 	.word	0x20000020

08000aac <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <BSP_LED_On+0x2c>)
 8000aba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <BSP_LED_On+0x30>)
 8000ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f000 fcf3 	bl	80014b4 <HAL_GPIO_WritePin>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000020 	.word	0x20000020
 8000adc:	08003884 	.word	0x08003884

08000ae0 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <BSP_LED_Off+0x2c>)
 8000aee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <BSP_LED_Off+0x30>)
 8000af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000afa:	2200      	movs	r2, #0
 8000afc:	4619      	mov	r1, r3
 8000afe:	f000 fcd9 	bl	80014b4 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000020 	.word	0x20000020
 8000b10:	08003884 	.word	0x08003884

08000b14 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <BSP_LED_Toggle+0x2c>)
 8000b22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4906      	ldr	r1, [pc, #24]	; (8000b44 <BSP_LED_Toggle+0x30>)
 8000b2a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4610      	mov	r0, r2
 8000b32:	f000 fcd8 	bl	80014e6 <HAL_GPIO_TogglePin>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000020 	.word	0x20000020
 8000b44:	08003884 	.word	0x08003884

08000b48 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <BSP_PB_Init+0xa4>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a22      	ldr	r2, [pc, #136]	; (8000bec <BSP_PB_Init+0xa4>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <BSP_PB_Init+0xa4>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d112      	bne.n	8000ba0 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b84:	2302      	movs	r3, #2
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <BSP_PB_Init+0xa8>)
 8000b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b94:	f107 020c 	add.w	r2, r7, #12
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fac6 	bl	800112c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d11d      	bne.n	8000be2 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000baa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000bb0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bb4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <BSP_PB_Init+0xa8>)
 8000bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbe:	f107 020c 	add.w	r2, r7, #12
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fab1 	bl	800112c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000bca:	2328      	movs	r3, #40	; 0x28
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	2200      	movs	r2, #0
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 fa73 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000bd8:	2328      	movs	r3, #40	; 0x28
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fa8a 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	2000002c 	.word	0x2000002c

08000bf4 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <BSP_PB_GetState+0x28>)
 8000c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fc39 	bl	8001484 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000002c 	.word	0x2000002c

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <SystemInit+0x60>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <SystemInit+0x60>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <SystemInit+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <SystemInit+0x64>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <SystemInit+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <SystemInit+0x64>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <SystemInit+0x64>)
 8000c4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <SystemInit+0x64>)
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <SystemInit+0x68>)
 8000c5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <SystemInit+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <SystemInit+0x64>)
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SystemInit+0x60>)
 8000c70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c74:	609a      	str	r2, [r3, #8]
#endif
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00
 8000c84:	40023800 	.word	0x40023800
 8000c88:	24003010 	.word	0x24003010

08000c8c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000ce0:	f000 f8f2 	bl	8000ec8 <HAL_IncTick>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
	}

return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e009      	b.n	8000d48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 fcdd 	bl	80026fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf1      	blt.n	8000d34 <_write+0x12>
	}
	return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_close>:

int _close(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d82:	605a      	str	r2, [r3, #4]
	return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f001 fd26 	bl	8002844 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20030000 	.word	0x20030000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	200000f8 	.word	0x200000f8
 8000e2c:	20000160 	.word	0x20000160

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_Init+0x34>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_Init+0x34>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_Init+0x34>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_Init+0x34>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f92b 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	200f      	movs	r0, #15
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f000 fbb2 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f943 	bl	8001112 <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f000 f90b 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000030 	.word	0x20000030
 8000ec0:	20000038 	.word	0x20000038
 8000ec4:	20000034 	.word	0x20000034

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000038 	.word	0x20000038
 8000eec:	20000148 	.word	0x20000148

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000148 	.word	0x20000148

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff3e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff31 	bl	8000f6c <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	e177      	b.n	8001438 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001148:	2201      	movs	r2, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	429a      	cmp	r2, r3
 8001162:	f040 8166 	bne.w	8001432 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d005      	beq.n	800117e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117a:	2b02      	cmp	r3, #2
 800117c:	d130      	bne.n	80011e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d017      	beq.n	800121c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d123      	bne.n	8001270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	69b9      	ldr	r1, [r7, #24]
 800126c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0203 	and.w	r2, r3, #3
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80c0 	beq.w	8001432 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b66      	ldr	r3, [pc, #408]	; (8001450 <HAL_GPIO_Init+0x324>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a65      	ldr	r2, [pc, #404]	; (8001450 <HAL_GPIO_Init+0x324>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b63      	ldr	r3, [pc, #396]	; (8001450 <HAL_GPIO_Init+0x324>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ce:	4a61      	ldr	r2, [pc, #388]	; (8001454 <HAL_GPIO_Init+0x328>)
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	220f      	movs	r2, #15
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a58      	ldr	r2, [pc, #352]	; (8001458 <HAL_GPIO_Init+0x32c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d037      	beq.n	800136a <HAL_GPIO_Init+0x23e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a57      	ldr	r2, [pc, #348]	; (800145c <HAL_GPIO_Init+0x330>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d031      	beq.n	8001366 <HAL_GPIO_Init+0x23a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a56      	ldr	r2, [pc, #344]	; (8001460 <HAL_GPIO_Init+0x334>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d02b      	beq.n	8001362 <HAL_GPIO_Init+0x236>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a55      	ldr	r2, [pc, #340]	; (8001464 <HAL_GPIO_Init+0x338>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d025      	beq.n	800135e <HAL_GPIO_Init+0x232>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a54      	ldr	r2, [pc, #336]	; (8001468 <HAL_GPIO_Init+0x33c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01f      	beq.n	800135a <HAL_GPIO_Init+0x22e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a53      	ldr	r2, [pc, #332]	; (800146c <HAL_GPIO_Init+0x340>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d019      	beq.n	8001356 <HAL_GPIO_Init+0x22a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a52      	ldr	r2, [pc, #328]	; (8001470 <HAL_GPIO_Init+0x344>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0x226>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a51      	ldr	r2, [pc, #324]	; (8001474 <HAL_GPIO_Init+0x348>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00d      	beq.n	800134e <HAL_GPIO_Init+0x222>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a50      	ldr	r2, [pc, #320]	; (8001478 <HAL_GPIO_Init+0x34c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x21e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <HAL_GPIO_Init+0x350>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_GPIO_Init+0x21a>
 8001342:	2309      	movs	r3, #9
 8001344:	e012      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001346:	230a      	movs	r3, #10
 8001348:	e010      	b.n	800136c <HAL_GPIO_Init+0x240>
 800134a:	2308      	movs	r3, #8
 800134c:	e00e      	b.n	800136c <HAL_GPIO_Init+0x240>
 800134e:	2307      	movs	r3, #7
 8001350:	e00c      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001352:	2306      	movs	r3, #6
 8001354:	e00a      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001356:	2305      	movs	r3, #5
 8001358:	e008      	b.n	800136c <HAL_GPIO_Init+0x240>
 800135a:	2304      	movs	r3, #4
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x240>
 800135e:	2303      	movs	r3, #3
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x240>
 800136a:	2300      	movs	r3, #0
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4093      	lsls	r3, r2
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800137c:	4935      	ldr	r1, [pc, #212]	; (8001454 <HAL_GPIO_Init+0x328>)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_GPIO_Init+0x354>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ae:	4a34      	ldr	r2, [pc, #208]	; (8001480 <HAL_GPIO_Init+0x354>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013b4:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_GPIO_Init+0x354>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d8:	4a29      	ldr	r2, [pc, #164]	; (8001480 <HAL_GPIO_Init+0x354>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <HAL_GPIO_Init+0x354>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001402:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <HAL_GPIO_Init+0x354>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_GPIO_Init+0x354>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_GPIO_Init+0x354>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	f67f ae84 	bls.w	8001148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40021400 	.word	0x40021400
 8001470:	40021800 	.word	0x40021800
 8001474:	40021c00 	.word	0x40021c00
 8001478:	40022000 	.word	0x40022000
 800147c:	40022400 	.word	0x40022400
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e001      	b.n	80014a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
 80014c0:	4613      	mov	r3, r2
 80014c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c4:	787b      	ldrb	r3, [r7, #1]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d0:	e003      	b.n	80014da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	041a      	lsls	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	619a      	str	r2, [r3, #24]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014f8:	887a      	ldrh	r2, [r7, #2]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4013      	ands	r3, r2
 80014fe:	041a      	lsls	r2, r3, #16
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43d9      	mvns	r1, r3
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	400b      	ands	r3, r1
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6313      	str	r3, [r2, #48]	; 0x30
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 8001566:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001582:	2301      	movs	r3, #1
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800158a:	2307      	movs	r3, #7
 800158c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <HAL_UART_MspInit+0xa0>)
 8001596:	f7ff fdc9 	bl	800112c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800159a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80015a0:	2307      	movs	r3, #7
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4804      	ldr	r0, [pc, #16]	; (80015bc <HAL_UART_MspInit+0xa0>)
 80015ac:	f7ff fdbe 	bl	800112c <HAL_GPIO_Init>
}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020c00 	.word	0x40020c00

080015c0 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_PWREx_EnableOverDrive+0x90>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <HAL_PWREx_EnableOverDrive+0x90>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <HAL_PWREx_EnableOverDrive+0x90>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_PWREx_EnableOverDrive+0x94>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015fc:	f7ff fc78 	bl	8000ef0 <HAL_GetTick>
 8001600:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001602:	e009      	b.n	8001618 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001604:	f7ff fc74 	bl	8000ef0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001612:	d901      	bls.n	8001618 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e01f      	b.n	8001658 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_PWREx_EnableOverDrive+0x98>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001624:	d1ee      	bne.n	8001604 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800162c:	f7ff fc60 	bl	8000ef0 <HAL_GetTick>
 8001630:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001632:	e009      	b.n	8001648 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001634:	f7ff fc5c 	bl	8000ef0 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001642:	d901      	bls.n	8001648 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e007      	b.n	8001658 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <HAL_PWREx_EnableOverDrive+0x98>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001654:	d1ee      	bne.n	8001634 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	420e0040 	.word	0x420e0040
 8001668:	40007000 	.word	0x40007000
 800166c:	420e0044 	.word	0x420e0044

08001670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e264      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d075      	beq.n	800177a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800168e:	4ba3      	ldr	r3, [pc, #652]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b04      	cmp	r3, #4
 8001698:	d00c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169a:	4ba0      	ldr	r3, [pc, #640]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d112      	bne.n	80016cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a6:	4b9d      	ldr	r3, [pc, #628]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b2:	d10b      	bne.n	80016cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	4b99      	ldr	r3, [pc, #612]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d05b      	beq.n	8001778 <HAL_RCC_OscConfig+0x108>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d157      	bne.n	8001778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e23f      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d4:	d106      	bne.n	80016e4 <HAL_RCC_OscConfig+0x74>
 80016d6:	4b91      	ldr	r3, [pc, #580]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a90      	ldr	r2, [pc, #576]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e01d      	b.n	8001720 <HAL_RCC_OscConfig+0xb0>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x98>
 80016ee:	4b8b      	ldr	r3, [pc, #556]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a8a      	ldr	r2, [pc, #552]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a87      	ldr	r2, [pc, #540]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0xb0>
 8001708:	4b84      	ldr	r3, [pc, #528]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a83      	ldr	r2, [pc, #524]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800170e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b81      	ldr	r3, [pc, #516]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a80      	ldr	r2, [pc, #512]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800171a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d013      	beq.n	8001750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fbe2 	bl	8000ef0 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fbde 	bl	8000ef0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e204      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0xc0>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fbce 	bl	8000ef0 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fbca 	bl	8000ef0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1f0      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	4b6c      	ldr	r3, [pc, #432]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0xe8>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d063      	beq.n	800184e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001792:	4b62      	ldr	r3, [pc, #392]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800179a:	2b08      	cmp	r3, #8
 800179c:	d11c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179e:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d116      	bne.n	80017d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	4b5c      	ldr	r3, [pc, #368]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x152>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e1c4      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4b56      	ldr	r3, [pc, #344]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4952      	ldr	r1, [pc, #328]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d6:	e03a      	b.n	800184e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e0:	4b4f      	ldr	r3, [pc, #316]	; (8001920 <HAL_RCC_OscConfig+0x2b0>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff fb83 	bl	8000ef0 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff fb7f 	bl	8000ef0 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e1a5      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	4b46      	ldr	r3, [pc, #280]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4940      	ldr	r1, [pc, #256]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
 8001820:	e015      	b.n	800184e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001822:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_OscConfig+0x2b0>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fb62 	bl	8000ef0 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff fb5e 	bl	8000ef0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e184      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	4b36      	ldr	r3, [pc, #216]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d030      	beq.n	80018bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d016      	beq.n	8001890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001862:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_RCC_OscConfig+0x2b4>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff fb42 	bl	8000ef0 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff fb3e 	bl	8000ef0 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e164      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x200>
 800188e:	e015      	b.n	80018bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x2b4>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7ff fb2b 	bl	8000ef0 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff fb27 	bl	8000ef0 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e14d      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80018b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80a0 	beq.w	8001a0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10f      	bne.n	80018fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f6:	2301      	movs	r3, #1
 80018f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_OscConfig+0x2b8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d121      	bne.n	800194a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_RCC_OscConfig+0x2b8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_RCC_OscConfig+0x2b8>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001912:	f7ff faed 	bl	8000ef0 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001918:	e011      	b.n	800193e <HAL_RCC_OscConfig+0x2ce>
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	42470000 	.word	0x42470000
 8001924:	42470e80 	.word	0x42470e80
 8001928:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192c:	f7ff fae0 	bl	8000ef0 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e106      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b85      	ldr	r3, [pc, #532]	; (8001b54 <HAL_RCC_OscConfig+0x4e4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d106      	bne.n	8001960 <HAL_RCC_OscConfig+0x2f0>
 8001952:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a80      	ldr	r2, [pc, #512]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
 800195e:	e01c      	b.n	800199a <HAL_RCC_OscConfig+0x32a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b05      	cmp	r3, #5
 8001966:	d10c      	bne.n	8001982 <HAL_RCC_OscConfig+0x312>
 8001968:	4b7b      	ldr	r3, [pc, #492]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	4a7a      	ldr	r2, [pc, #488]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6713      	str	r3, [r2, #112]	; 0x70
 8001974:	4b78      	ldr	r3, [pc, #480]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a77      	ldr	r2, [pc, #476]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	e00b      	b.n	800199a <HAL_RCC_OscConfig+0x32a>
 8001982:	4b75      	ldr	r3, [pc, #468]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	4a74      	ldr	r2, [pc, #464]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6713      	str	r3, [r2, #112]	; 0x70
 800198e:	4b72      	ldr	r3, [pc, #456]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	4a71      	ldr	r2, [pc, #452]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001994:	f023 0304 	bic.w	r3, r3, #4
 8001998:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d015      	beq.n	80019ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a2:	f7ff faa5 	bl	8000ef0 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7ff faa1 	bl	8000ef0 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e0c5      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	4b65      	ldr	r3, [pc, #404]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ee      	beq.n	80019aa <HAL_RCC_OscConfig+0x33a>
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ce:	f7ff fa8f 	bl	8000ef0 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff fa8b 	bl	8000ef0 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e0af      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	4b5a      	ldr	r3, [pc, #360]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1ee      	bne.n	80019d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d105      	bne.n	8001a0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a55      	ldr	r2, [pc, #340]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 809b 	beq.w	8001b4a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d05c      	beq.n	8001ada <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d141      	bne.n	8001aac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a28:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <HAL_RCC_OscConfig+0x4ec>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fa5f 	bl	8000ef0 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff fa5b 	bl	8000ef0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e081      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a48:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69da      	ldr	r2, [r3, #28]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	019b      	lsls	r3, r3, #6
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	041b      	lsls	r3, r3, #16
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	061b      	lsls	r3, r3, #24
 8001a78:	4937      	ldr	r1, [pc, #220]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_RCC_OscConfig+0x4ec>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fa34 	bl	8000ef0 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff fa30 	bl	8000ef0 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e056      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x41c>
 8001aaa:	e04e      	b.n	8001b4a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_RCC_OscConfig+0x4ec>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fa1d 	bl	8000ef0 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff fa19 	bl	8000ef0 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e03f      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f0      	bne.n	8001aba <HAL_RCC_OscConfig+0x44a>
 8001ad8:	e037      	b.n	8001b4a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e032      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_RCC_OscConfig+0x4e8>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d028      	beq.n	8001b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d121      	bne.n	8001b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d11a      	bne.n	8001b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b16:	4013      	ands	r3, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b1c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d111      	bne.n	8001b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40007000 	.word	0x40007000
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	42470060 	.word	0x42470060

08001b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0cc      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b68      	ldr	r3, [pc, #416]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d90c      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b65      	ldr	r3, [pc, #404]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b63      	ldr	r3, [pc, #396]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0b8      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb4:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a58      	ldr	r2, [pc, #352]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bcc:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a52      	ldr	r2, [pc, #328]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	494d      	ldr	r1, [pc, #308]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d044      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b47      	ldr	r3, [pc, #284]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d119      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e07f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e06f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e067      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3e:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4934      	ldr	r1, [pc, #208]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c50:	f7ff f94e 	bl	8000ef0 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7ff f94a 	bl	8000ef0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e04f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 020c 	and.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1eb      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d20c      	bcs.n	8001ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e032      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4916      	ldr	r1, [pc, #88]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d009      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	490e      	ldr	r1, [pc, #56]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ce6:	f000 f821 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001cea:	4602      	mov	r2, r0
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	490a      	ldr	r1, [pc, #40]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	5ccb      	ldrb	r3, [r1, r3]
 8001cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfe:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f8ae 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023c00 	.word	0x40023c00
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	0800388c 	.word	0x0800388c
 8001d24:	20000030 	.word	0x20000030
 8001d28:	20000034 	.word	0x20000034

08001d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d44:	4b67      	ldr	r3, [pc, #412]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d00d      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x40>
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	f200 80bd 	bhi.w	8001ed0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x34>
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d003      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d5e:	e0b7      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d60:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d62:	60bb      	str	r3, [r7, #8]
       break;
 8001d64:	e0b7      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d66:	4b61      	ldr	r3, [pc, #388]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d68:	60bb      	str	r3, [r7, #8]
      break;
 8001d6a:	e0b4      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d6c:	4b5d      	ldr	r3, [pc, #372]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d76:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d04d      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d82:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	099b      	lsrs	r3, r3, #6
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d92:	f04f 0100 	mov.w	r1, #0
 8001d96:	ea02 0800 	and.w	r8, r2, r0
 8001d9a:	ea03 0901 	and.w	r9, r3, r1
 8001d9e:	4640      	mov	r0, r8
 8001da0:	4649      	mov	r1, r9
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	014b      	lsls	r3, r1, #5
 8001dac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001db0:	0142      	lsls	r2, r0, #5
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	ebb0 0008 	subs.w	r0, r0, r8
 8001dba:	eb61 0109 	sbc.w	r1, r1, r9
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	018b      	lsls	r3, r1, #6
 8001dc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dcc:	0182      	lsls	r2, r0, #6
 8001dce:	1a12      	subs	r2, r2, r0
 8001dd0:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd4:	f04f 0000 	mov.w	r0, #0
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	00d9      	lsls	r1, r3, #3
 8001dde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001de2:	00d0      	lsls	r0, r2, #3
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	eb12 0208 	adds.w	r2, r2, r8
 8001dec:	eb43 0309 	adc.w	r3, r3, r9
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	0259      	lsls	r1, r3, #9
 8001dfa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dfe:	0250      	lsls	r0, r2, #9
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	f7fe fa3e 	bl	8000290 <__aeabi_uldivmod>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e04a      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1e:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	461a      	mov	r2, r3
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e2e:	f04f 0100 	mov.w	r1, #0
 8001e32:	ea02 0400 	and.w	r4, r2, r0
 8001e36:	ea03 0501 	and.w	r5, r3, r1
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	014b      	lsls	r3, r1, #5
 8001e48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e4c:	0142      	lsls	r2, r0, #5
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	1b00      	subs	r0, r0, r4
 8001e54:	eb61 0105 	sbc.w	r1, r1, r5
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	018b      	lsls	r3, r1, #6
 8001e62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e66:	0182      	lsls	r2, r0, #6
 8001e68:	1a12      	subs	r2, r2, r0
 8001e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6e:	f04f 0000 	mov.w	r0, #0
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	00d9      	lsls	r1, r3, #3
 8001e78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e7c:	00d0      	lsls	r0, r2, #3
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	1912      	adds	r2, r2, r4
 8001e84:	eb45 0303 	adc.w	r3, r5, r3
 8001e88:	f04f 0000 	mov.w	r0, #0
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	0299      	lsls	r1, r3, #10
 8001e92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e96:	0290      	lsls	r0, r2, #10
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	f7fe f9f2 	bl	8000290 <__aeabi_uldivmod>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	60bb      	str	r3, [r7, #8]
      break;
 8001ece:	e002      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ed2:	60bb      	str	r3, [r7, #8]
      break;
 8001ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	00f42400 	.word	0x00f42400
 8001eec:	007a1200 	.word	0x007a1200

08001ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000030 	.word	0x20000030

08001f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f0c:	f7ff fff0 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0a9b      	lsrs	r3, r3, #10
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4903      	ldr	r1, [pc, #12]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	0800389c 	.word	0x0800389c

08001f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f34:	f7ff ffdc 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	0b5b      	lsrs	r3, r3, #13
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	4903      	ldr	r1, [pc, #12]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	0800389c 	.word	0x0800389c

08001f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e03f      	b.n	8001fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff facc 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2224      	movs	r2, #36	; 0x24
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f9cb 	bl	8002338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b08a      	sub	sp, #40	; 0x28
 8001ff6:	af02      	add	r7, sp, #8
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	d17c      	bne.n	800210c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_UART_Transmit+0x2c>
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e075      	b.n	800210e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_UART_Transmit+0x3e>
 800202c:	2302      	movs	r3, #2
 800202e:	e06e      	b.n	800210e <HAL_UART_Transmit+0x11c>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2221      	movs	r2, #33	; 0x21
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002046:	f7fe ff53 	bl	8000ef0 <HAL_GetTick>
 800204a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	88fa      	ldrh	r2, [r7, #6]
 8002050:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	88fa      	ldrh	r2, [r7, #6]
 8002056:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002060:	d108      	bne.n	8002074 <HAL_UART_Transmit+0x82>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d104      	bne.n	8002074 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	e003      	b.n	800207c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002084:	e02a      	b.n	80020dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f8e2 	bl	800225a <UART_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e036      	b.n	800210e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10b      	bne.n	80020be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	3302      	adds	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	e007      	b.n	80020ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	3301      	adds	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1cf      	bne.n	8002086 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2200      	movs	r2, #0
 80020ee:	2140      	movs	r1, #64	; 0x40
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f8b2 	bl	800225a <UART_WaitOnFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e006      	b.n	800210e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
  }
}
 800210e:	4618      	mov	r0, r3
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b08a      	sub	sp, #40	; 0x28
 800211a:	af02      	add	r7, sp, #8
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	4613      	mov	r3, r2
 8002124:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b20      	cmp	r3, #32
 8002134:	f040 808c 	bne.w	8002250 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_UART_Receive+0x2e>
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e084      	b.n	8002252 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_UART_Receive+0x40>
 8002152:	2302      	movs	r3, #2
 8002154:	e07d      	b.n	8002252 <HAL_UART_Receive+0x13c>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2222      	movs	r2, #34	; 0x22
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002172:	f7fe febd 	bl	8000ef0 <HAL_GetTick>
 8002176:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	88fa      	ldrh	r2, [r7, #6]
 8002182:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218c:	d108      	bne.n	80021a0 <HAL_UART_Receive+0x8a>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d104      	bne.n	80021a0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	e003      	b.n	80021a8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021b0:	e043      	b.n	800223a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2200      	movs	r2, #0
 80021ba:	2120      	movs	r1, #32
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f84c 	bl	800225a <UART_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e042      	b.n	8002252 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021de:	b29a      	uxth	r2, r3
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	3302      	adds	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	e01f      	b.n	800222c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f4:	d007      	beq.n	8002206 <HAL_UART_Receive+0xf0>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10a      	bne.n	8002214 <HAL_UART_Receive+0xfe>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e008      	b.n	8002226 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002220:	b2da      	uxtb	r2, r3
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3301      	adds	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1b6      	bne.n	80021b2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	e000      	b.n	8002252 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002250:	2302      	movs	r3, #2
  }
}
 8002252:	4618      	mov	r0, r3
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b090      	sub	sp, #64	; 0x40
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4613      	mov	r3, r2
 8002268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800226a:	e050      	b.n	800230e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800226e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002272:	d04c      	beq.n	800230e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <UART_WaitOnFlagUntilTimeout+0x30>
 800227a:	f7fe fe39 	bl	8000ef0 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002286:	429a      	cmp	r2, r3
 8002288:	d241      	bcs.n	800230e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	330c      	adds	r3, #12
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002294:	e853 3f00 	ldrex	r3, [r3]
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	330c      	adds	r3, #12
 80022a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022aa:	637a      	str	r2, [r7, #52]	; 0x34
 80022ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022b2:	e841 2300 	strex	r3, r2, [r1]
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1e5      	bne.n	800228a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3314      	adds	r3, #20
 80022c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	e853 3f00 	ldrex	r3, [r3]
 80022cc:	613b      	str	r3, [r7, #16]
   return(result);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3314      	adds	r3, #20
 80022dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022de:	623a      	str	r2, [r7, #32]
 80022e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e2:	69f9      	ldr	r1, [r7, #28]
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	e841 2300 	strex	r3, r2, [r1]
 80022ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1e5      	bne.n	80022be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e00f      	b.n	800232e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4013      	ands	r3, r2
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	429a      	cmp	r2, r3
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	429a      	cmp	r2, r3
 800232a:	d09f      	beq.n	800226c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3740      	adds	r7, #64	; 0x40
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800233c:	b09f      	sub	sp, #124	; 0x7c
 800233e:	af00      	add	r7, sp, #0
 8002340:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800234c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234e:	68d9      	ldr	r1, [r3, #12]
 8002350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	ea40 0301 	orr.w	r3, r0, r1
 8002358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800235a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	431a      	orrs	r2, r3
 8002364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	431a      	orrs	r2, r3
 800236a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4313      	orrs	r3, r2
 8002370:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800237c:	f021 010c 	bic.w	r1, r1, #12
 8002380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002386:	430b      	orrs	r3, r1
 8002388:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800238a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002396:	6999      	ldr	r1, [r3, #24]
 8002398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	ea40 0301 	orr.w	r3, r0, r1
 80023a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4bc5      	ldr	r3, [pc, #788]	; (80026bc <UART_SetConfig+0x384>)
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d004      	beq.n	80023b6 <UART_SetConfig+0x7e>
 80023ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4bc3      	ldr	r3, [pc, #780]	; (80026c0 <UART_SetConfig+0x388>)
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d103      	bne.n	80023be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023b6:	f7ff fdbb 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 80023ba:	6778      	str	r0, [r7, #116]	; 0x74
 80023bc:	e002      	b.n	80023c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023be:	f7ff fda3 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 80023c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023cc:	f040 80b6 	bne.w	800253c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d2:	461c      	mov	r4, r3
 80023d4:	f04f 0500 	mov.w	r5, #0
 80023d8:	4622      	mov	r2, r4
 80023da:	462b      	mov	r3, r5
 80023dc:	1891      	adds	r1, r2, r2
 80023de:	6439      	str	r1, [r7, #64]	; 0x40
 80023e0:	415b      	adcs	r3, r3
 80023e2:	647b      	str	r3, [r7, #68]	; 0x44
 80023e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023e8:	1912      	adds	r2, r2, r4
 80023ea:	eb45 0303 	adc.w	r3, r5, r3
 80023ee:	f04f 0000 	mov.w	r0, #0
 80023f2:	f04f 0100 	mov.w	r1, #0
 80023f6:	00d9      	lsls	r1, r3, #3
 80023f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023fc:	00d0      	lsls	r0, r2, #3
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	1911      	adds	r1, r2, r4
 8002404:	6639      	str	r1, [r7, #96]	; 0x60
 8002406:	416b      	adcs	r3, r5
 8002408:	667b      	str	r3, [r7, #100]	; 0x64
 800240a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	461a      	mov	r2, r3
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	1891      	adds	r1, r2, r2
 8002416:	63b9      	str	r1, [r7, #56]	; 0x38
 8002418:	415b      	adcs	r3, r3
 800241a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800241c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002420:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002424:	f7fd ff34 	bl	8000290 <__aeabi_uldivmod>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4ba5      	ldr	r3, [pc, #660]	; (80026c4 <UART_SetConfig+0x38c>)
 800242e:	fba3 2302 	umull	r2, r3, r3, r2
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	011e      	lsls	r6, r3, #4
 8002436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002438:	461c      	mov	r4, r3
 800243a:	f04f 0500 	mov.w	r5, #0
 800243e:	4622      	mov	r2, r4
 8002440:	462b      	mov	r3, r5
 8002442:	1891      	adds	r1, r2, r2
 8002444:	6339      	str	r1, [r7, #48]	; 0x30
 8002446:	415b      	adcs	r3, r3
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
 800244a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800244e:	1912      	adds	r2, r2, r4
 8002450:	eb45 0303 	adc.w	r3, r5, r3
 8002454:	f04f 0000 	mov.w	r0, #0
 8002458:	f04f 0100 	mov.w	r1, #0
 800245c:	00d9      	lsls	r1, r3, #3
 800245e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002462:	00d0      	lsls	r0, r2, #3
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	1911      	adds	r1, r2, r4
 800246a:	65b9      	str	r1, [r7, #88]	; 0x58
 800246c:	416b      	adcs	r3, r5
 800246e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	461a      	mov	r2, r3
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	1891      	adds	r1, r2, r2
 800247c:	62b9      	str	r1, [r7, #40]	; 0x28
 800247e:	415b      	adcs	r3, r3
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002486:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800248a:	f7fd ff01 	bl	8000290 <__aeabi_uldivmod>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4b8c      	ldr	r3, [pc, #560]	; (80026c4 <UART_SetConfig+0x38c>)
 8002494:	fba3 1302 	umull	r1, r3, r3, r2
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	2164      	movs	r1, #100	; 0x64
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	3332      	adds	r3, #50	; 0x32
 80024a6:	4a87      	ldr	r2, [pc, #540]	; (80026c4 <UART_SetConfig+0x38c>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024b4:	441e      	add	r6, r3
 80024b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b8:	4618      	mov	r0, r3
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	1894      	adds	r4, r2, r2
 80024c4:	623c      	str	r4, [r7, #32]
 80024c6:	415b      	adcs	r3, r3
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024ce:	1812      	adds	r2, r2, r0
 80024d0:	eb41 0303 	adc.w	r3, r1, r3
 80024d4:	f04f 0400 	mov.w	r4, #0
 80024d8:	f04f 0500 	mov.w	r5, #0
 80024dc:	00dd      	lsls	r5, r3, #3
 80024de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024e2:	00d4      	lsls	r4, r2, #3
 80024e4:	4622      	mov	r2, r4
 80024e6:	462b      	mov	r3, r5
 80024e8:	1814      	adds	r4, r2, r0
 80024ea:	653c      	str	r4, [r7, #80]	; 0x50
 80024ec:	414b      	adcs	r3, r1
 80024ee:	657b      	str	r3, [r7, #84]	; 0x54
 80024f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	461a      	mov	r2, r3
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	1891      	adds	r1, r2, r2
 80024fc:	61b9      	str	r1, [r7, #24]
 80024fe:	415b      	adcs	r3, r3
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002506:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800250a:	f7fd fec1 	bl	8000290 <__aeabi_uldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4b6c      	ldr	r3, [pc, #432]	; (80026c4 <UART_SetConfig+0x38c>)
 8002514:	fba3 1302 	umull	r1, r3, r3, r2
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	2164      	movs	r1, #100	; 0x64
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	3332      	adds	r3, #50	; 0x32
 8002526:	4a67      	ldr	r2, [pc, #412]	; (80026c4 <UART_SetConfig+0x38c>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	f003 0207 	and.w	r2, r3, #7
 8002532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4432      	add	r2, r6
 8002538:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800253a:	e0b9      	b.n	80026b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800253c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253e:	461c      	mov	r4, r3
 8002540:	f04f 0500 	mov.w	r5, #0
 8002544:	4622      	mov	r2, r4
 8002546:	462b      	mov	r3, r5
 8002548:	1891      	adds	r1, r2, r2
 800254a:	6139      	str	r1, [r7, #16]
 800254c:	415b      	adcs	r3, r3
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002554:	1912      	adds	r2, r2, r4
 8002556:	eb45 0303 	adc.w	r3, r5, r3
 800255a:	f04f 0000 	mov.w	r0, #0
 800255e:	f04f 0100 	mov.w	r1, #0
 8002562:	00d9      	lsls	r1, r3, #3
 8002564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002568:	00d0      	lsls	r0, r2, #3
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	eb12 0804 	adds.w	r8, r2, r4
 8002572:	eb43 0905 	adc.w	r9, r3, r5
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	f04f 0100 	mov.w	r1, #0
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	008b      	lsls	r3, r1, #2
 800258a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800258e:	0082      	lsls	r2, r0, #2
 8002590:	4640      	mov	r0, r8
 8002592:	4649      	mov	r1, r9
 8002594:	f7fd fe7c 	bl	8000290 <__aeabi_uldivmod>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4b49      	ldr	r3, [pc, #292]	; (80026c4 <UART_SetConfig+0x38c>)
 800259e:	fba3 2302 	umull	r2, r3, r3, r2
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	011e      	lsls	r6, r3, #4
 80025a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a8:	4618      	mov	r0, r3
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	1894      	adds	r4, r2, r2
 80025b4:	60bc      	str	r4, [r7, #8]
 80025b6:	415b      	adcs	r3, r3
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025be:	1812      	adds	r2, r2, r0
 80025c0:	eb41 0303 	adc.w	r3, r1, r3
 80025c4:	f04f 0400 	mov.w	r4, #0
 80025c8:	f04f 0500 	mov.w	r5, #0
 80025cc:	00dd      	lsls	r5, r3, #3
 80025ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025d2:	00d4      	lsls	r4, r2, #3
 80025d4:	4622      	mov	r2, r4
 80025d6:	462b      	mov	r3, r5
 80025d8:	1814      	adds	r4, r2, r0
 80025da:	64bc      	str	r4, [r7, #72]	; 0x48
 80025dc:	414b      	adcs	r3, r1
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	008b      	lsls	r3, r1, #2
 80025f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025f8:	0082      	lsls	r2, r0, #2
 80025fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80025fe:	f7fd fe47 	bl	8000290 <__aeabi_uldivmod>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <UART_SetConfig+0x38c>)
 8002608:	fba3 1302 	umull	r1, r3, r3, r2
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	2164      	movs	r1, #100	; 0x64
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	3332      	adds	r3, #50	; 0x32
 800261a:	4a2a      	ldr	r2, [pc, #168]	; (80026c4 <UART_SetConfig+0x38c>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002626:	441e      	add	r6, r3
 8002628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800262a:	4618      	mov	r0, r3
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	1894      	adds	r4, r2, r2
 8002636:	603c      	str	r4, [r7, #0]
 8002638:	415b      	adcs	r3, r3
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002640:	1812      	adds	r2, r2, r0
 8002642:	eb41 0303 	adc.w	r3, r1, r3
 8002646:	f04f 0400 	mov.w	r4, #0
 800264a:	f04f 0500 	mov.w	r5, #0
 800264e:	00dd      	lsls	r5, r3, #3
 8002650:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002654:	00d4      	lsls	r4, r2, #3
 8002656:	4622      	mov	r2, r4
 8002658:	462b      	mov	r3, r5
 800265a:	eb12 0a00 	adds.w	sl, r2, r0
 800265e:	eb43 0b01 	adc.w	fp, r3, r1
 8002662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4618      	mov	r0, r3
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	008b      	lsls	r3, r1, #2
 8002676:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800267a:	0082      	lsls	r2, r0, #2
 800267c:	4650      	mov	r0, sl
 800267e:	4659      	mov	r1, fp
 8002680:	f7fd fe06 	bl	8000290 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <UART_SetConfig+0x38c>)
 800268a:	fba3 1302 	umull	r1, r3, r3, r2
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2164      	movs	r1, #100	; 0x64
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	3332      	adds	r3, #50	; 0x32
 800269c:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <UART_SetConfig+0x38c>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	f003 020f 	and.w	r2, r3, #15
 80026a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4432      	add	r2, r6
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	377c      	adds	r7, #124	; 0x7c
 80026b4:	46bd      	mov	sp, r7
 80026b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ba:	bf00      	nop
 80026bc:	40011000 	.word	0x40011000
 80026c0:	40011400 	.word	0x40011400
 80026c4:	51eb851f 	.word	0x51eb851f

080026c8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
	HAL_Init();
 80026cc:	f7fe fbb0 	bl	8000e30 <HAL_Init>
	SystemClock_Config();
 80026d0:	f000 f826 	bl	8002720 <SystemClock_Config>
	debounceInit();
 80026d4:	f7fd ff58 	bl	8000588 <debounceInit>
	ledInit();
 80026d8:	f7fd ff6a 	bl	80005b0 <ledInit>

	if (!uartInit())
 80026dc:	f7fe f92a 	bl	8000934 <uartInit>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f083 0301 	eor.w	r3, r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <main+0x28>
	{
		Error_Handler();
 80026ec:	f000 f87a 	bl	80027e4 <Error_Handler>
	}

	/* Infinite loop */
	while (1)
	{
		debounceUpdate();
 80026f0:	f7fd ff80 	bl	80005f4 <debounceUpdate>
		uartReadMsg();
 80026f4:	f7fe f970 	bl	80009d8 <uartReadMsg>
		debounceUpdate();
 80026f8:	e7fa      	b.n	80026f0 <main+0x28>
	...

080026fc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8002704:	1d39      	adds	r1, r7, #4
 8002706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800270a:	2201      	movs	r2, #1
 800270c:	4803      	ldr	r0, [pc, #12]	; (800271c <__io_putchar+0x20>)
 800270e:	f7ff fc70 	bl	8001ff2 <HAL_UART_Transmit>


  return ch;
 8002712:	687b      	ldr	r3, [r7, #4]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000104 	.word	0x20000104

08002720 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b094      	sub	sp, #80	; 0x50
 8002724:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <SystemClock_Config+0xbc>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <SystemClock_Config+0xbc>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <SystemClock_Config+0xbc>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <SystemClock_Config+0xc0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a25      	ldr	r2, [pc, #148]	; (80027e0 <SystemClock_Config+0xc0>)
 800274c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <SystemClock_Config+0xc0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800275e:	2301      	movs	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002762:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002766:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002768:	2302      	movs	r3, #2
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800276c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002772:	2308      	movs	r3, #8
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002776:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800277c:	2302      	movs	r3, #2
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002780:	2307      	movs	r3, #7
 8002782:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe ff71 	bl	8001670 <HAL_RCC_OscConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002794:	f000 f826 	bl	80027e4 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002798:	f7fe ff1a 	bl	80015d0 <HAL_PWREx_EnableOverDrive>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 80027a2:	f000 f81f 	bl	80027e4 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80027a6:	230f      	movs	r3, #15
 80027a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027aa:	2302      	movs	r3, #2
 80027ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ae:	2300      	movs	r3, #0
 80027b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 80027b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80027b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027c2:	2105      	movs	r1, #5
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff f9cb 	bl	8001b60 <HAL_RCC_ClockConfig>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 80027d0:	f000 f808 	bl	80027e4 <Error_Handler>
  }
}
 80027d4:	bf00      	nop
 80027d6:	3750      	adds	r7, #80	; 0x50
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40007000 	.word	0x40007000

080027e4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80027e8:	2001      	movs	r0, #1
 80027ea:	f7fe f95f 	bl	8000aac <BSP_LED_On>
  while (1)
 80027ee:	e7fe      	b.n	80027ee <Error_Handler+0xa>

080027f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80027f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002828 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027f6:	e003      	b.n	8002800 <LoopCopyDataInit>

080027f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027fe:	3104      	adds	r1, #4

08002800 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002800:	480b      	ldr	r0, [pc, #44]	; (8002830 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002804:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002806:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002808:	d3f6      	bcc.n	80027f8 <CopyDataInit>
  ldr  r2, =_sbss
 800280a:	4a0b      	ldr	r2, [pc, #44]	; (8002838 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800280c:	e002      	b.n	8002814 <LoopFillZerobss>

0800280e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800280e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002810:	f842 3b04 	str.w	r3, [r2], #4

08002814 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002816:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002818:	d3f9      	bcc.n	800280e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800281a:	f7fe fa01 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281e:	f000 f817 	bl	8002850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002822:	f7ff ff51 	bl	80026c8 <main>
  bx  lr    
 8002826:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002828:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800282c:	0800394c 	.word	0x0800394c
  ldr  r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002834:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8002838:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 800283c:	2000015c 	.word	0x2000015c

08002840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002840:	e7fe      	b.n	8002840 <ADC_IRQHandler>
	...

08002844 <__errno>:
 8002844:	4b01      	ldr	r3, [pc, #4]	; (800284c <__errno+0x8>)
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	2000003c 	.word	0x2000003c

08002850 <__libc_init_array>:
 8002850:	b570      	push	{r4, r5, r6, lr}
 8002852:	4d0d      	ldr	r5, [pc, #52]	; (8002888 <__libc_init_array+0x38>)
 8002854:	4c0d      	ldr	r4, [pc, #52]	; (800288c <__libc_init_array+0x3c>)
 8002856:	1b64      	subs	r4, r4, r5
 8002858:	10a4      	asrs	r4, r4, #2
 800285a:	2600      	movs	r6, #0
 800285c:	42a6      	cmp	r6, r4
 800285e:	d109      	bne.n	8002874 <__libc_init_array+0x24>
 8002860:	4d0b      	ldr	r5, [pc, #44]	; (8002890 <__libc_init_array+0x40>)
 8002862:	4c0c      	ldr	r4, [pc, #48]	; (8002894 <__libc_init_array+0x44>)
 8002864:	f000 ff76 	bl	8003754 <_init>
 8002868:	1b64      	subs	r4, r4, r5
 800286a:	10a4      	asrs	r4, r4, #2
 800286c:	2600      	movs	r6, #0
 800286e:	42a6      	cmp	r6, r4
 8002870:	d105      	bne.n	800287e <__libc_init_array+0x2e>
 8002872:	bd70      	pop	{r4, r5, r6, pc}
 8002874:	f855 3b04 	ldr.w	r3, [r5], #4
 8002878:	4798      	blx	r3
 800287a:	3601      	adds	r6, #1
 800287c:	e7ee      	b.n	800285c <__libc_init_array+0xc>
 800287e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002882:	4798      	blx	r3
 8002884:	3601      	adds	r6, #1
 8002886:	e7f2      	b.n	800286e <__libc_init_array+0x1e>
 8002888:	08003944 	.word	0x08003944
 800288c:	08003944 	.word	0x08003944
 8002890:	08003944 	.word	0x08003944
 8002894:	08003948 	.word	0x08003948

08002898 <memset>:
 8002898:	4402      	add	r2, r0
 800289a:	4603      	mov	r3, r0
 800289c:	4293      	cmp	r3, r2
 800289e:	d100      	bne.n	80028a2 <memset+0xa>
 80028a0:	4770      	bx	lr
 80028a2:	f803 1b01 	strb.w	r1, [r3], #1
 80028a6:	e7f9      	b.n	800289c <memset+0x4>

080028a8 <iprintf>:
 80028a8:	b40f      	push	{r0, r1, r2, r3}
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <iprintf+0x2c>)
 80028ac:	b513      	push	{r0, r1, r4, lr}
 80028ae:	681c      	ldr	r4, [r3, #0]
 80028b0:	b124      	cbz	r4, 80028bc <iprintf+0x14>
 80028b2:	69a3      	ldr	r3, [r4, #24]
 80028b4:	b913      	cbnz	r3, 80028bc <iprintf+0x14>
 80028b6:	4620      	mov	r0, r4
 80028b8:	f000 f866 	bl	8002988 <__sinit>
 80028bc:	ab05      	add	r3, sp, #20
 80028be:	9a04      	ldr	r2, [sp, #16]
 80028c0:	68a1      	ldr	r1, [r4, #8]
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	4620      	mov	r0, r4
 80028c6:	f000 f983 	bl	8002bd0 <_vfiprintf_r>
 80028ca:	b002      	add	sp, #8
 80028cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028d0:	b004      	add	sp, #16
 80028d2:	4770      	bx	lr
 80028d4:	2000003c 	.word	0x2000003c

080028d8 <std>:
 80028d8:	2300      	movs	r3, #0
 80028da:	b510      	push	{r4, lr}
 80028dc:	4604      	mov	r4, r0
 80028de:	e9c0 3300 	strd	r3, r3, [r0]
 80028e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028e6:	6083      	str	r3, [r0, #8]
 80028e8:	8181      	strh	r1, [r0, #12]
 80028ea:	6643      	str	r3, [r0, #100]	; 0x64
 80028ec:	81c2      	strh	r2, [r0, #14]
 80028ee:	6183      	str	r3, [r0, #24]
 80028f0:	4619      	mov	r1, r3
 80028f2:	2208      	movs	r2, #8
 80028f4:	305c      	adds	r0, #92	; 0x5c
 80028f6:	f7ff ffcf 	bl	8002898 <memset>
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <std+0x38>)
 80028fc:	6263      	str	r3, [r4, #36]	; 0x24
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <std+0x3c>)
 8002900:	62a3      	str	r3, [r4, #40]	; 0x28
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <std+0x40>)
 8002904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <std+0x44>)
 8002908:	6224      	str	r4, [r4, #32]
 800290a:	6323      	str	r3, [r4, #48]	; 0x30
 800290c:	bd10      	pop	{r4, pc}
 800290e:	bf00      	nop
 8002910:	08003179 	.word	0x08003179
 8002914:	0800319b 	.word	0x0800319b
 8002918:	080031d3 	.word	0x080031d3
 800291c:	080031f7 	.word	0x080031f7

08002920 <_cleanup_r>:
 8002920:	4901      	ldr	r1, [pc, #4]	; (8002928 <_cleanup_r+0x8>)
 8002922:	f000 b8af 	b.w	8002a84 <_fwalk_reent>
 8002926:	bf00      	nop
 8002928:	080034d1 	.word	0x080034d1

0800292c <__sfmoreglue>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	1e4a      	subs	r2, r1, #1
 8002930:	2568      	movs	r5, #104	; 0x68
 8002932:	4355      	muls	r5, r2
 8002934:	460e      	mov	r6, r1
 8002936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800293a:	f000 f8c5 	bl	8002ac8 <_malloc_r>
 800293e:	4604      	mov	r4, r0
 8002940:	b140      	cbz	r0, 8002954 <__sfmoreglue+0x28>
 8002942:	2100      	movs	r1, #0
 8002944:	e9c0 1600 	strd	r1, r6, [r0]
 8002948:	300c      	adds	r0, #12
 800294a:	60a0      	str	r0, [r4, #8]
 800294c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002950:	f7ff ffa2 	bl	8002898 <memset>
 8002954:	4620      	mov	r0, r4
 8002956:	bd70      	pop	{r4, r5, r6, pc}

08002958 <__sfp_lock_acquire>:
 8002958:	4801      	ldr	r0, [pc, #4]	; (8002960 <__sfp_lock_acquire+0x8>)
 800295a:	f000 b8b3 	b.w	8002ac4 <__retarget_lock_acquire_recursive>
 800295e:	bf00      	nop
 8002960:	20000154 	.word	0x20000154

08002964 <__sfp_lock_release>:
 8002964:	4801      	ldr	r0, [pc, #4]	; (800296c <__sfp_lock_release+0x8>)
 8002966:	f000 b8ae 	b.w	8002ac6 <__retarget_lock_release_recursive>
 800296a:	bf00      	nop
 800296c:	20000154 	.word	0x20000154

08002970 <__sinit_lock_acquire>:
 8002970:	4801      	ldr	r0, [pc, #4]	; (8002978 <__sinit_lock_acquire+0x8>)
 8002972:	f000 b8a7 	b.w	8002ac4 <__retarget_lock_acquire_recursive>
 8002976:	bf00      	nop
 8002978:	2000014f 	.word	0x2000014f

0800297c <__sinit_lock_release>:
 800297c:	4801      	ldr	r0, [pc, #4]	; (8002984 <__sinit_lock_release+0x8>)
 800297e:	f000 b8a2 	b.w	8002ac6 <__retarget_lock_release_recursive>
 8002982:	bf00      	nop
 8002984:	2000014f 	.word	0x2000014f

08002988 <__sinit>:
 8002988:	b510      	push	{r4, lr}
 800298a:	4604      	mov	r4, r0
 800298c:	f7ff fff0 	bl	8002970 <__sinit_lock_acquire>
 8002990:	69a3      	ldr	r3, [r4, #24]
 8002992:	b11b      	cbz	r3, 800299c <__sinit+0x14>
 8002994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002998:	f7ff bff0 	b.w	800297c <__sinit_lock_release>
 800299c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80029a0:	6523      	str	r3, [r4, #80]	; 0x50
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <__sinit+0x68>)
 80029a4:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <__sinit+0x6c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80029aa:	42a3      	cmp	r3, r4
 80029ac:	bf04      	itt	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	61a3      	streq	r3, [r4, #24]
 80029b2:	4620      	mov	r0, r4
 80029b4:	f000 f820 	bl	80029f8 <__sfp>
 80029b8:	6060      	str	r0, [r4, #4]
 80029ba:	4620      	mov	r0, r4
 80029bc:	f000 f81c 	bl	80029f8 <__sfp>
 80029c0:	60a0      	str	r0, [r4, #8]
 80029c2:	4620      	mov	r0, r4
 80029c4:	f000 f818 	bl	80029f8 <__sfp>
 80029c8:	2200      	movs	r2, #0
 80029ca:	60e0      	str	r0, [r4, #12]
 80029cc:	2104      	movs	r1, #4
 80029ce:	6860      	ldr	r0, [r4, #4]
 80029d0:	f7ff ff82 	bl	80028d8 <std>
 80029d4:	68a0      	ldr	r0, [r4, #8]
 80029d6:	2201      	movs	r2, #1
 80029d8:	2109      	movs	r1, #9
 80029da:	f7ff ff7d 	bl	80028d8 <std>
 80029de:	68e0      	ldr	r0, [r4, #12]
 80029e0:	2202      	movs	r2, #2
 80029e2:	2112      	movs	r1, #18
 80029e4:	f7ff ff78 	bl	80028d8 <std>
 80029e8:	2301      	movs	r3, #1
 80029ea:	61a3      	str	r3, [r4, #24]
 80029ec:	e7d2      	b.n	8002994 <__sinit+0xc>
 80029ee:	bf00      	nop
 80029f0:	080038a4 	.word	0x080038a4
 80029f4:	08002921 	.word	0x08002921

080029f8 <__sfp>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	4607      	mov	r7, r0
 80029fc:	f7ff ffac 	bl	8002958 <__sfp_lock_acquire>
 8002a00:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <__sfp+0x84>)
 8002a02:	681e      	ldr	r6, [r3, #0]
 8002a04:	69b3      	ldr	r3, [r6, #24]
 8002a06:	b913      	cbnz	r3, 8002a0e <__sfp+0x16>
 8002a08:	4630      	mov	r0, r6
 8002a0a:	f7ff ffbd 	bl	8002988 <__sinit>
 8002a0e:	3648      	adds	r6, #72	; 0x48
 8002a10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	d503      	bpl.n	8002a20 <__sfp+0x28>
 8002a18:	6833      	ldr	r3, [r6, #0]
 8002a1a:	b30b      	cbz	r3, 8002a60 <__sfp+0x68>
 8002a1c:	6836      	ldr	r6, [r6, #0]
 8002a1e:	e7f7      	b.n	8002a10 <__sfp+0x18>
 8002a20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a24:	b9d5      	cbnz	r5, 8002a5c <__sfp+0x64>
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <__sfp+0x88>)
 8002a28:	60e3      	str	r3, [r4, #12]
 8002a2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a2e:	6665      	str	r5, [r4, #100]	; 0x64
 8002a30:	f000 f847 	bl	8002ac2 <__retarget_lock_init_recursive>
 8002a34:	f7ff ff96 	bl	8002964 <__sfp_lock_release>
 8002a38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002a3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002a40:	6025      	str	r5, [r4, #0]
 8002a42:	61a5      	str	r5, [r4, #24]
 8002a44:	2208      	movs	r2, #8
 8002a46:	4629      	mov	r1, r5
 8002a48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a4c:	f7ff ff24 	bl	8002898 <memset>
 8002a50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a58:	4620      	mov	r0, r4
 8002a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a5c:	3468      	adds	r4, #104	; 0x68
 8002a5e:	e7d9      	b.n	8002a14 <__sfp+0x1c>
 8002a60:	2104      	movs	r1, #4
 8002a62:	4638      	mov	r0, r7
 8002a64:	f7ff ff62 	bl	800292c <__sfmoreglue>
 8002a68:	4604      	mov	r4, r0
 8002a6a:	6030      	str	r0, [r6, #0]
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	d1d5      	bne.n	8002a1c <__sfp+0x24>
 8002a70:	f7ff ff78 	bl	8002964 <__sfp_lock_release>
 8002a74:	230c      	movs	r3, #12
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	e7ee      	b.n	8002a58 <__sfp+0x60>
 8002a7a:	bf00      	nop
 8002a7c:	080038a4 	.word	0x080038a4
 8002a80:	ffff0001 	.word	0xffff0001

08002a84 <_fwalk_reent>:
 8002a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a88:	4606      	mov	r6, r0
 8002a8a:	4688      	mov	r8, r1
 8002a8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a90:	2700      	movs	r7, #0
 8002a92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a96:	f1b9 0901 	subs.w	r9, r9, #1
 8002a9a:	d505      	bpl.n	8002aa8 <_fwalk_reent+0x24>
 8002a9c:	6824      	ldr	r4, [r4, #0]
 8002a9e:	2c00      	cmp	r4, #0
 8002aa0:	d1f7      	bne.n	8002a92 <_fwalk_reent+0xe>
 8002aa2:	4638      	mov	r0, r7
 8002aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aa8:	89ab      	ldrh	r3, [r5, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d907      	bls.n	8002abe <_fwalk_reent+0x3a>
 8002aae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	d003      	beq.n	8002abe <_fwalk_reent+0x3a>
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	4630      	mov	r0, r6
 8002aba:	47c0      	blx	r8
 8002abc:	4307      	orrs	r7, r0
 8002abe:	3568      	adds	r5, #104	; 0x68
 8002ac0:	e7e9      	b.n	8002a96 <_fwalk_reent+0x12>

08002ac2 <__retarget_lock_init_recursive>:
 8002ac2:	4770      	bx	lr

08002ac4 <__retarget_lock_acquire_recursive>:
 8002ac4:	4770      	bx	lr

08002ac6 <__retarget_lock_release_recursive>:
 8002ac6:	4770      	bx	lr

08002ac8 <_malloc_r>:
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	1ccd      	adds	r5, r1, #3
 8002acc:	f025 0503 	bic.w	r5, r5, #3
 8002ad0:	3508      	adds	r5, #8
 8002ad2:	2d0c      	cmp	r5, #12
 8002ad4:	bf38      	it	cc
 8002ad6:	250c      	movcc	r5, #12
 8002ad8:	2d00      	cmp	r5, #0
 8002ada:	4606      	mov	r6, r0
 8002adc:	db01      	blt.n	8002ae2 <_malloc_r+0x1a>
 8002ade:	42a9      	cmp	r1, r5
 8002ae0:	d903      	bls.n	8002aea <_malloc_r+0x22>
 8002ae2:	230c      	movs	r3, #12
 8002ae4:	6033      	str	r3, [r6, #0]
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aea:	f000 fda3 	bl	8003634 <__malloc_lock>
 8002aee:	4921      	ldr	r1, [pc, #132]	; (8002b74 <_malloc_r+0xac>)
 8002af0:	680a      	ldr	r2, [r1, #0]
 8002af2:	4614      	mov	r4, r2
 8002af4:	b99c      	cbnz	r4, 8002b1e <_malloc_r+0x56>
 8002af6:	4f20      	ldr	r7, [pc, #128]	; (8002b78 <_malloc_r+0xb0>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	b923      	cbnz	r3, 8002b06 <_malloc_r+0x3e>
 8002afc:	4621      	mov	r1, r4
 8002afe:	4630      	mov	r0, r6
 8002b00:	f000 fb2a 	bl	8003158 <_sbrk_r>
 8002b04:	6038      	str	r0, [r7, #0]
 8002b06:	4629      	mov	r1, r5
 8002b08:	4630      	mov	r0, r6
 8002b0a:	f000 fb25 	bl	8003158 <_sbrk_r>
 8002b0e:	1c43      	adds	r3, r0, #1
 8002b10:	d123      	bne.n	8002b5a <_malloc_r+0x92>
 8002b12:	230c      	movs	r3, #12
 8002b14:	6033      	str	r3, [r6, #0]
 8002b16:	4630      	mov	r0, r6
 8002b18:	f000 fd92 	bl	8003640 <__malloc_unlock>
 8002b1c:	e7e3      	b.n	8002ae6 <_malloc_r+0x1e>
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	1b5b      	subs	r3, r3, r5
 8002b22:	d417      	bmi.n	8002b54 <_malloc_r+0x8c>
 8002b24:	2b0b      	cmp	r3, #11
 8002b26:	d903      	bls.n	8002b30 <_malloc_r+0x68>
 8002b28:	6023      	str	r3, [r4, #0]
 8002b2a:	441c      	add	r4, r3
 8002b2c:	6025      	str	r5, [r4, #0]
 8002b2e:	e004      	b.n	8002b3a <_malloc_r+0x72>
 8002b30:	6863      	ldr	r3, [r4, #4]
 8002b32:	42a2      	cmp	r2, r4
 8002b34:	bf0c      	ite	eq
 8002b36:	600b      	streq	r3, [r1, #0]
 8002b38:	6053      	strne	r3, [r2, #4]
 8002b3a:	4630      	mov	r0, r6
 8002b3c:	f000 fd80 	bl	8003640 <__malloc_unlock>
 8002b40:	f104 000b 	add.w	r0, r4, #11
 8002b44:	1d23      	adds	r3, r4, #4
 8002b46:	f020 0007 	bic.w	r0, r0, #7
 8002b4a:	1ac2      	subs	r2, r0, r3
 8002b4c:	d0cc      	beq.n	8002ae8 <_malloc_r+0x20>
 8002b4e:	1a1b      	subs	r3, r3, r0
 8002b50:	50a3      	str	r3, [r4, r2]
 8002b52:	e7c9      	b.n	8002ae8 <_malloc_r+0x20>
 8002b54:	4622      	mov	r2, r4
 8002b56:	6864      	ldr	r4, [r4, #4]
 8002b58:	e7cc      	b.n	8002af4 <_malloc_r+0x2c>
 8002b5a:	1cc4      	adds	r4, r0, #3
 8002b5c:	f024 0403 	bic.w	r4, r4, #3
 8002b60:	42a0      	cmp	r0, r4
 8002b62:	d0e3      	beq.n	8002b2c <_malloc_r+0x64>
 8002b64:	1a21      	subs	r1, r4, r0
 8002b66:	4630      	mov	r0, r6
 8002b68:	f000 faf6 	bl	8003158 <_sbrk_r>
 8002b6c:	3001      	adds	r0, #1
 8002b6e:	d1dd      	bne.n	8002b2c <_malloc_r+0x64>
 8002b70:	e7cf      	b.n	8002b12 <_malloc_r+0x4a>
 8002b72:	bf00      	nop
 8002b74:	200000fc 	.word	0x200000fc
 8002b78:	20000100 	.word	0x20000100

08002b7c <__sfputc_r>:
 8002b7c:	6893      	ldr	r3, [r2, #8]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	b410      	push	{r4}
 8002b84:	6093      	str	r3, [r2, #8]
 8002b86:	da08      	bge.n	8002b9a <__sfputc_r+0x1e>
 8002b88:	6994      	ldr	r4, [r2, #24]
 8002b8a:	42a3      	cmp	r3, r4
 8002b8c:	db01      	blt.n	8002b92 <__sfputc_r+0x16>
 8002b8e:	290a      	cmp	r1, #10
 8002b90:	d103      	bne.n	8002b9a <__sfputc_r+0x1e>
 8002b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b96:	f000 bb33 	b.w	8003200 <__swbuf_r>
 8002b9a:	6813      	ldr	r3, [r2, #0]
 8002b9c:	1c58      	adds	r0, r3, #1
 8002b9e:	6010      	str	r0, [r2, #0]
 8002ba0:	7019      	strb	r1, [r3, #0]
 8002ba2:	4608      	mov	r0, r1
 8002ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <__sfputs_r>:
 8002baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bac:	4606      	mov	r6, r0
 8002bae:	460f      	mov	r7, r1
 8002bb0:	4614      	mov	r4, r2
 8002bb2:	18d5      	adds	r5, r2, r3
 8002bb4:	42ac      	cmp	r4, r5
 8002bb6:	d101      	bne.n	8002bbc <__sfputs_r+0x12>
 8002bb8:	2000      	movs	r0, #0
 8002bba:	e007      	b.n	8002bcc <__sfputs_r+0x22>
 8002bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bc0:	463a      	mov	r2, r7
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	f7ff ffda 	bl	8002b7c <__sfputc_r>
 8002bc8:	1c43      	adds	r3, r0, #1
 8002bca:	d1f3      	bne.n	8002bb4 <__sfputs_r+0xa>
 8002bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002bd0 <_vfiprintf_r>:
 8002bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd4:	460d      	mov	r5, r1
 8002bd6:	b09d      	sub	sp, #116	; 0x74
 8002bd8:	4614      	mov	r4, r2
 8002bda:	4698      	mov	r8, r3
 8002bdc:	4606      	mov	r6, r0
 8002bde:	b118      	cbz	r0, 8002be8 <_vfiprintf_r+0x18>
 8002be0:	6983      	ldr	r3, [r0, #24]
 8002be2:	b90b      	cbnz	r3, 8002be8 <_vfiprintf_r+0x18>
 8002be4:	f7ff fed0 	bl	8002988 <__sinit>
 8002be8:	4b89      	ldr	r3, [pc, #548]	; (8002e10 <_vfiprintf_r+0x240>)
 8002bea:	429d      	cmp	r5, r3
 8002bec:	d11b      	bne.n	8002c26 <_vfiprintf_r+0x56>
 8002bee:	6875      	ldr	r5, [r6, #4]
 8002bf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bf2:	07d9      	lsls	r1, r3, #31
 8002bf4:	d405      	bmi.n	8002c02 <_vfiprintf_r+0x32>
 8002bf6:	89ab      	ldrh	r3, [r5, #12]
 8002bf8:	059a      	lsls	r2, r3, #22
 8002bfa:	d402      	bmi.n	8002c02 <_vfiprintf_r+0x32>
 8002bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bfe:	f7ff ff61 	bl	8002ac4 <__retarget_lock_acquire_recursive>
 8002c02:	89ab      	ldrh	r3, [r5, #12]
 8002c04:	071b      	lsls	r3, r3, #28
 8002c06:	d501      	bpl.n	8002c0c <_vfiprintf_r+0x3c>
 8002c08:	692b      	ldr	r3, [r5, #16]
 8002c0a:	b9eb      	cbnz	r3, 8002c48 <_vfiprintf_r+0x78>
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	4630      	mov	r0, r6
 8002c10:	f000 fb5a 	bl	80032c8 <__swsetup_r>
 8002c14:	b1c0      	cbz	r0, 8002c48 <_vfiprintf_r+0x78>
 8002c16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c18:	07dc      	lsls	r4, r3, #31
 8002c1a:	d50e      	bpl.n	8002c3a <_vfiprintf_r+0x6a>
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	b01d      	add	sp, #116	; 0x74
 8002c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c26:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <_vfiprintf_r+0x244>)
 8002c28:	429d      	cmp	r5, r3
 8002c2a:	d101      	bne.n	8002c30 <_vfiprintf_r+0x60>
 8002c2c:	68b5      	ldr	r5, [r6, #8]
 8002c2e:	e7df      	b.n	8002bf0 <_vfiprintf_r+0x20>
 8002c30:	4b79      	ldr	r3, [pc, #484]	; (8002e18 <_vfiprintf_r+0x248>)
 8002c32:	429d      	cmp	r5, r3
 8002c34:	bf08      	it	eq
 8002c36:	68f5      	ldreq	r5, [r6, #12]
 8002c38:	e7da      	b.n	8002bf0 <_vfiprintf_r+0x20>
 8002c3a:	89ab      	ldrh	r3, [r5, #12]
 8002c3c:	0598      	lsls	r0, r3, #22
 8002c3e:	d4ed      	bmi.n	8002c1c <_vfiprintf_r+0x4c>
 8002c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c42:	f7ff ff40 	bl	8002ac6 <__retarget_lock_release_recursive>
 8002c46:	e7e9      	b.n	8002c1c <_vfiprintf_r+0x4c>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c56:	2330      	movs	r3, #48	; 0x30
 8002c58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002e1c <_vfiprintf_r+0x24c>
 8002c5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c60:	f04f 0901 	mov.w	r9, #1
 8002c64:	4623      	mov	r3, r4
 8002c66:	469a      	mov	sl, r3
 8002c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c6c:	b10a      	cbz	r2, 8002c72 <_vfiprintf_r+0xa2>
 8002c6e:	2a25      	cmp	r2, #37	; 0x25
 8002c70:	d1f9      	bne.n	8002c66 <_vfiprintf_r+0x96>
 8002c72:	ebba 0b04 	subs.w	fp, sl, r4
 8002c76:	d00b      	beq.n	8002c90 <_vfiprintf_r+0xc0>
 8002c78:	465b      	mov	r3, fp
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	4630      	mov	r0, r6
 8002c80:	f7ff ff93 	bl	8002baa <__sfputs_r>
 8002c84:	3001      	adds	r0, #1
 8002c86:	f000 80aa 	beq.w	8002dde <_vfiprintf_r+0x20e>
 8002c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c8c:	445a      	add	r2, fp
 8002c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8002c90:	f89a 3000 	ldrb.w	r3, [sl]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a2 	beq.w	8002dde <_vfiprintf_r+0x20e>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ca4:	f10a 0a01 	add.w	sl, sl, #1
 8002ca8:	9304      	str	r3, [sp, #16]
 8002caa:	9307      	str	r3, [sp, #28]
 8002cac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cb0:	931a      	str	r3, [sp, #104]	; 0x68
 8002cb2:	4654      	mov	r4, sl
 8002cb4:	2205      	movs	r2, #5
 8002cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cba:	4858      	ldr	r0, [pc, #352]	; (8002e1c <_vfiprintf_r+0x24c>)
 8002cbc:	f7fd fa98 	bl	80001f0 <memchr>
 8002cc0:	9a04      	ldr	r2, [sp, #16]
 8002cc2:	b9d8      	cbnz	r0, 8002cfc <_vfiprintf_r+0x12c>
 8002cc4:	06d1      	lsls	r1, r2, #27
 8002cc6:	bf44      	itt	mi
 8002cc8:	2320      	movmi	r3, #32
 8002cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cce:	0713      	lsls	r3, r2, #28
 8002cd0:	bf44      	itt	mi
 8002cd2:	232b      	movmi	r3, #43	; 0x2b
 8002cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8002cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8002cde:	d015      	beq.n	8002d0c <_vfiprintf_r+0x13c>
 8002ce0:	9a07      	ldr	r2, [sp, #28]
 8002ce2:	4654      	mov	r4, sl
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f04f 0c0a 	mov.w	ip, #10
 8002cea:	4621      	mov	r1, r4
 8002cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cf0:	3b30      	subs	r3, #48	; 0x30
 8002cf2:	2b09      	cmp	r3, #9
 8002cf4:	d94e      	bls.n	8002d94 <_vfiprintf_r+0x1c4>
 8002cf6:	b1b0      	cbz	r0, 8002d26 <_vfiprintf_r+0x156>
 8002cf8:	9207      	str	r2, [sp, #28]
 8002cfa:	e014      	b.n	8002d26 <_vfiprintf_r+0x156>
 8002cfc:	eba0 0308 	sub.w	r3, r0, r8
 8002d00:	fa09 f303 	lsl.w	r3, r9, r3
 8002d04:	4313      	orrs	r3, r2
 8002d06:	9304      	str	r3, [sp, #16]
 8002d08:	46a2      	mov	sl, r4
 8002d0a:	e7d2      	b.n	8002cb2 <_vfiprintf_r+0xe2>
 8002d0c:	9b03      	ldr	r3, [sp, #12]
 8002d0e:	1d19      	adds	r1, r3, #4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	9103      	str	r1, [sp, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bfbb      	ittet	lt
 8002d18:	425b      	neglt	r3, r3
 8002d1a:	f042 0202 	orrlt.w	r2, r2, #2
 8002d1e:	9307      	strge	r3, [sp, #28]
 8002d20:	9307      	strlt	r3, [sp, #28]
 8002d22:	bfb8      	it	lt
 8002d24:	9204      	strlt	r2, [sp, #16]
 8002d26:	7823      	ldrb	r3, [r4, #0]
 8002d28:	2b2e      	cmp	r3, #46	; 0x2e
 8002d2a:	d10c      	bne.n	8002d46 <_vfiprintf_r+0x176>
 8002d2c:	7863      	ldrb	r3, [r4, #1]
 8002d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d30:	d135      	bne.n	8002d9e <_vfiprintf_r+0x1ce>
 8002d32:	9b03      	ldr	r3, [sp, #12]
 8002d34:	1d1a      	adds	r2, r3, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	9203      	str	r2, [sp, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bfb8      	it	lt
 8002d3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d42:	3402      	adds	r4, #2
 8002d44:	9305      	str	r3, [sp, #20]
 8002d46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002e2c <_vfiprintf_r+0x25c>
 8002d4a:	7821      	ldrb	r1, [r4, #0]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	4650      	mov	r0, sl
 8002d50:	f7fd fa4e 	bl	80001f0 <memchr>
 8002d54:	b140      	cbz	r0, 8002d68 <_vfiprintf_r+0x198>
 8002d56:	2340      	movs	r3, #64	; 0x40
 8002d58:	eba0 000a 	sub.w	r0, r0, sl
 8002d5c:	fa03 f000 	lsl.w	r0, r3, r0
 8002d60:	9b04      	ldr	r3, [sp, #16]
 8002d62:	4303      	orrs	r3, r0
 8002d64:	3401      	adds	r4, #1
 8002d66:	9304      	str	r3, [sp, #16]
 8002d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d6c:	482c      	ldr	r0, [pc, #176]	; (8002e20 <_vfiprintf_r+0x250>)
 8002d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d72:	2206      	movs	r2, #6
 8002d74:	f7fd fa3c 	bl	80001f0 <memchr>
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	d03f      	beq.n	8002dfc <_vfiprintf_r+0x22c>
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <_vfiprintf_r+0x254>)
 8002d7e:	bb1b      	cbnz	r3, 8002dc8 <_vfiprintf_r+0x1f8>
 8002d80:	9b03      	ldr	r3, [sp, #12]
 8002d82:	3307      	adds	r3, #7
 8002d84:	f023 0307 	bic.w	r3, r3, #7
 8002d88:	3308      	adds	r3, #8
 8002d8a:	9303      	str	r3, [sp, #12]
 8002d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d8e:	443b      	add	r3, r7
 8002d90:	9309      	str	r3, [sp, #36]	; 0x24
 8002d92:	e767      	b.n	8002c64 <_vfiprintf_r+0x94>
 8002d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d98:	460c      	mov	r4, r1
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	e7a5      	b.n	8002cea <_vfiprintf_r+0x11a>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	3401      	adds	r4, #1
 8002da2:	9305      	str	r3, [sp, #20]
 8002da4:	4619      	mov	r1, r3
 8002da6:	f04f 0c0a 	mov.w	ip, #10
 8002daa:	4620      	mov	r0, r4
 8002dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002db0:	3a30      	subs	r2, #48	; 0x30
 8002db2:	2a09      	cmp	r2, #9
 8002db4:	d903      	bls.n	8002dbe <_vfiprintf_r+0x1ee>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0c5      	beq.n	8002d46 <_vfiprintf_r+0x176>
 8002dba:	9105      	str	r1, [sp, #20]
 8002dbc:	e7c3      	b.n	8002d46 <_vfiprintf_r+0x176>
 8002dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e7f0      	b.n	8002daa <_vfiprintf_r+0x1da>
 8002dc8:	ab03      	add	r3, sp, #12
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	462a      	mov	r2, r5
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <_vfiprintf_r+0x258>)
 8002dd0:	a904      	add	r1, sp, #16
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	f3af 8000 	nop.w
 8002dd8:	4607      	mov	r7, r0
 8002dda:	1c78      	adds	r0, r7, #1
 8002ddc:	d1d6      	bne.n	8002d8c <_vfiprintf_r+0x1bc>
 8002dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002de0:	07d9      	lsls	r1, r3, #31
 8002de2:	d405      	bmi.n	8002df0 <_vfiprintf_r+0x220>
 8002de4:	89ab      	ldrh	r3, [r5, #12]
 8002de6:	059a      	lsls	r2, r3, #22
 8002de8:	d402      	bmi.n	8002df0 <_vfiprintf_r+0x220>
 8002dea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dec:	f7ff fe6b 	bl	8002ac6 <__retarget_lock_release_recursive>
 8002df0:	89ab      	ldrh	r3, [r5, #12]
 8002df2:	065b      	lsls	r3, r3, #25
 8002df4:	f53f af12 	bmi.w	8002c1c <_vfiprintf_r+0x4c>
 8002df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dfa:	e711      	b.n	8002c20 <_vfiprintf_r+0x50>
 8002dfc:	ab03      	add	r3, sp, #12
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	462a      	mov	r2, r5
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <_vfiprintf_r+0x258>)
 8002e04:	a904      	add	r1, sp, #16
 8002e06:	4630      	mov	r0, r6
 8002e08:	f000 f880 	bl	8002f0c <_printf_i>
 8002e0c:	e7e4      	b.n	8002dd8 <_vfiprintf_r+0x208>
 8002e0e:	bf00      	nop
 8002e10:	080038c8 	.word	0x080038c8
 8002e14:	080038e8 	.word	0x080038e8
 8002e18:	080038a8 	.word	0x080038a8
 8002e1c:	08003908 	.word	0x08003908
 8002e20:	08003912 	.word	0x08003912
 8002e24:	00000000 	.word	0x00000000
 8002e28:	08002bab 	.word	0x08002bab
 8002e2c:	0800390e 	.word	0x0800390e

08002e30 <_printf_common>:
 8002e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e34:	4616      	mov	r6, r2
 8002e36:	4699      	mov	r9, r3
 8002e38:	688a      	ldr	r2, [r1, #8]
 8002e3a:	690b      	ldr	r3, [r1, #16]
 8002e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e40:	4293      	cmp	r3, r2
 8002e42:	bfb8      	it	lt
 8002e44:	4613      	movlt	r3, r2
 8002e46:	6033      	str	r3, [r6, #0]
 8002e48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e4c:	4607      	mov	r7, r0
 8002e4e:	460c      	mov	r4, r1
 8002e50:	b10a      	cbz	r2, 8002e56 <_printf_common+0x26>
 8002e52:	3301      	adds	r3, #1
 8002e54:	6033      	str	r3, [r6, #0]
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	0699      	lsls	r1, r3, #26
 8002e5a:	bf42      	ittt	mi
 8002e5c:	6833      	ldrmi	r3, [r6, #0]
 8002e5e:	3302      	addmi	r3, #2
 8002e60:	6033      	strmi	r3, [r6, #0]
 8002e62:	6825      	ldr	r5, [r4, #0]
 8002e64:	f015 0506 	ands.w	r5, r5, #6
 8002e68:	d106      	bne.n	8002e78 <_printf_common+0x48>
 8002e6a:	f104 0a19 	add.w	sl, r4, #25
 8002e6e:	68e3      	ldr	r3, [r4, #12]
 8002e70:	6832      	ldr	r2, [r6, #0]
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	42ab      	cmp	r3, r5
 8002e76:	dc26      	bgt.n	8002ec6 <_printf_common+0x96>
 8002e78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e7c:	1e13      	subs	r3, r2, #0
 8002e7e:	6822      	ldr	r2, [r4, #0]
 8002e80:	bf18      	it	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	0692      	lsls	r2, r2, #26
 8002e86:	d42b      	bmi.n	8002ee0 <_printf_common+0xb0>
 8002e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	4638      	mov	r0, r7
 8002e90:	47c0      	blx	r8
 8002e92:	3001      	adds	r0, #1
 8002e94:	d01e      	beq.n	8002ed4 <_printf_common+0xa4>
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	68e5      	ldr	r5, [r4, #12]
 8002e9a:	6832      	ldr	r2, [r6, #0]
 8002e9c:	f003 0306 	and.w	r3, r3, #6
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	bf08      	it	eq
 8002ea4:	1aad      	subeq	r5, r5, r2
 8002ea6:	68a3      	ldr	r3, [r4, #8]
 8002ea8:	6922      	ldr	r2, [r4, #16]
 8002eaa:	bf0c      	ite	eq
 8002eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002eb0:	2500      	movne	r5, #0
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	bfc4      	itt	gt
 8002eb6:	1a9b      	subgt	r3, r3, r2
 8002eb8:	18ed      	addgt	r5, r5, r3
 8002eba:	2600      	movs	r6, #0
 8002ebc:	341a      	adds	r4, #26
 8002ebe:	42b5      	cmp	r5, r6
 8002ec0:	d11a      	bne.n	8002ef8 <_printf_common+0xc8>
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	e008      	b.n	8002ed8 <_printf_common+0xa8>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	4652      	mov	r2, sl
 8002eca:	4649      	mov	r1, r9
 8002ecc:	4638      	mov	r0, r7
 8002ece:	47c0      	blx	r8
 8002ed0:	3001      	adds	r0, #1
 8002ed2:	d103      	bne.n	8002edc <_printf_common+0xac>
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002edc:	3501      	adds	r5, #1
 8002ede:	e7c6      	b.n	8002e6e <_printf_common+0x3e>
 8002ee0:	18e1      	adds	r1, r4, r3
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	2030      	movs	r0, #48	; 0x30
 8002ee6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002eea:	4422      	add	r2, r4
 8002eec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ef0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	e7c7      	b.n	8002e88 <_printf_common+0x58>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	4622      	mov	r2, r4
 8002efc:	4649      	mov	r1, r9
 8002efe:	4638      	mov	r0, r7
 8002f00:	47c0      	blx	r8
 8002f02:	3001      	adds	r0, #1
 8002f04:	d0e6      	beq.n	8002ed4 <_printf_common+0xa4>
 8002f06:	3601      	adds	r6, #1
 8002f08:	e7d9      	b.n	8002ebe <_printf_common+0x8e>
	...

08002f0c <_printf_i>:
 8002f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f10:	460c      	mov	r4, r1
 8002f12:	4691      	mov	r9, r2
 8002f14:	7e27      	ldrb	r7, [r4, #24]
 8002f16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f18:	2f78      	cmp	r7, #120	; 0x78
 8002f1a:	4680      	mov	r8, r0
 8002f1c:	469a      	mov	sl, r3
 8002f1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f22:	d807      	bhi.n	8002f34 <_printf_i+0x28>
 8002f24:	2f62      	cmp	r7, #98	; 0x62
 8002f26:	d80a      	bhi.n	8002f3e <_printf_i+0x32>
 8002f28:	2f00      	cmp	r7, #0
 8002f2a:	f000 80d8 	beq.w	80030de <_printf_i+0x1d2>
 8002f2e:	2f58      	cmp	r7, #88	; 0x58
 8002f30:	f000 80a3 	beq.w	800307a <_printf_i+0x16e>
 8002f34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f3c:	e03a      	b.n	8002fb4 <_printf_i+0xa8>
 8002f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f42:	2b15      	cmp	r3, #21
 8002f44:	d8f6      	bhi.n	8002f34 <_printf_i+0x28>
 8002f46:	a001      	add	r0, pc, #4	; (adr r0, 8002f4c <_printf_i+0x40>)
 8002f48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f4c:	08002fa5 	.word	0x08002fa5
 8002f50:	08002fb9 	.word	0x08002fb9
 8002f54:	08002f35 	.word	0x08002f35
 8002f58:	08002f35 	.word	0x08002f35
 8002f5c:	08002f35 	.word	0x08002f35
 8002f60:	08002f35 	.word	0x08002f35
 8002f64:	08002fb9 	.word	0x08002fb9
 8002f68:	08002f35 	.word	0x08002f35
 8002f6c:	08002f35 	.word	0x08002f35
 8002f70:	08002f35 	.word	0x08002f35
 8002f74:	08002f35 	.word	0x08002f35
 8002f78:	080030c5 	.word	0x080030c5
 8002f7c:	08002fe9 	.word	0x08002fe9
 8002f80:	080030a7 	.word	0x080030a7
 8002f84:	08002f35 	.word	0x08002f35
 8002f88:	08002f35 	.word	0x08002f35
 8002f8c:	080030e7 	.word	0x080030e7
 8002f90:	08002f35 	.word	0x08002f35
 8002f94:	08002fe9 	.word	0x08002fe9
 8002f98:	08002f35 	.word	0x08002f35
 8002f9c:	08002f35 	.word	0x08002f35
 8002fa0:	080030af 	.word	0x080030af
 8002fa4:	680b      	ldr	r3, [r1, #0]
 8002fa6:	1d1a      	adds	r2, r3, #4
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	600a      	str	r2, [r1, #0]
 8002fac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0a3      	b.n	8003100 <_printf_i+0x1f4>
 8002fb8:	6825      	ldr	r5, [r4, #0]
 8002fba:	6808      	ldr	r0, [r1, #0]
 8002fbc:	062e      	lsls	r6, r5, #24
 8002fbe:	f100 0304 	add.w	r3, r0, #4
 8002fc2:	d50a      	bpl.n	8002fda <_printf_i+0xce>
 8002fc4:	6805      	ldr	r5, [r0, #0]
 8002fc6:	600b      	str	r3, [r1, #0]
 8002fc8:	2d00      	cmp	r5, #0
 8002fca:	da03      	bge.n	8002fd4 <_printf_i+0xc8>
 8002fcc:	232d      	movs	r3, #45	; 0x2d
 8002fce:	426d      	negs	r5, r5
 8002fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fd4:	485e      	ldr	r0, [pc, #376]	; (8003150 <_printf_i+0x244>)
 8002fd6:	230a      	movs	r3, #10
 8002fd8:	e019      	b.n	800300e <_printf_i+0x102>
 8002fda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002fde:	6805      	ldr	r5, [r0, #0]
 8002fe0:	600b      	str	r3, [r1, #0]
 8002fe2:	bf18      	it	ne
 8002fe4:	b22d      	sxthne	r5, r5
 8002fe6:	e7ef      	b.n	8002fc8 <_printf_i+0xbc>
 8002fe8:	680b      	ldr	r3, [r1, #0]
 8002fea:	6825      	ldr	r5, [r4, #0]
 8002fec:	1d18      	adds	r0, r3, #4
 8002fee:	6008      	str	r0, [r1, #0]
 8002ff0:	0628      	lsls	r0, r5, #24
 8002ff2:	d501      	bpl.n	8002ff8 <_printf_i+0xec>
 8002ff4:	681d      	ldr	r5, [r3, #0]
 8002ff6:	e002      	b.n	8002ffe <_printf_i+0xf2>
 8002ff8:	0669      	lsls	r1, r5, #25
 8002ffa:	d5fb      	bpl.n	8002ff4 <_printf_i+0xe8>
 8002ffc:	881d      	ldrh	r5, [r3, #0]
 8002ffe:	4854      	ldr	r0, [pc, #336]	; (8003150 <_printf_i+0x244>)
 8003000:	2f6f      	cmp	r7, #111	; 0x6f
 8003002:	bf0c      	ite	eq
 8003004:	2308      	moveq	r3, #8
 8003006:	230a      	movne	r3, #10
 8003008:	2100      	movs	r1, #0
 800300a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800300e:	6866      	ldr	r6, [r4, #4]
 8003010:	60a6      	str	r6, [r4, #8]
 8003012:	2e00      	cmp	r6, #0
 8003014:	bfa2      	ittt	ge
 8003016:	6821      	ldrge	r1, [r4, #0]
 8003018:	f021 0104 	bicge.w	r1, r1, #4
 800301c:	6021      	strge	r1, [r4, #0]
 800301e:	b90d      	cbnz	r5, 8003024 <_printf_i+0x118>
 8003020:	2e00      	cmp	r6, #0
 8003022:	d04d      	beq.n	80030c0 <_printf_i+0x1b4>
 8003024:	4616      	mov	r6, r2
 8003026:	fbb5 f1f3 	udiv	r1, r5, r3
 800302a:	fb03 5711 	mls	r7, r3, r1, r5
 800302e:	5dc7      	ldrb	r7, [r0, r7]
 8003030:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003034:	462f      	mov	r7, r5
 8003036:	42bb      	cmp	r3, r7
 8003038:	460d      	mov	r5, r1
 800303a:	d9f4      	bls.n	8003026 <_printf_i+0x11a>
 800303c:	2b08      	cmp	r3, #8
 800303e:	d10b      	bne.n	8003058 <_printf_i+0x14c>
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	07df      	lsls	r7, r3, #31
 8003044:	d508      	bpl.n	8003058 <_printf_i+0x14c>
 8003046:	6923      	ldr	r3, [r4, #16]
 8003048:	6861      	ldr	r1, [r4, #4]
 800304a:	4299      	cmp	r1, r3
 800304c:	bfde      	ittt	le
 800304e:	2330      	movle	r3, #48	; 0x30
 8003050:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003054:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003058:	1b92      	subs	r2, r2, r6
 800305a:	6122      	str	r2, [r4, #16]
 800305c:	f8cd a000 	str.w	sl, [sp]
 8003060:	464b      	mov	r3, r9
 8003062:	aa03      	add	r2, sp, #12
 8003064:	4621      	mov	r1, r4
 8003066:	4640      	mov	r0, r8
 8003068:	f7ff fee2 	bl	8002e30 <_printf_common>
 800306c:	3001      	adds	r0, #1
 800306e:	d14c      	bne.n	800310a <_printf_i+0x1fe>
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	b004      	add	sp, #16
 8003076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800307a:	4835      	ldr	r0, [pc, #212]	; (8003150 <_printf_i+0x244>)
 800307c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	680e      	ldr	r6, [r1, #0]
 8003084:	061f      	lsls	r7, r3, #24
 8003086:	f856 5b04 	ldr.w	r5, [r6], #4
 800308a:	600e      	str	r6, [r1, #0]
 800308c:	d514      	bpl.n	80030b8 <_printf_i+0x1ac>
 800308e:	07d9      	lsls	r1, r3, #31
 8003090:	bf44      	itt	mi
 8003092:	f043 0320 	orrmi.w	r3, r3, #32
 8003096:	6023      	strmi	r3, [r4, #0]
 8003098:	b91d      	cbnz	r5, 80030a2 <_printf_i+0x196>
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	f023 0320 	bic.w	r3, r3, #32
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	2310      	movs	r3, #16
 80030a4:	e7b0      	b.n	8003008 <_printf_i+0xfc>
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	f043 0320 	orr.w	r3, r3, #32
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	2378      	movs	r3, #120	; 0x78
 80030b0:	4828      	ldr	r0, [pc, #160]	; (8003154 <_printf_i+0x248>)
 80030b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030b6:	e7e3      	b.n	8003080 <_printf_i+0x174>
 80030b8:	065e      	lsls	r6, r3, #25
 80030ba:	bf48      	it	mi
 80030bc:	b2ad      	uxthmi	r5, r5
 80030be:	e7e6      	b.n	800308e <_printf_i+0x182>
 80030c0:	4616      	mov	r6, r2
 80030c2:	e7bb      	b.n	800303c <_printf_i+0x130>
 80030c4:	680b      	ldr	r3, [r1, #0]
 80030c6:	6826      	ldr	r6, [r4, #0]
 80030c8:	6960      	ldr	r0, [r4, #20]
 80030ca:	1d1d      	adds	r5, r3, #4
 80030cc:	600d      	str	r5, [r1, #0]
 80030ce:	0635      	lsls	r5, r6, #24
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	d501      	bpl.n	80030d8 <_printf_i+0x1cc>
 80030d4:	6018      	str	r0, [r3, #0]
 80030d6:	e002      	b.n	80030de <_printf_i+0x1d2>
 80030d8:	0671      	lsls	r1, r6, #25
 80030da:	d5fb      	bpl.n	80030d4 <_printf_i+0x1c8>
 80030dc:	8018      	strh	r0, [r3, #0]
 80030de:	2300      	movs	r3, #0
 80030e0:	6123      	str	r3, [r4, #16]
 80030e2:	4616      	mov	r6, r2
 80030e4:	e7ba      	b.n	800305c <_printf_i+0x150>
 80030e6:	680b      	ldr	r3, [r1, #0]
 80030e8:	1d1a      	adds	r2, r3, #4
 80030ea:	600a      	str	r2, [r1, #0]
 80030ec:	681e      	ldr	r6, [r3, #0]
 80030ee:	6862      	ldr	r2, [r4, #4]
 80030f0:	2100      	movs	r1, #0
 80030f2:	4630      	mov	r0, r6
 80030f4:	f7fd f87c 	bl	80001f0 <memchr>
 80030f8:	b108      	cbz	r0, 80030fe <_printf_i+0x1f2>
 80030fa:	1b80      	subs	r0, r0, r6
 80030fc:	6060      	str	r0, [r4, #4]
 80030fe:	6863      	ldr	r3, [r4, #4]
 8003100:	6123      	str	r3, [r4, #16]
 8003102:	2300      	movs	r3, #0
 8003104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003108:	e7a8      	b.n	800305c <_printf_i+0x150>
 800310a:	6923      	ldr	r3, [r4, #16]
 800310c:	4632      	mov	r2, r6
 800310e:	4649      	mov	r1, r9
 8003110:	4640      	mov	r0, r8
 8003112:	47d0      	blx	sl
 8003114:	3001      	adds	r0, #1
 8003116:	d0ab      	beq.n	8003070 <_printf_i+0x164>
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	079b      	lsls	r3, r3, #30
 800311c:	d413      	bmi.n	8003146 <_printf_i+0x23a>
 800311e:	68e0      	ldr	r0, [r4, #12]
 8003120:	9b03      	ldr	r3, [sp, #12]
 8003122:	4298      	cmp	r0, r3
 8003124:	bfb8      	it	lt
 8003126:	4618      	movlt	r0, r3
 8003128:	e7a4      	b.n	8003074 <_printf_i+0x168>
 800312a:	2301      	movs	r3, #1
 800312c:	4632      	mov	r2, r6
 800312e:	4649      	mov	r1, r9
 8003130:	4640      	mov	r0, r8
 8003132:	47d0      	blx	sl
 8003134:	3001      	adds	r0, #1
 8003136:	d09b      	beq.n	8003070 <_printf_i+0x164>
 8003138:	3501      	adds	r5, #1
 800313a:	68e3      	ldr	r3, [r4, #12]
 800313c:	9903      	ldr	r1, [sp, #12]
 800313e:	1a5b      	subs	r3, r3, r1
 8003140:	42ab      	cmp	r3, r5
 8003142:	dcf2      	bgt.n	800312a <_printf_i+0x21e>
 8003144:	e7eb      	b.n	800311e <_printf_i+0x212>
 8003146:	2500      	movs	r5, #0
 8003148:	f104 0619 	add.w	r6, r4, #25
 800314c:	e7f5      	b.n	800313a <_printf_i+0x22e>
 800314e:	bf00      	nop
 8003150:	08003919 	.word	0x08003919
 8003154:	0800392a 	.word	0x0800392a

08003158 <_sbrk_r>:
 8003158:	b538      	push	{r3, r4, r5, lr}
 800315a:	4d06      	ldr	r5, [pc, #24]	; (8003174 <_sbrk_r+0x1c>)
 800315c:	2300      	movs	r3, #0
 800315e:	4604      	mov	r4, r0
 8003160:	4608      	mov	r0, r1
 8003162:	602b      	str	r3, [r5, #0]
 8003164:	f7fd fe2e 	bl	8000dc4 <_sbrk>
 8003168:	1c43      	adds	r3, r0, #1
 800316a:	d102      	bne.n	8003172 <_sbrk_r+0x1a>
 800316c:	682b      	ldr	r3, [r5, #0]
 800316e:	b103      	cbz	r3, 8003172 <_sbrk_r+0x1a>
 8003170:	6023      	str	r3, [r4, #0]
 8003172:	bd38      	pop	{r3, r4, r5, pc}
 8003174:	20000158 	.word	0x20000158

08003178 <__sread>:
 8003178:	b510      	push	{r4, lr}
 800317a:	460c      	mov	r4, r1
 800317c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003180:	f000 fab4 	bl	80036ec <_read_r>
 8003184:	2800      	cmp	r0, #0
 8003186:	bfab      	itete	ge
 8003188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800318a:	89a3      	ldrhlt	r3, [r4, #12]
 800318c:	181b      	addge	r3, r3, r0
 800318e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003192:	bfac      	ite	ge
 8003194:	6563      	strge	r3, [r4, #84]	; 0x54
 8003196:	81a3      	strhlt	r3, [r4, #12]
 8003198:	bd10      	pop	{r4, pc}

0800319a <__swrite>:
 800319a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800319e:	461f      	mov	r7, r3
 80031a0:	898b      	ldrh	r3, [r1, #12]
 80031a2:	05db      	lsls	r3, r3, #23
 80031a4:	4605      	mov	r5, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	4616      	mov	r6, r2
 80031aa:	d505      	bpl.n	80031b8 <__swrite+0x1e>
 80031ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b0:	2302      	movs	r3, #2
 80031b2:	2200      	movs	r2, #0
 80031b4:	f000 f9c8 	bl	8003548 <_lseek_r>
 80031b8:	89a3      	ldrh	r3, [r4, #12]
 80031ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031c2:	81a3      	strh	r3, [r4, #12]
 80031c4:	4632      	mov	r2, r6
 80031c6:	463b      	mov	r3, r7
 80031c8:	4628      	mov	r0, r5
 80031ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031ce:	f000 b869 	b.w	80032a4 <_write_r>

080031d2 <__sseek>:
 80031d2:	b510      	push	{r4, lr}
 80031d4:	460c      	mov	r4, r1
 80031d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031da:	f000 f9b5 	bl	8003548 <_lseek_r>
 80031de:	1c43      	adds	r3, r0, #1
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	bf15      	itete	ne
 80031e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80031e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80031ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031ee:	81a3      	strheq	r3, [r4, #12]
 80031f0:	bf18      	it	ne
 80031f2:	81a3      	strhne	r3, [r4, #12]
 80031f4:	bd10      	pop	{r4, pc}

080031f6 <__sclose>:
 80031f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031fa:	f000 b8d3 	b.w	80033a4 <_close_r>
	...

08003200 <__swbuf_r>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	460e      	mov	r6, r1
 8003204:	4614      	mov	r4, r2
 8003206:	4605      	mov	r5, r0
 8003208:	b118      	cbz	r0, 8003212 <__swbuf_r+0x12>
 800320a:	6983      	ldr	r3, [r0, #24]
 800320c:	b90b      	cbnz	r3, 8003212 <__swbuf_r+0x12>
 800320e:	f7ff fbbb 	bl	8002988 <__sinit>
 8003212:	4b21      	ldr	r3, [pc, #132]	; (8003298 <__swbuf_r+0x98>)
 8003214:	429c      	cmp	r4, r3
 8003216:	d12b      	bne.n	8003270 <__swbuf_r+0x70>
 8003218:	686c      	ldr	r4, [r5, #4]
 800321a:	69a3      	ldr	r3, [r4, #24]
 800321c:	60a3      	str	r3, [r4, #8]
 800321e:	89a3      	ldrh	r3, [r4, #12]
 8003220:	071a      	lsls	r2, r3, #28
 8003222:	d52f      	bpl.n	8003284 <__swbuf_r+0x84>
 8003224:	6923      	ldr	r3, [r4, #16]
 8003226:	b36b      	cbz	r3, 8003284 <__swbuf_r+0x84>
 8003228:	6923      	ldr	r3, [r4, #16]
 800322a:	6820      	ldr	r0, [r4, #0]
 800322c:	1ac0      	subs	r0, r0, r3
 800322e:	6963      	ldr	r3, [r4, #20]
 8003230:	b2f6      	uxtb	r6, r6
 8003232:	4283      	cmp	r3, r0
 8003234:	4637      	mov	r7, r6
 8003236:	dc04      	bgt.n	8003242 <__swbuf_r+0x42>
 8003238:	4621      	mov	r1, r4
 800323a:	4628      	mov	r0, r5
 800323c:	f000 f948 	bl	80034d0 <_fflush_r>
 8003240:	bb30      	cbnz	r0, 8003290 <__swbuf_r+0x90>
 8003242:	68a3      	ldr	r3, [r4, #8]
 8003244:	3b01      	subs	r3, #1
 8003246:	60a3      	str	r3, [r4, #8]
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	6022      	str	r2, [r4, #0]
 800324e:	701e      	strb	r6, [r3, #0]
 8003250:	6963      	ldr	r3, [r4, #20]
 8003252:	3001      	adds	r0, #1
 8003254:	4283      	cmp	r3, r0
 8003256:	d004      	beq.n	8003262 <__swbuf_r+0x62>
 8003258:	89a3      	ldrh	r3, [r4, #12]
 800325a:	07db      	lsls	r3, r3, #31
 800325c:	d506      	bpl.n	800326c <__swbuf_r+0x6c>
 800325e:	2e0a      	cmp	r6, #10
 8003260:	d104      	bne.n	800326c <__swbuf_r+0x6c>
 8003262:	4621      	mov	r1, r4
 8003264:	4628      	mov	r0, r5
 8003266:	f000 f933 	bl	80034d0 <_fflush_r>
 800326a:	b988      	cbnz	r0, 8003290 <__swbuf_r+0x90>
 800326c:	4638      	mov	r0, r7
 800326e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <__swbuf_r+0x9c>)
 8003272:	429c      	cmp	r4, r3
 8003274:	d101      	bne.n	800327a <__swbuf_r+0x7a>
 8003276:	68ac      	ldr	r4, [r5, #8]
 8003278:	e7cf      	b.n	800321a <__swbuf_r+0x1a>
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <__swbuf_r+0xa0>)
 800327c:	429c      	cmp	r4, r3
 800327e:	bf08      	it	eq
 8003280:	68ec      	ldreq	r4, [r5, #12]
 8003282:	e7ca      	b.n	800321a <__swbuf_r+0x1a>
 8003284:	4621      	mov	r1, r4
 8003286:	4628      	mov	r0, r5
 8003288:	f000 f81e 	bl	80032c8 <__swsetup_r>
 800328c:	2800      	cmp	r0, #0
 800328e:	d0cb      	beq.n	8003228 <__swbuf_r+0x28>
 8003290:	f04f 37ff 	mov.w	r7, #4294967295
 8003294:	e7ea      	b.n	800326c <__swbuf_r+0x6c>
 8003296:	bf00      	nop
 8003298:	080038c8 	.word	0x080038c8
 800329c:	080038e8 	.word	0x080038e8
 80032a0:	080038a8 	.word	0x080038a8

080032a4 <_write_r>:
 80032a4:	b538      	push	{r3, r4, r5, lr}
 80032a6:	4d07      	ldr	r5, [pc, #28]	; (80032c4 <_write_r+0x20>)
 80032a8:	4604      	mov	r4, r0
 80032aa:	4608      	mov	r0, r1
 80032ac:	4611      	mov	r1, r2
 80032ae:	2200      	movs	r2, #0
 80032b0:	602a      	str	r2, [r5, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f7fd fd35 	bl	8000d22 <_write>
 80032b8:	1c43      	adds	r3, r0, #1
 80032ba:	d102      	bne.n	80032c2 <_write_r+0x1e>
 80032bc:	682b      	ldr	r3, [r5, #0]
 80032be:	b103      	cbz	r3, 80032c2 <_write_r+0x1e>
 80032c0:	6023      	str	r3, [r4, #0]
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
 80032c4:	20000158 	.word	0x20000158

080032c8 <__swsetup_r>:
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <__swsetup_r+0xcc>)
 80032ca:	b570      	push	{r4, r5, r6, lr}
 80032cc:	681d      	ldr	r5, [r3, #0]
 80032ce:	4606      	mov	r6, r0
 80032d0:	460c      	mov	r4, r1
 80032d2:	b125      	cbz	r5, 80032de <__swsetup_r+0x16>
 80032d4:	69ab      	ldr	r3, [r5, #24]
 80032d6:	b913      	cbnz	r3, 80032de <__swsetup_r+0x16>
 80032d8:	4628      	mov	r0, r5
 80032da:	f7ff fb55 	bl	8002988 <__sinit>
 80032de:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <__swsetup_r+0xd0>)
 80032e0:	429c      	cmp	r4, r3
 80032e2:	d10f      	bne.n	8003304 <__swsetup_r+0x3c>
 80032e4:	686c      	ldr	r4, [r5, #4]
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032ec:	0719      	lsls	r1, r3, #28
 80032ee:	d42c      	bmi.n	800334a <__swsetup_r+0x82>
 80032f0:	06dd      	lsls	r5, r3, #27
 80032f2:	d411      	bmi.n	8003318 <__swsetup_r+0x50>
 80032f4:	2309      	movs	r3, #9
 80032f6:	6033      	str	r3, [r6, #0]
 80032f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032fc:	81a3      	strh	r3, [r4, #12]
 80032fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003302:	e03e      	b.n	8003382 <__swsetup_r+0xba>
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <__swsetup_r+0xd4>)
 8003306:	429c      	cmp	r4, r3
 8003308:	d101      	bne.n	800330e <__swsetup_r+0x46>
 800330a:	68ac      	ldr	r4, [r5, #8]
 800330c:	e7eb      	b.n	80032e6 <__swsetup_r+0x1e>
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <__swsetup_r+0xd8>)
 8003310:	429c      	cmp	r4, r3
 8003312:	bf08      	it	eq
 8003314:	68ec      	ldreq	r4, [r5, #12]
 8003316:	e7e6      	b.n	80032e6 <__swsetup_r+0x1e>
 8003318:	0758      	lsls	r0, r3, #29
 800331a:	d512      	bpl.n	8003342 <__swsetup_r+0x7a>
 800331c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800331e:	b141      	cbz	r1, 8003332 <__swsetup_r+0x6a>
 8003320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003324:	4299      	cmp	r1, r3
 8003326:	d002      	beq.n	800332e <__swsetup_r+0x66>
 8003328:	4630      	mov	r0, r6
 800332a:	f000 f98f 	bl	800364c <_free_r>
 800332e:	2300      	movs	r3, #0
 8003330:	6363      	str	r3, [r4, #52]	; 0x34
 8003332:	89a3      	ldrh	r3, [r4, #12]
 8003334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003338:	81a3      	strh	r3, [r4, #12]
 800333a:	2300      	movs	r3, #0
 800333c:	6063      	str	r3, [r4, #4]
 800333e:	6923      	ldr	r3, [r4, #16]
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	89a3      	ldrh	r3, [r4, #12]
 8003344:	f043 0308 	orr.w	r3, r3, #8
 8003348:	81a3      	strh	r3, [r4, #12]
 800334a:	6923      	ldr	r3, [r4, #16]
 800334c:	b94b      	cbnz	r3, 8003362 <__swsetup_r+0x9a>
 800334e:	89a3      	ldrh	r3, [r4, #12]
 8003350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003358:	d003      	beq.n	8003362 <__swsetup_r+0x9a>
 800335a:	4621      	mov	r1, r4
 800335c:	4630      	mov	r0, r6
 800335e:	f000 f929 	bl	80035b4 <__smakebuf_r>
 8003362:	89a0      	ldrh	r0, [r4, #12]
 8003364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003368:	f010 0301 	ands.w	r3, r0, #1
 800336c:	d00a      	beq.n	8003384 <__swsetup_r+0xbc>
 800336e:	2300      	movs	r3, #0
 8003370:	60a3      	str	r3, [r4, #8]
 8003372:	6963      	ldr	r3, [r4, #20]
 8003374:	425b      	negs	r3, r3
 8003376:	61a3      	str	r3, [r4, #24]
 8003378:	6923      	ldr	r3, [r4, #16]
 800337a:	b943      	cbnz	r3, 800338e <__swsetup_r+0xc6>
 800337c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003380:	d1ba      	bne.n	80032f8 <__swsetup_r+0x30>
 8003382:	bd70      	pop	{r4, r5, r6, pc}
 8003384:	0781      	lsls	r1, r0, #30
 8003386:	bf58      	it	pl
 8003388:	6963      	ldrpl	r3, [r4, #20]
 800338a:	60a3      	str	r3, [r4, #8]
 800338c:	e7f4      	b.n	8003378 <__swsetup_r+0xb0>
 800338e:	2000      	movs	r0, #0
 8003390:	e7f7      	b.n	8003382 <__swsetup_r+0xba>
 8003392:	bf00      	nop
 8003394:	2000003c 	.word	0x2000003c
 8003398:	080038c8 	.word	0x080038c8
 800339c:	080038e8 	.word	0x080038e8
 80033a0:	080038a8 	.word	0x080038a8

080033a4 <_close_r>:
 80033a4:	b538      	push	{r3, r4, r5, lr}
 80033a6:	4d06      	ldr	r5, [pc, #24]	; (80033c0 <_close_r+0x1c>)
 80033a8:	2300      	movs	r3, #0
 80033aa:	4604      	mov	r4, r0
 80033ac:	4608      	mov	r0, r1
 80033ae:	602b      	str	r3, [r5, #0]
 80033b0:	f7fd fcd3 	bl	8000d5a <_close>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d102      	bne.n	80033be <_close_r+0x1a>
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	b103      	cbz	r3, 80033be <_close_r+0x1a>
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	20000158 	.word	0x20000158

080033c4 <__sflush_r>:
 80033c4:	898a      	ldrh	r2, [r1, #12]
 80033c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ca:	4605      	mov	r5, r0
 80033cc:	0710      	lsls	r0, r2, #28
 80033ce:	460c      	mov	r4, r1
 80033d0:	d458      	bmi.n	8003484 <__sflush_r+0xc0>
 80033d2:	684b      	ldr	r3, [r1, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	dc05      	bgt.n	80033e4 <__sflush_r+0x20>
 80033d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	dc02      	bgt.n	80033e4 <__sflush_r+0x20>
 80033de:	2000      	movs	r0, #0
 80033e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033e6:	2e00      	cmp	r6, #0
 80033e8:	d0f9      	beq.n	80033de <__sflush_r+0x1a>
 80033ea:	2300      	movs	r3, #0
 80033ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033f0:	682f      	ldr	r7, [r5, #0]
 80033f2:	602b      	str	r3, [r5, #0]
 80033f4:	d032      	beq.n	800345c <__sflush_r+0x98>
 80033f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033f8:	89a3      	ldrh	r3, [r4, #12]
 80033fa:	075a      	lsls	r2, r3, #29
 80033fc:	d505      	bpl.n	800340a <__sflush_r+0x46>
 80033fe:	6863      	ldr	r3, [r4, #4]
 8003400:	1ac0      	subs	r0, r0, r3
 8003402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003404:	b10b      	cbz	r3, 800340a <__sflush_r+0x46>
 8003406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003408:	1ac0      	subs	r0, r0, r3
 800340a:	2300      	movs	r3, #0
 800340c:	4602      	mov	r2, r0
 800340e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003410:	6a21      	ldr	r1, [r4, #32]
 8003412:	4628      	mov	r0, r5
 8003414:	47b0      	blx	r6
 8003416:	1c43      	adds	r3, r0, #1
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	d106      	bne.n	800342a <__sflush_r+0x66>
 800341c:	6829      	ldr	r1, [r5, #0]
 800341e:	291d      	cmp	r1, #29
 8003420:	d82c      	bhi.n	800347c <__sflush_r+0xb8>
 8003422:	4a2a      	ldr	r2, [pc, #168]	; (80034cc <__sflush_r+0x108>)
 8003424:	40ca      	lsrs	r2, r1
 8003426:	07d6      	lsls	r6, r2, #31
 8003428:	d528      	bpl.n	800347c <__sflush_r+0xb8>
 800342a:	2200      	movs	r2, #0
 800342c:	6062      	str	r2, [r4, #4]
 800342e:	04d9      	lsls	r1, r3, #19
 8003430:	6922      	ldr	r2, [r4, #16]
 8003432:	6022      	str	r2, [r4, #0]
 8003434:	d504      	bpl.n	8003440 <__sflush_r+0x7c>
 8003436:	1c42      	adds	r2, r0, #1
 8003438:	d101      	bne.n	800343e <__sflush_r+0x7a>
 800343a:	682b      	ldr	r3, [r5, #0]
 800343c:	b903      	cbnz	r3, 8003440 <__sflush_r+0x7c>
 800343e:	6560      	str	r0, [r4, #84]	; 0x54
 8003440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003442:	602f      	str	r7, [r5, #0]
 8003444:	2900      	cmp	r1, #0
 8003446:	d0ca      	beq.n	80033de <__sflush_r+0x1a>
 8003448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800344c:	4299      	cmp	r1, r3
 800344e:	d002      	beq.n	8003456 <__sflush_r+0x92>
 8003450:	4628      	mov	r0, r5
 8003452:	f000 f8fb 	bl	800364c <_free_r>
 8003456:	2000      	movs	r0, #0
 8003458:	6360      	str	r0, [r4, #52]	; 0x34
 800345a:	e7c1      	b.n	80033e0 <__sflush_r+0x1c>
 800345c:	6a21      	ldr	r1, [r4, #32]
 800345e:	2301      	movs	r3, #1
 8003460:	4628      	mov	r0, r5
 8003462:	47b0      	blx	r6
 8003464:	1c41      	adds	r1, r0, #1
 8003466:	d1c7      	bne.n	80033f8 <__sflush_r+0x34>
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0c4      	beq.n	80033f8 <__sflush_r+0x34>
 800346e:	2b1d      	cmp	r3, #29
 8003470:	d001      	beq.n	8003476 <__sflush_r+0xb2>
 8003472:	2b16      	cmp	r3, #22
 8003474:	d101      	bne.n	800347a <__sflush_r+0xb6>
 8003476:	602f      	str	r7, [r5, #0]
 8003478:	e7b1      	b.n	80033de <__sflush_r+0x1a>
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003480:	81a3      	strh	r3, [r4, #12]
 8003482:	e7ad      	b.n	80033e0 <__sflush_r+0x1c>
 8003484:	690f      	ldr	r7, [r1, #16]
 8003486:	2f00      	cmp	r7, #0
 8003488:	d0a9      	beq.n	80033de <__sflush_r+0x1a>
 800348a:	0793      	lsls	r3, r2, #30
 800348c:	680e      	ldr	r6, [r1, #0]
 800348e:	bf08      	it	eq
 8003490:	694b      	ldreq	r3, [r1, #20]
 8003492:	600f      	str	r7, [r1, #0]
 8003494:	bf18      	it	ne
 8003496:	2300      	movne	r3, #0
 8003498:	eba6 0807 	sub.w	r8, r6, r7
 800349c:	608b      	str	r3, [r1, #8]
 800349e:	f1b8 0f00 	cmp.w	r8, #0
 80034a2:	dd9c      	ble.n	80033de <__sflush_r+0x1a>
 80034a4:	6a21      	ldr	r1, [r4, #32]
 80034a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034a8:	4643      	mov	r3, r8
 80034aa:	463a      	mov	r2, r7
 80034ac:	4628      	mov	r0, r5
 80034ae:	47b0      	blx	r6
 80034b0:	2800      	cmp	r0, #0
 80034b2:	dc06      	bgt.n	80034c2 <__sflush_r+0xfe>
 80034b4:	89a3      	ldrh	r3, [r4, #12]
 80034b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ba:	81a3      	strh	r3, [r4, #12]
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	e78e      	b.n	80033e0 <__sflush_r+0x1c>
 80034c2:	4407      	add	r7, r0
 80034c4:	eba8 0800 	sub.w	r8, r8, r0
 80034c8:	e7e9      	b.n	800349e <__sflush_r+0xda>
 80034ca:	bf00      	nop
 80034cc:	20400001 	.word	0x20400001

080034d0 <_fflush_r>:
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	690b      	ldr	r3, [r1, #16]
 80034d4:	4605      	mov	r5, r0
 80034d6:	460c      	mov	r4, r1
 80034d8:	b913      	cbnz	r3, 80034e0 <_fflush_r+0x10>
 80034da:	2500      	movs	r5, #0
 80034dc:	4628      	mov	r0, r5
 80034de:	bd38      	pop	{r3, r4, r5, pc}
 80034e0:	b118      	cbz	r0, 80034ea <_fflush_r+0x1a>
 80034e2:	6983      	ldr	r3, [r0, #24]
 80034e4:	b90b      	cbnz	r3, 80034ea <_fflush_r+0x1a>
 80034e6:	f7ff fa4f 	bl	8002988 <__sinit>
 80034ea:	4b14      	ldr	r3, [pc, #80]	; (800353c <_fflush_r+0x6c>)
 80034ec:	429c      	cmp	r4, r3
 80034ee:	d11b      	bne.n	8003528 <_fflush_r+0x58>
 80034f0:	686c      	ldr	r4, [r5, #4]
 80034f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ef      	beq.n	80034da <_fflush_r+0xa>
 80034fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034fc:	07d0      	lsls	r0, r2, #31
 80034fe:	d404      	bmi.n	800350a <_fflush_r+0x3a>
 8003500:	0599      	lsls	r1, r3, #22
 8003502:	d402      	bmi.n	800350a <_fflush_r+0x3a>
 8003504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003506:	f7ff fadd 	bl	8002ac4 <__retarget_lock_acquire_recursive>
 800350a:	4628      	mov	r0, r5
 800350c:	4621      	mov	r1, r4
 800350e:	f7ff ff59 	bl	80033c4 <__sflush_r>
 8003512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003514:	07da      	lsls	r2, r3, #31
 8003516:	4605      	mov	r5, r0
 8003518:	d4e0      	bmi.n	80034dc <_fflush_r+0xc>
 800351a:	89a3      	ldrh	r3, [r4, #12]
 800351c:	059b      	lsls	r3, r3, #22
 800351e:	d4dd      	bmi.n	80034dc <_fflush_r+0xc>
 8003520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003522:	f7ff fad0 	bl	8002ac6 <__retarget_lock_release_recursive>
 8003526:	e7d9      	b.n	80034dc <_fflush_r+0xc>
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <_fflush_r+0x70>)
 800352a:	429c      	cmp	r4, r3
 800352c:	d101      	bne.n	8003532 <_fflush_r+0x62>
 800352e:	68ac      	ldr	r4, [r5, #8]
 8003530:	e7df      	b.n	80034f2 <_fflush_r+0x22>
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <_fflush_r+0x74>)
 8003534:	429c      	cmp	r4, r3
 8003536:	bf08      	it	eq
 8003538:	68ec      	ldreq	r4, [r5, #12]
 800353a:	e7da      	b.n	80034f2 <_fflush_r+0x22>
 800353c:	080038c8 	.word	0x080038c8
 8003540:	080038e8 	.word	0x080038e8
 8003544:	080038a8 	.word	0x080038a8

08003548 <_lseek_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	4d07      	ldr	r5, [pc, #28]	; (8003568 <_lseek_r+0x20>)
 800354c:	4604      	mov	r4, r0
 800354e:	4608      	mov	r0, r1
 8003550:	4611      	mov	r1, r2
 8003552:	2200      	movs	r2, #0
 8003554:	602a      	str	r2, [r5, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	f7fd fc26 	bl	8000da8 <_lseek>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	d102      	bne.n	8003566 <_lseek_r+0x1e>
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	b103      	cbz	r3, 8003566 <_lseek_r+0x1e>
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	bd38      	pop	{r3, r4, r5, pc}
 8003568:	20000158 	.word	0x20000158

0800356c <__swhatbuf_r>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	460e      	mov	r6, r1
 8003570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003574:	2900      	cmp	r1, #0
 8003576:	b096      	sub	sp, #88	; 0x58
 8003578:	4614      	mov	r4, r2
 800357a:	461d      	mov	r5, r3
 800357c:	da07      	bge.n	800358e <__swhatbuf_r+0x22>
 800357e:	2300      	movs	r3, #0
 8003580:	602b      	str	r3, [r5, #0]
 8003582:	89b3      	ldrh	r3, [r6, #12]
 8003584:	061a      	lsls	r2, r3, #24
 8003586:	d410      	bmi.n	80035aa <__swhatbuf_r+0x3e>
 8003588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800358c:	e00e      	b.n	80035ac <__swhatbuf_r+0x40>
 800358e:	466a      	mov	r2, sp
 8003590:	f000 f8be 	bl	8003710 <_fstat_r>
 8003594:	2800      	cmp	r0, #0
 8003596:	dbf2      	blt.n	800357e <__swhatbuf_r+0x12>
 8003598:	9a01      	ldr	r2, [sp, #4]
 800359a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800359e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035a2:	425a      	negs	r2, r3
 80035a4:	415a      	adcs	r2, r3
 80035a6:	602a      	str	r2, [r5, #0]
 80035a8:	e7ee      	b.n	8003588 <__swhatbuf_r+0x1c>
 80035aa:	2340      	movs	r3, #64	; 0x40
 80035ac:	2000      	movs	r0, #0
 80035ae:	6023      	str	r3, [r4, #0]
 80035b0:	b016      	add	sp, #88	; 0x58
 80035b2:	bd70      	pop	{r4, r5, r6, pc}

080035b4 <__smakebuf_r>:
 80035b4:	898b      	ldrh	r3, [r1, #12]
 80035b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035b8:	079d      	lsls	r5, r3, #30
 80035ba:	4606      	mov	r6, r0
 80035bc:	460c      	mov	r4, r1
 80035be:	d507      	bpl.n	80035d0 <__smakebuf_r+0x1c>
 80035c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035c4:	6023      	str	r3, [r4, #0]
 80035c6:	6123      	str	r3, [r4, #16]
 80035c8:	2301      	movs	r3, #1
 80035ca:	6163      	str	r3, [r4, #20]
 80035cc:	b002      	add	sp, #8
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
 80035d0:	ab01      	add	r3, sp, #4
 80035d2:	466a      	mov	r2, sp
 80035d4:	f7ff ffca 	bl	800356c <__swhatbuf_r>
 80035d8:	9900      	ldr	r1, [sp, #0]
 80035da:	4605      	mov	r5, r0
 80035dc:	4630      	mov	r0, r6
 80035de:	f7ff fa73 	bl	8002ac8 <_malloc_r>
 80035e2:	b948      	cbnz	r0, 80035f8 <__smakebuf_r+0x44>
 80035e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035e8:	059a      	lsls	r2, r3, #22
 80035ea:	d4ef      	bmi.n	80035cc <__smakebuf_r+0x18>
 80035ec:	f023 0303 	bic.w	r3, r3, #3
 80035f0:	f043 0302 	orr.w	r3, r3, #2
 80035f4:	81a3      	strh	r3, [r4, #12]
 80035f6:	e7e3      	b.n	80035c0 <__smakebuf_r+0xc>
 80035f8:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <__smakebuf_r+0x7c>)
 80035fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80035fc:	89a3      	ldrh	r3, [r4, #12]
 80035fe:	6020      	str	r0, [r4, #0]
 8003600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003604:	81a3      	strh	r3, [r4, #12]
 8003606:	9b00      	ldr	r3, [sp, #0]
 8003608:	6163      	str	r3, [r4, #20]
 800360a:	9b01      	ldr	r3, [sp, #4]
 800360c:	6120      	str	r0, [r4, #16]
 800360e:	b15b      	cbz	r3, 8003628 <__smakebuf_r+0x74>
 8003610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003614:	4630      	mov	r0, r6
 8003616:	f000 f88d 	bl	8003734 <_isatty_r>
 800361a:	b128      	cbz	r0, 8003628 <__smakebuf_r+0x74>
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	89a0      	ldrh	r0, [r4, #12]
 800362a:	4305      	orrs	r5, r0
 800362c:	81a5      	strh	r5, [r4, #12]
 800362e:	e7cd      	b.n	80035cc <__smakebuf_r+0x18>
 8003630:	08002921 	.word	0x08002921

08003634 <__malloc_lock>:
 8003634:	4801      	ldr	r0, [pc, #4]	; (800363c <__malloc_lock+0x8>)
 8003636:	f7ff ba45 	b.w	8002ac4 <__retarget_lock_acquire_recursive>
 800363a:	bf00      	nop
 800363c:	20000150 	.word	0x20000150

08003640 <__malloc_unlock>:
 8003640:	4801      	ldr	r0, [pc, #4]	; (8003648 <__malloc_unlock+0x8>)
 8003642:	f7ff ba40 	b.w	8002ac6 <__retarget_lock_release_recursive>
 8003646:	bf00      	nop
 8003648:	20000150 	.word	0x20000150

0800364c <_free_r>:
 800364c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800364e:	2900      	cmp	r1, #0
 8003650:	d048      	beq.n	80036e4 <_free_r+0x98>
 8003652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003656:	9001      	str	r0, [sp, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f1a1 0404 	sub.w	r4, r1, #4
 800365e:	bfb8      	it	lt
 8003660:	18e4      	addlt	r4, r4, r3
 8003662:	f7ff ffe7 	bl	8003634 <__malloc_lock>
 8003666:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <_free_r+0x9c>)
 8003668:	9801      	ldr	r0, [sp, #4]
 800366a:	6813      	ldr	r3, [r2, #0]
 800366c:	4615      	mov	r5, r2
 800366e:	b933      	cbnz	r3, 800367e <_free_r+0x32>
 8003670:	6063      	str	r3, [r4, #4]
 8003672:	6014      	str	r4, [r2, #0]
 8003674:	b003      	add	sp, #12
 8003676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800367a:	f7ff bfe1 	b.w	8003640 <__malloc_unlock>
 800367e:	42a3      	cmp	r3, r4
 8003680:	d90b      	bls.n	800369a <_free_r+0x4e>
 8003682:	6821      	ldr	r1, [r4, #0]
 8003684:	1862      	adds	r2, r4, r1
 8003686:	4293      	cmp	r3, r2
 8003688:	bf04      	itt	eq
 800368a:	681a      	ldreq	r2, [r3, #0]
 800368c:	685b      	ldreq	r3, [r3, #4]
 800368e:	6063      	str	r3, [r4, #4]
 8003690:	bf04      	itt	eq
 8003692:	1852      	addeq	r2, r2, r1
 8003694:	6022      	streq	r2, [r4, #0]
 8003696:	602c      	str	r4, [r5, #0]
 8003698:	e7ec      	b.n	8003674 <_free_r+0x28>
 800369a:	461a      	mov	r2, r3
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	b10b      	cbz	r3, 80036a4 <_free_r+0x58>
 80036a0:	42a3      	cmp	r3, r4
 80036a2:	d9fa      	bls.n	800369a <_free_r+0x4e>
 80036a4:	6811      	ldr	r1, [r2, #0]
 80036a6:	1855      	adds	r5, r2, r1
 80036a8:	42a5      	cmp	r5, r4
 80036aa:	d10b      	bne.n	80036c4 <_free_r+0x78>
 80036ac:	6824      	ldr	r4, [r4, #0]
 80036ae:	4421      	add	r1, r4
 80036b0:	1854      	adds	r4, r2, r1
 80036b2:	42a3      	cmp	r3, r4
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	d1dd      	bne.n	8003674 <_free_r+0x28>
 80036b8:	681c      	ldr	r4, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	6053      	str	r3, [r2, #4]
 80036be:	4421      	add	r1, r4
 80036c0:	6011      	str	r1, [r2, #0]
 80036c2:	e7d7      	b.n	8003674 <_free_r+0x28>
 80036c4:	d902      	bls.n	80036cc <_free_r+0x80>
 80036c6:	230c      	movs	r3, #12
 80036c8:	6003      	str	r3, [r0, #0]
 80036ca:	e7d3      	b.n	8003674 <_free_r+0x28>
 80036cc:	6825      	ldr	r5, [r4, #0]
 80036ce:	1961      	adds	r1, r4, r5
 80036d0:	428b      	cmp	r3, r1
 80036d2:	bf04      	itt	eq
 80036d4:	6819      	ldreq	r1, [r3, #0]
 80036d6:	685b      	ldreq	r3, [r3, #4]
 80036d8:	6063      	str	r3, [r4, #4]
 80036da:	bf04      	itt	eq
 80036dc:	1949      	addeq	r1, r1, r5
 80036de:	6021      	streq	r1, [r4, #0]
 80036e0:	6054      	str	r4, [r2, #4]
 80036e2:	e7c7      	b.n	8003674 <_free_r+0x28>
 80036e4:	b003      	add	sp, #12
 80036e6:	bd30      	pop	{r4, r5, pc}
 80036e8:	200000fc 	.word	0x200000fc

080036ec <_read_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4d07      	ldr	r5, [pc, #28]	; (800370c <_read_r+0x20>)
 80036f0:	4604      	mov	r4, r0
 80036f2:	4608      	mov	r0, r1
 80036f4:	4611      	mov	r1, r2
 80036f6:	2200      	movs	r2, #0
 80036f8:	602a      	str	r2, [r5, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f7fd faf4 	bl	8000ce8 <_read>
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	d102      	bne.n	800370a <_read_r+0x1e>
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	b103      	cbz	r3, 800370a <_read_r+0x1e>
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	bd38      	pop	{r3, r4, r5, pc}
 800370c:	20000158 	.word	0x20000158

08003710 <_fstat_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4d07      	ldr	r5, [pc, #28]	; (8003730 <_fstat_r+0x20>)
 8003714:	2300      	movs	r3, #0
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	602b      	str	r3, [r5, #0]
 800371e:	f7fd fb28 	bl	8000d72 <_fstat>
 8003722:	1c43      	adds	r3, r0, #1
 8003724:	d102      	bne.n	800372c <_fstat_r+0x1c>
 8003726:	682b      	ldr	r3, [r5, #0]
 8003728:	b103      	cbz	r3, 800372c <_fstat_r+0x1c>
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	bd38      	pop	{r3, r4, r5, pc}
 800372e:	bf00      	nop
 8003730:	20000158 	.word	0x20000158

08003734 <_isatty_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	4d06      	ldr	r5, [pc, #24]	; (8003750 <_isatty_r+0x1c>)
 8003738:	2300      	movs	r3, #0
 800373a:	4604      	mov	r4, r0
 800373c:	4608      	mov	r0, r1
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	f7fd fb27 	bl	8000d92 <_isatty>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d102      	bne.n	800374e <_isatty_r+0x1a>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	b103      	cbz	r3, 800374e <_isatty_r+0x1a>
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	20000158 	.word	0x20000158

08003754 <_init>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr

08003760 <_fini>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr
